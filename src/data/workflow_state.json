{
  "repo_structure": {
    "v1": {
      "root": "\\tmp\\modus-web-components.git",
      "structure": {
        ".": {
          "files": [
            ".cspell.json",
            ".editorconfig",
            ".gitattributes",
            ".gitignore",
            ".htmlhintrc",
            ".markdownlint.json",
            ".npmrc",
            ".prettierignore",
            ".prettierrc.json",
            ".whitesource",
            "CHANGELOG.md",
            "CONSIDERATIONS.md",
            "CONTRIBUTING.md",
            "LICENSE",
            "package.json",
            "README.md",
            "SECURITY.md",
            "sonar-project.properties",
            "SUPPORT.md",
            "wss-unified-agent.config"
          ],
          "components": []
        },
        ".git": {
          "files": [
            "config",
            "description",
            "FETCH_HEAD",
            "HEAD",
            "index",
            "ORIG_HEAD",
            "packed-refs"
          ],
          "components": []
        },
        ".git\\hooks": {
          "files": [
            "applypatch-msg.sample",
            "commit-msg.sample",
            "fsmonitor-watchman.sample",
            "post-update.sample",
            "pre-applypatch.sample",
            "pre-commit.sample",
            "pre-merge-commit.sample",
            "pre-push.sample",
            "pre-rebase.sample",
            "pre-receive.sample",
            "prepare-commit-msg.sample",
            "push-to-checkout.sample",
            "sendemail-validate.sample",
            "update.sample"
          ],
          "components": []
        },
        ".git\\info": {
          "files": [
            "exclude"
          ],
          "components": []
        },
        ".git\\logs": {
          "files": [
            "HEAD"
          ],
          "components": []
        },
        ".git\\logs\\refs": {
          "files": [],
          "components": []
        },
        ".git\\logs\\refs\\heads": {
          "files": [
            "main"
          ],
          "components": []
        },
        ".git\\logs\\refs\\remotes": {
          "files": [],
          "components": []
        },
        ".git\\logs\\refs\\remotes\\origin": {
          "files": [
            "HEAD"
          ],
          "components": []
        },
        ".git\\objects": {
          "files": [],
          "components": []
        },
        ".git\\objects\\info": {
          "files": [],
          "components": []
        },
        ".git\\objects\\pack": {
          "files": [
            "pack-a5b2a788de362547277181988191d01f8cf54896.idx",
            "pack-a5b2a788de362547277181988191d01f8cf54896.pack",
            "pack-a5b2a788de362547277181988191d01f8cf54896.rev"
          ],
          "components": []
        },
        ".git\\refs": {
          "files": [],
          "components": []
        },
        ".git\\refs\\heads": {
          "files": [
            "main"
          ],
          "components": []
        },
        ".git\\refs\\remotes": {
          "files": [],
          "components": []
        },
        ".git\\refs\\remotes\\origin": {
          "files": [
            "HEAD"
          ],
          "components": []
        },
        ".git\\refs\\tags": {
          "files": [],
          "components": []
        },
        ".github": {
          "files": [
            "CODEOWNERS",
            "copilot-instructions.md",
            "dependabot.yml",
            "issue-labeler.yml",
            "pull_request_template.md",
            "release-drafter.yml"
          ],
          "components": []
        },
        ".github\\ISSUE_TEMPLATE": {
          "files": [
            "bug_report.yml",
            "feature_request.yml"
          ],
          "components": []
        },
        ".github\\workflows": {
          "files": [
            "add-issues-to-modus-project.yml",
            "azure-static-web-apps-deploy.yml",
            "build.yml",
            "codeql.yaml",
            "dependency-review.yml",
            "deploy-storybook.yml",
            "issue-thanks.yml",
            "labeler.yml",
            "publish-angular.yml",
            "publish-react.yml",
            "publish.yml",
            "release-notes.yml",
            "sonar-scan.yml",
            "spellcheck.yml",
            "super-linter.yml"
          ],
          "components": []
        },
        ".vscode": {
          "files": [
            "extensions.json",
            "settings.json"
          ],
          "components": []
        },
        "angular-workspace": {
          "files": [],
          "components": []
        },
        "angular-workspace\\ng15": {
          "files": [
            "angular.json",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "angular-workspace\\ng15\\projects": {
          "files": [],
          "components": []
        },
        "angular-workspace\\ng15\\projects\\test-harness": {
          "files": [
            "karma.conf.js",
            "tsconfig.app.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "angular-workspace\\ng15\\projects\\test-harness\\src": {
          "files": [
            "favicon.ico",
            "index.html",
            "main.ts",
            "polyfills.ts",
            "styles.scss",
            "test.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng15\\projects\\test-harness\\src\\app": {
          "files": [
            "app.component.html",
            "app.component.scss",
            "app.component.spec.ts",
            "app.component.ts",
            "app.module.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng15\\projects\\test-harness\\src\\assets": {
          "files": [
            ".gitkeep"
          ],
          "components": []
        },
        "angular-workspace\\ng15\\projects\\test-harness\\src\\environments": {
          "files": [
            "environment.prod.ts",
            "environment.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng15\\projects\\trimble-oss": {
          "files": [],
          "components": []
        },
        "angular-workspace\\ng15\\projects\\trimble-oss\\modus-angular-components": {
          "files": [
            ".browserslistrc",
            ".npmrc",
            "karma.conf.js",
            "LICENSE",
            "ng-package.json",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.lib.json",
            "tsconfig.lib.prod.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "angular-workspace\\ng15\\projects\\trimble-oss\\modus-angular-components\\src": {
          "files": [
            "public-api.ts",
            "test.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng15\\projects\\trimble-oss\\modus-angular-components\\src\\lib": {
          "files": [
            "modus-angular-components.module.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng16": {
          "files": [
            "angular.json",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "angular-workspace\\ng16\\projects": {
          "files": [],
          "components": []
        },
        "angular-workspace\\ng16\\projects\\test-harness": {
          "files": [
            "karma.conf.js",
            "tsconfig.app.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "angular-workspace\\ng16\\projects\\test-harness\\src": {
          "files": [
            "favicon.ico",
            "index.html",
            "main.ts",
            "polyfills.ts",
            "styles.scss",
            "test.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng16\\projects\\test-harness\\src\\app": {
          "files": [
            "app.component.html",
            "app.component.scss",
            "app.component.spec.ts",
            "app.component.ts",
            "app.module.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng16\\projects\\test-harness\\src\\assets": {
          "files": [
            ".gitkeep"
          ],
          "components": []
        },
        "angular-workspace\\ng16\\projects\\test-harness\\src\\environments": {
          "files": [
            "environment.prod.ts",
            "environment.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng16\\projects\\trimble-oss": {
          "files": [],
          "components": []
        },
        "angular-workspace\\ng16\\projects\\trimble-oss\\modus-angular-components": {
          "files": [
            ".browserslistrc",
            ".npmrc",
            "karma.conf.js",
            "LICENSE",
            "ng-package.json",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.lib.json",
            "tsconfig.lib.prod.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "angular-workspace\\ng16\\projects\\trimble-oss\\modus-angular-components\\src": {
          "files": [
            "public-api.ts",
            "test.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng16\\projects\\trimble-oss\\modus-angular-components\\src\\lib": {
          "files": [
            "modus-angular-components.module.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng17": {
          "files": [
            ".npmrc",
            "angular.json",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "angular-workspace\\ng17\\projects": {
          "files": [],
          "components": []
        },
        "angular-workspace\\ng17\\projects\\test-harness": {
          "files": [
            "karma.conf.js",
            "tsconfig.app.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "angular-workspace\\ng17\\projects\\test-harness\\src": {
          "files": [
            "favicon.ico",
            "index.html",
            "main.ts",
            "polyfills.ts",
            "styles.scss",
            "test.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng17\\projects\\test-harness\\src\\app": {
          "files": [
            "app.component.html",
            "app.component.scss",
            "app.component.spec.ts",
            "app.component.ts",
            "app.module.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng17\\projects\\test-harness\\src\\assets": {
          "files": [
            ".gitkeep"
          ],
          "components": []
        },
        "angular-workspace\\ng17\\projects\\test-harness\\src\\environments": {
          "files": [
            "environment.prod.ts",
            "environment.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng17\\projects\\trimble-oss": {
          "files": [],
          "components": []
        },
        "angular-workspace\\ng17\\projects\\trimble-oss\\modus-angular-components": {
          "files": [
            ".browserslistrc",
            ".npmrc",
            "karma.conf.js",
            "LICENSE",
            "ng-package.json",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.lib.json",
            "tsconfig.lib.prod.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "angular-workspace\\ng17\\projects\\trimble-oss\\modus-angular-components\\src": {
          "files": [
            "public-api.ts",
            "test.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng17\\projects\\trimble-oss\\modus-angular-components\\src\\lib": {
          "files": [
            "modus-angular-components.module.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng18": {
          "files": [
            "angular.json",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "angular-workspace\\ng18\\projects": {
          "files": [],
          "components": []
        },
        "angular-workspace\\ng18\\projects\\test-harness": {
          "files": [
            "tsconfig.app.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "angular-workspace\\ng18\\projects\\test-harness\\public": {
          "files": [
            "favicon.ico"
          ],
          "components": []
        },
        "angular-workspace\\ng18\\projects\\test-harness\\src": {
          "files": [
            "index.html",
            "main.ts",
            "styles.scss"
          ],
          "components": []
        },
        "angular-workspace\\ng18\\projects\\test-harness\\src\\app": {
          "files": [
            "app.component.html",
            "app.component.scss",
            "app.component.spec.ts",
            "app.component.ts",
            "app.config.ts",
            "app.routes.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng18\\projects\\trimble-oss": {
          "files": [],
          "components": []
        },
        "angular-workspace\\ng18\\projects\\trimble-oss\\modus-angular-components": {
          "files": [
            ".npmrc",
            "LICENSE",
            "ng-package.json",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.lib.json",
            "tsconfig.lib.prod.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "angular-workspace\\ng18\\projects\\trimble-oss\\modus-angular-components\\src": {
          "files": [
            "public-api.ts"
          ],
          "components": []
        },
        "angular-workspace\\ng18\\projects\\trimble-oss\\modus-angular-components\\src\\lib": {
          "files": [
            "modus-angular-components.module.ts"
          ],
          "components": []
        },
        "angular-workspace\\projects": {
          "files": [],
          "components": []
        },
        "angular-workspace\\projects\\trimble-oss": {
          "files": [],
          "components": []
        },
        "angular-workspace\\projects\\trimble-oss\\modus-angular-components": {
          "files": [],
          "components": []
        },
        "angular-workspace\\projects\\trimble-oss\\modus-angular-components\\src": {
          "files": [],
          "components": []
        },
        "angular-workspace\\projects\\trimble-oss\\modus-angular-components\\src\\lib": {
          "files": [],
          "components": []
        },
        "angular-workspace\\projects\\trimble-oss\\modus-angular-components\\src\\lib\\stencil-generated": {
          "files": [
            "boolean-value-accessor.ts",
            "components.ts",
            "index.ts",
            "select-value-accessor.ts",
            "text-value-accessor.ts",
            "value-accessor.ts"
          ],
          "components": []
        },
        "angular-workspace\\projects\\trimble-oss\\modus-angular-components\\src\\lib\\stencil-generated\\angular-component-lib": {
          "files": [
            "utils.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15": {
          "files": [
            ".npmrc",
            "angular.json",
            "karma.conf.js",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.app.json",
            "tsconfig.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src": {
          "files": [
            "index.html",
            "main.ts",
            "polyfills.ts",
            "styles.css",
            "test.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\app": {
          "files": [
            "app.component.html",
            "app.component.scss",
            "app.component.spec.ts",
            "app.component.ts",
            "app.module.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\assets": {
          "files": [
            "test.css"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\environments": {
          "files": [
            "environment.prod.ts",
            "environment.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples": {
          "files": [],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-accordion-examples": {
          "files": [
            "modus-accordion-examples.component.spec.ts",
            "modus-accordion-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-alert-examples": {
          "files": [
            "modus-alert-examples.component.spec.ts",
            "modus-alert-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-autocomplete-examples": {
          "files": [
            "modus-autocomplete-examples.component.spec.ts",
            "modus-autocomplete-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-badge-examples": {
          "files": [
            "modus-badge-examples.component.spec.ts",
            "modus-badge-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-breadcrumb-examples": {
          "files": [
            "modus-breadcrumb-examples.component.spec.ts",
            "modus-breadcrumb-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-button-examples": {
          "files": [
            "modus-button-examples.component.spec.ts",
            "modus-button-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-card-examples": {
          "files": [
            "modus-card-examples.component.spec.ts",
            "modus-card-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-checkbox-examples": {
          "files": [
            "modus-checkbox-examples.component.spec.ts",
            "modus-checkbox-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-chip-examples": {
          "files": [
            "modus-chip-examples.component.spec.ts",
            "modus-chip-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-content-tree-examples": {
          "files": [
            "modus-content-tree-examples.component.spec.ts",
            "modus-content-tree-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-data-table-examples": {
          "files": [
            "modus-data-table-examples.component.spec.ts",
            "modus-data-table-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-date-picker-examples": {
          "files": [
            "modus-date-picker-examples.component.spec.ts",
            "modus-date-picker-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-dropdown-examples": {
          "files": [
            "modus-dropdown-examples.component.spec.ts",
            "modus-dropdown-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-file-dropzone-examples": {
          "files": [
            "modus-file-dropzone-examples.component.spec.ts",
            "modus-file-dropzone-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-list-examples": {
          "files": [
            "modus-list-examples.component.spec.ts",
            "modus-list-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-message-examples": {
          "files": [
            "modus-message-examples.component.spec.ts",
            "modus-message-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-modal-examples": {
          "files": [
            "modus-modal-examples.component.spec.ts",
            "modus-modal-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-navbar-examples": {
          "files": [
            "modus-navbar-examples.component.html",
            "modus-navbar-examples.component.scss",
            "modus-navbar-examples.component.spec.ts",
            "modus-navbar-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-number-examples": {
          "files": [
            "modus-number-examples.component.html",
            "modus-number-examples.component.spec.ts",
            "modus-number-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-pagination-examples": {
          "files": [
            "modus-pagination-examples.component.html",
            "modus-pagination-examples.component.spec.ts",
            "modus-pagination-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-progress-bar-examples": {
          "files": [
            "modus-progress-bar-examples.component.html",
            "modus-progress-bar-examples.component.spec.ts",
            "modus-progress-bar-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-radio-group-examples": {
          "files": [
            "modus-radio-group-examples.component.spec.ts",
            "modus-radio-group-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-select-examples": {
          "files": [
            "modus-select-examples.component.html",
            "modus-select-examples.component.spec.ts",
            "modus-select-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-side-navigation-examples": {
          "files": [
            "modus-side-navigation-examples.component.html",
            "modus-side-navigation-examples.component.scss",
            "modus-side-navigation-examples.component.spec.ts",
            "modus-side-navigation-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-slider-examples": {
          "files": [
            "modus-slider-examples.component.spec.ts",
            "modus-slider-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-spinner-examples": {
          "files": [
            "modus-spinner-examples.component.spec.ts",
            "modus-spinner-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-switch-examples": {
          "files": [
            "modus-switch-examples.component.spec.ts",
            "modus-switch-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-table-examples": {
          "files": [
            "modus-table-examples.component.spec.ts",
            "modus-table-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-tabs-examples": {
          "files": [
            "modus-tabs-examples.component.spec.ts",
            "modus-tabs-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-text-input-examples": {
          "files": [
            "modus-text-input-examples.component.html",
            "modus-text-input-examples.component.spec.ts",
            "modus-text-input-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-time-picker-examples": {
          "files": [
            "modus-time-picker-examples.component.html",
            "modus-time-picker-examples.component.spec.ts",
            "modus-time-picker-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-toast-examples": {
          "files": [
            "modus-toast-examples.component.spec.ts",
            "modus-toast-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-ng15\\src\\examples\\modus-tooltip-examples": {
          "files": [
            "modus-tooltip-examples.component.spec.ts",
            "modus-tooltip-examples.component.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-web-components": {
          "files": [
            "angular.json",
            "karma.conf.js",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.app.json",
            "tsconfig.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "angular-workspace\\test-web-components\\src": {
          "files": [
            "index.html",
            "main.ts",
            "polyfills.ts",
            "styles.css",
            "test.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-web-components\\src\\app": {
          "files": [
            "app.component.html",
            "app.component.scss",
            "app.component.spec.ts",
            "app.component.ts",
            "app.module.ts"
          ],
          "components": []
        },
        "angular-workspace\\test-web-components\\src\\assets": {
          "files": [
            "test.css"
          ],
          "components": []
        },
        "angular-workspace\\test-web-components\\src\\environments": {
          "files": [
            "environment.prod.ts",
            "environment.ts"
          ],
          "components": []
        },
        "design": {
          "files": [
            "capability-design.md"
          ],
          "components": []
        },
        "react-workspace": {
          "files": [],
          "components": []
        },
        "react-workspace\\react-17": {
          "files": [
            ".npmrc",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "react-workspace\\react-17\\src": {
          "files": [
            "index.ts"
          ],
          "components": []
        },
        "react-workspace\\react-17\\src\\components": {
          "files": [
            "index.ts"
          ],
          "components": []
        },
        "react-workspace\\react-18": {
          "files": [
            ".npmrc",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "react-workspace\\react-18\\src": {
          "files": [
            "index.ts"
          ],
          "components": []
        },
        "react-workspace\\react-18\\src\\components": {
          "files": [
            "index.ts"
          ],
          "components": []
        },
        "react-workspace\\react-19": {
          "files": [
            ".npmrc",
            "index.ts",
            "package-lock.json",
            "package.json",
            "tsconfig.json"
          ],
          "components": []
        },
        "react-workspace\\test-react-v17": {
          "files": [
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "react-workspace\\test-react-v17\\public": {
          "files": [
            "index.html",
            "manifest.json"
          ],
          "components": []
        },
        "react-workspace\\test-react-v17\\src": {
          "files": [
            "App.css",
            "App.tsx",
            "index.tsx"
          ],
          "components": []
        },
        "react-workspace\\test-react-v17\\src\\examples": {
          "files": [
            "index.tsx",
            "ModusAccordionExamples.tsx",
            "ModusAlertExamples.tsx",
            "ModusAutoCompleteExamples.tsx",
            "ModusBadgeExamples.tsx",
            "ModusBreadcrumbExamples.tsx",
            "ModusButtonExamples.tsx",
            "ModusCardExamples.tsx",
            "ModusCheckboxExamples.tsx",
            "ModusChipExamples.tsx",
            "ModusContentTreeExamples.tsx",
            "ModusDataTableExamples.tsx",
            "ModusDatePickerExamples.tsx",
            "ModusDropdownExamples.tsx",
            "ModusFileDropZoneExamples.tsx",
            "ModusListExamples.tsx",
            "ModusMessageExamples.tsx",
            "ModusModalExamples.tsx",
            "ModusNavbarExamples.tsx",
            "ModusNumberInputExamples.tsx",
            "ModusPaginationExamples.tsx",
            "ModusProgressBarExamples.tsx",
            "ModusRadioGroupExamples.tsx",
            "ModusSelectExamples.tsx",
            "ModusSideNavigationExamples.tsx",
            "ModusSliderExamples.tsx",
            "ModusSpinnerExamples.tsx",
            "ModusSwitchExamples.tsx",
            "ModusTabExamples.tsx",
            "ModusTableExamples.tsx",
            "ModusTextInputExamples.tsx",
            "ModusTimePickerExamples.tsx",
            "ModusToastExamples.tsx",
            "ModusTooltipExamples.tsx"
          ],
          "components": []
        },
        "react-workspace\\test-react-v18": {
          "files": [
            ".npmrc",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "react-workspace\\test-react-v18\\public": {
          "files": [
            "index.html",
            "manifest.json"
          ],
          "components": []
        },
        "react-workspace\\test-react-v18\\src": {
          "files": [
            "App.css",
            "App.tsx",
            "index.tsx"
          ],
          "components": []
        },
        "react-workspace\\test-react-v18\\src\\examples": {
          "files": [
            "index.tsx",
            "ModusAccordionExamples.tsx",
            "ModusAlertExamples.tsx",
            "ModusAutoCompleteExamples.tsx",
            "ModusBadgeExamples.tsx",
            "ModusBreadcrumbExamples.tsx",
            "ModusButtonExamples.tsx",
            "ModusCardExamples.tsx",
            "ModusCheckboxExamples.tsx",
            "ModusChipExamples.tsx",
            "ModusContentTreeExamples.tsx",
            "ModusDataTableExamples.tsx",
            "ModusDatePickerExamples.tsx",
            "ModusDropdownExamples.tsx",
            "ModusFileDropZoneExamples.tsx",
            "ModusListExamples.tsx",
            "ModusMessageExamples.tsx",
            "ModusModalExamples.tsx",
            "ModusNavbarExamples.tsx",
            "ModusNumberInputExamples.tsx",
            "ModusPaginationExamples.tsx",
            "ModusProgressBarExamples.tsx",
            "ModusRadioGroupExamples.tsx",
            "ModusSelectExamples.tsx",
            "ModusSideNavigationExamples.tsx",
            "ModusSliderExamples.tsx",
            "ModusSpinnerExamples.tsx",
            "ModusSwitchExamples.tsx",
            "ModusTabExamples.tsx",
            "ModusTableExamples.tsx",
            "ModusTextInputExamples.tsx",
            "ModusTimePickerExamples.tsx",
            "ModusToastExamples.tsx",
            "ModusTooltipExamples.tsx"
          ],
          "components": []
        },
        "react-workspace\\test-react-v19": {
          "files": [
            ".gitignore",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "react-workspace\\test-react-v19\\public": {
          "files": [
            "favicon.ico",
            "index.html",
            "logo192.png",
            "logo512.png",
            "manifest.json",
            "robots.txt"
          ],
          "components": []
        },
        "react-workspace\\test-react-v19\\src": {
          "files": [
            "App.css",
            "App.test.tsx",
            "App.tsx",
            "index.css",
            "index.tsx",
            "logo.svg",
            "react-app-env.d.ts",
            "reportWebVitals.ts",
            "setupTests.ts"
          ],
          "components": []
        },
        "react-workspace\\test-react-v19\\src\\examples": {
          "files": [
            "index.tsx",
            "ModusAccordionExamples.tsx",
            "ModusAlertExamples.tsx",
            "ModusAutoCompleteExamples.tsx",
            "ModusBadgeExamples.tsx",
            "ModusBreadcrumbExamples.tsx",
            "ModusButtonExamples.tsx",
            "ModusCardExamples.tsx",
            "ModusCheckboxExamples.tsx",
            "ModusChipExamples.tsx",
            "ModusContentTreeExamples.tsx",
            "ModusDataTableExamples.tsx",
            "ModusDatePickerExamples.tsx",
            "ModusDropdownExamples.tsx",
            "ModusFileDropZoneExamples.tsx",
            "ModusListExamples.tsx",
            "ModusMessageExamples.tsx",
            "ModusModalExamples.tsx",
            "ModusNavbarExamples.tsx",
            "ModusNumberInputExamples.tsx",
            "ModusPaginationExamples.tsx",
            "ModusProgressBarExamples.tsx",
            "ModusRadioGroupExamples.tsx",
            "ModusSelectExamples.tsx",
            "ModusSideNavigationExamples.tsx",
            "ModusSliderExamples.tsx",
            "ModusSpinnerExamples.tsx",
            "ModusSwitchExamples.tsx",
            "ModusTabExamples.tsx",
            "ModusTableExamples.tsx",
            "ModusTextInputExamples.tsx",
            "ModusTimePickerExamples.tsx",
            "ModusToastExamples.tsx",
            "ModusTooltipExamples.tsx"
          ],
          "components": []
        },
        "react-workspace\\test-web-components": {
          "files": [
            ".gitignore",
            ".npmrc",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "react-workspace\\test-web-components\\public": {
          "files": [
            "index.html"
          ],
          "components": []
        },
        "react-workspace\\test-web-components\\src": {
          "files": [
            "App.css",
            "App.test.tsx",
            "App.tsx",
            "index.css",
            "index.tsx",
            "intrinsic.d.ts",
            "logo.svg",
            "react-app-env.d.ts",
            "reportWebVitals.ts",
            "setupTests.ts"
          ],
          "components": []
        },
        "stencil-workspace": {
          "files": [
            ".eslintignore",
            ".eslintrc.js",
            ".npmrc",
            ".nvmrc",
            ".stylelintignore",
            ".stylelintrc.json",
            "angular-value-accessor-bindings.ts",
            "netlify.toml",
            "package-lock.json",
            "package.json",
            "README.md",
            "stencil.config.ts",
            "tsconfig.json"
          ],
          "components": []
        },
        "stencil-workspace\\generate-icons": {
          "files": [
            "generate-icons.ts",
            "IconFunctionalComponent.template.ejs",
            "ModusIconMap.template.ejs",
            "ModusIconUtilities.template.ejs"
          ],
          "components": []
        },
        "stencil-workspace\\src": {
          "files": [
            "components.d.ts",
            "index.html",
            "index.ts",
            "interfaces.d.ts",
            "sample.html"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components": {
          "files": [],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-accordion": {
          "files": [
            "modus-accordion.e2e.ts",
            "modus-accordion.scss",
            "modus-accordion.tsx",
            "readme.md"
          ],
          "components": [
            "modus-accordion.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-accordion-item": {
          "files": [
            "modus-accordion-item.e2e.ts",
            "modus-accordion-item.scss",
            "modus-accordion-item.spec.ts",
            "modus-accordion-item.tsx",
            "modus-accordion-item.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-accordion-item.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-action-bar": {
          "files": [
            "modus-action-bar.scss",
            "modus-action-bar.tsx",
            "readme.md"
          ],
          "components": [
            "modus-action-bar.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-alert": {
          "files": [
            "modus-alert.e2e.ts",
            "modus-alert.scss",
            "modus-alert.spec.ts",
            "modus-alert.tsx",
            "modus-alert.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-alert.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-autocomplete": {
          "files": [
            "modus-autocomplete.e2e.ts",
            "modus-autocomplete.scss",
            "modus-autocomplete.spec.ts",
            "modus-autocomplete.tsx",
            "modus-autocomplete.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-autocomplete.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-badge": {
          "files": [
            "modus-badge.e2e.ts",
            "modus-badge.scss",
            "modus-badge.spec.ts",
            "modus-badge.tsx",
            "modus-badge.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-badge.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-breadcrumb": {
          "files": [
            "modus-breadcrumb.e2e.ts",
            "modus-breadcrumb.scss",
            "modus-breadcrumb.spec.ts",
            "modus-breadcrumb.tsx",
            "modus-breadcrumb.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-breadcrumb.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-button": {
          "files": [
            "modus-button.e2e.ts",
            "modus-button.models.ts",
            "modus-button.scss",
            "modus-button.spec.ts",
            "modus-button.tsx",
            "modus-button.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-button.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-button-group": {
          "files": [
            "modus-button-group.constants.ts",
            "modus-button-group.e2e.ts",
            "modus-button-group.models.tsx",
            "modus-button-group.scss",
            "modus-button-group.spec.ts",
            "modus-button-group.tsx",
            "readme.md"
          ],
          "components": [
            "modus-button-group.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-card": {
          "files": [
            "modus-card.e2e.ts",
            "modus-card.scss",
            "modus-card.spec.ts",
            "modus-card.tsx",
            "modus-card.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-card.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-checkbox": {
          "files": [
            "modus-checkbox.e2e.ts",
            "modus-checkbox.scss",
            "modus-checkbox.spec.tsx",
            "modus-checkbox.tsx",
            "modus-checkbox.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-checkbox.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-chip": {
          "files": [
            "modus-chip.e2e.ts",
            "modus-chip.scss",
            "modus-chip.spec.ts",
            "modus-chip.tsx",
            "modus-chip.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-chip.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-content-tree": {
          "files": [
            "modus-content-tree-drag-item.tsx",
            "modus-content-tree.constants.tsx",
            "modus-content-tree.e2e.ts",
            "modus-content-tree.spec.tsx",
            "modus-content-tree.types.tsx",
            "modus-tree-view-item.vars.scss",
            "types.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-content-tree\\modus-tree-view": {
          "files": [
            "modus-tree-view.scss",
            "modus-tree-view.tsx",
            "readme.md"
          ],
          "components": [
            "modus-tree-view.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-content-tree\\modus-tree-view-item": {
          "files": [
            "modus-tree-view-item.scss",
            "modus-tree-view-item.tsx",
            "readme.md"
          ],
          "components": [
            "modus-tree-view-item.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-data-table": {
          "files": [
            "modus-data-table.e2e.ts",
            "modus-data-table.models.ts",
            "modus-data-table.scss",
            "modus-data-table.spec.ts",
            "modus-data-table.tsx",
            "modus-data-table.utilities.ts",
            "modus-data-table.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-data-table.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-data-table\\parts": {
          "files": [
            "modus-data-table-cell-badge-part.tsx",
            "modus-data-table-cell-link-part.tsx",
            "modus-data-table-header.tsx",
            "modus-data-table-row-action-dropdown.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-date-input": {
          "files": [
            "modus-date-input.e2e.ts",
            "modus-date-input.scss",
            "modus-date-input.spec.tsx",
            "modus-date-input.tsx",
            "modus-date-input.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-date-input.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-date-input\\utils": {
          "files": [
            "modus-date-input.formatter.tsx",
            "modus-date-input.models.tsx",
            "modus-date-input.tokens.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-date-picker": {
          "files": [
            "modus-date-picker.e2e.ts",
            "modus-date-picker.scss",
            "modus-date-picker.spec.tsx",
            "modus-date-picker.tsx",
            "modus-date-picker.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-date-picker.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-date-picker\\utils": {
          "files": [
            "modus-date-picker.calendar.tsx",
            "modus-date-picker.state.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-dropdown": {
          "files": [
            "modus-dropdown.e2e.ts",
            "modus-dropdown.scss",
            "modus-dropdown.spec.ts",
            "modus-dropdown.tsx",
            "modus-dropdown.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-dropdown.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-file-dropzone": {
          "files": [
            "modus-file-dropzone.e2e.ts",
            "modus-file-dropzone.scss",
            "modus-file-dropzone.spec.ts",
            "modus-file-dropzone.tsx",
            "modus-file-dropzone.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-file-dropzone.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-icons": {
          "files": [
            "modus-icons.tsx",
            "readme.md"
          ],
          "components": [
            "modus-icons.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-list": {
          "files": [
            "modus-list.scss",
            "modus-list.tsx",
            "modus-list.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-list.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-list-item": {
          "files": [
            "modus-list-item.e2e.ts",
            "modus-list-item.scss",
            "modus-list-item.spec.ts",
            "modus-list-item.tsx",
            "modus-list-item.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-list-item.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-message": {
          "files": [
            "modus-message.e2e.ts",
            "modus-message.scss",
            "modus-message.spec.ts",
            "modus-message.tsx",
            "modus-message.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-message.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-modal": {
          "files": [
            "modal-focus-wrapping.tsx",
            "modus-modal.e2e.ts",
            "modus-modal.scss",
            "modus-modal.spec.ts",
            "modus-modal.tsx",
            "modus-modal.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-modal.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-navbar": {
          "files": [
            "modus-navbar.e2e.ts",
            "modus-navbar.models.ts",
            "modus-navbar.scss",
            "modus-navbar.spec.ts",
            "modus-navbar.tsx",
            "modus-navbar.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-navbar.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-navbar\\apps-menu": {
          "files": [
            "modus-navbar-apps-menu.scss",
            "modus-navbar-apps-menu.tsx",
            "readme.md"
          ],
          "components": [
            "modus-navbar-apps-menu.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-navbar\\button-list": {
          "files": [
            "modus-navbar-button-list.tsx",
            "readme.md"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-navbar\\button-menu": {
          "files": [
            "modus-navbar-button-menu.scss",
            "modus-navbar-button-menu.tsx",
            "readme.md"
          ],
          "components": [
            "modus-navbar-button-menu.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-navbar\\dropdown": {
          "files": [
            "modus-navbar-dropdown.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-navbar\\main-menu": {
          "files": [
            "modus-navbar-main-menu.e2e.ts",
            "modus-navbar-main-menu.models.ts",
            "modus-navbar-main-menu.scss",
            "modus-navbar-main-menu.spec.ts",
            "modus-navbar-main-menu.tsx",
            "readme.md"
          ],
          "components": [
            "modus-navbar-main-menu.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-navbar\\notifications-menu": {
          "files": [
            "modus-navbar-notifications-menu.scss",
            "modus-navbar-notifications-menu.tsx",
            "readme.md"
          ],
          "components": [
            "modus-navbar-notifications-menu.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-navbar\\product-logo": {
          "files": [
            "modus-navbar-product-logo.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-navbar\\profile-menu": {
          "files": [
            "modus-navbar-profile-menu.scss",
            "modus-navbar-profile-menu.spec.ts",
            "modus-navbar-profile-menu.tsx",
            "readme.md"
          ],
          "components": [
            "modus-navbar-profile-menu.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-navbar\\search-overlay": {
          "files": [
            "modus-navbar-search-overlay.scss",
            "modus-navbar-search-overlay.tsx",
            "readme.md"
          ],
          "components": [
            "modus-navbar-search-overlay.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-number-input": {
          "files": [
            "modus-number-input.e2e.ts",
            "modus-number-input.scss",
            "modus-number-input.spec.tsx",
            "modus-number-input.tsx",
            "modus-number-input.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-number-input.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-pagination": {
          "files": [
            "modus-pagination.e2e.ts",
            "modus-pagination.scss",
            "modus-pagination.spec.ts",
            "modus-pagination.tsx",
            "modus-pagination.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-pagination.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-pagination\\enums": {
          "files": [
            "pagination-direction.enum.ts"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-progress-bar": {
          "files": [
            "modus-progress-bar.e2e.ts",
            "modus-progress-bar.scss",
            "modus-progress-bar.spec.ts",
            "modus-progress-bar.tsx",
            "modus-progress-bar.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-progress-bar.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-radio-group": {
          "files": [
            "modus-radio-button.tsx",
            "modus-radio-button.vars.scss",
            "modus-radio-group.e2e.ts",
            "modus-radio-group.scss",
            "modus-radio-group.spec.ts",
            "modus-radio-group.tsx",
            "readme.md"
          ],
          "components": [
            "modus-radio-group.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-select": {
          "files": [
            "modus-select.e2e.ts",
            "modus-select.scss",
            "modus-select.spec.ts",
            "modus-select.tsx",
            "modus-select.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-select.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-sentiment-scale": {
          "files": [
            "modus-sentiment-scale.constants.ts",
            "modus-sentiment-scale.e2e.ts",
            "modus-sentiment-scale.models.tsx",
            "modus-sentiment-scale.scss",
            "modus-sentiment-scale.spec.ts",
            "modus-sentiment-scale.tsx",
            "modus-sentiment-scale.vars.scss",
            "readme.md",
            "SentimentIconMap.tsx"
          ],
          "components": [
            "modus-sentiment-scale.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-side-navigation": {
          "files": [
            "modus-side-navigation-tree.tsx",
            "modus-side-navigation.e2e.ts",
            "modus-side-navigation.models.tsx",
            "modus-side-navigation.scss",
            "modus-side-navigation.spec.tsx",
            "modus-side-navigation.tsx",
            "modus-side-navigation.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-side-navigation.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-side-navigation\\modus-side-navigation-item": {
          "files": [
            "modus-side-navigation-item.scss",
            "modus-side-navigation-item.tsx",
            "modus-side-navigation-item.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-side-navigation-item.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-slider": {
          "files": [
            "modus-slider.e2e.ts",
            "modus-slider.scss",
            "modus-slider.spec.ts",
            "modus-slider.tsx",
            "modus-slider.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-slider.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-spinner": {
          "files": [
            "modus-spinner.e2e.ts",
            "modus-spinner.scss",
            "modus-spinner.spec.ts",
            "modus-spinner.tsx",
            "readme.md"
          ],
          "components": [
            "modus-spinner.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-switch": {
          "files": [
            "modus-switch.e2e.ts",
            "modus-switch.scss",
            "modus-switch.spec.tsx",
            "modus-switch.tsx",
            "modus-switch.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-switch.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table": {
          "files": [
            "modus-table.constants.ts",
            "modus-table.core.tsx",
            "modus-table.e2e.ts",
            "modus-table.scss",
            "modus-table.spec.tsx",
            "modus-table.tsx",
            "modus-table.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-table.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table\\functions": {
          "files": [
            "sortingFunction.tsx",
            "sortingFunctions.spec.ts"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-table\\models": {
          "files": [
            "column-drag-state.model.ts",
            "modus-table.models.ts",
            "position.model.ts",
            "table-context.models.ts",
            "table-row-actions.models.ts",
            "table-state.model.ts"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-table\\parts": {
          "files": [
            "modus-table-body.tsx",
            "modus-table-footer.tsx",
            "modus-table-header.tsx",
            "modus-table-pagination.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\cell": {
          "files": [
            "flex-renderer.e2e.ts",
            "flex-renderer.tsx",
            "modus-table-cell-badge-element.tsx",
            "modus-table-cell-expand-icons.tsx",
            "modus-table-cell-link-element.tsx",
            "modus-table-cell.tsx",
            "modus-table-custom-cell-element.tsx",
            "readme.md"
          ],
          "components": [
            "flex-renderer.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\cell\\modus-table-cell-editor": {
          "files": [
            "modus-table-cell-editor.scss",
            "modus-table-cell-editor.tsx",
            "readme.md"
          ],
          "components": [
            "modus-table-cell-editor.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\cell\\modus-table-cell-main": {
          "files": [
            "modus-table-cell-main.tsx",
            "readme.md"
          ],
          "components": [
            "modus-table-cell-main.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\columnHeader": {
          "files": [
            "modus-table-column-drag-item.tsx",
            "modus-table-column-header-label.tsx",
            "modus-table-column-header.tsx",
            "modus-table-column-resizing-handler.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\fillerColumn": {
          "files": [
            "modus-table-filler-column.scss",
            "modus-table-filler-column.tsx",
            "readme.md"
          ],
          "components": [
            "modus-table-filler-column.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\panel": {
          "files": [],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\panel\\modus-table-columns-visibility": {
          "files": [
            "modus-table-columns-visibility.scss",
            "modus-table-columns-visibility.tsx",
            "readme.md"
          ],
          "components": [
            "modus-table-columns-visibility.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\panel\\modus-table-dropdown-menu": {
          "files": [
            "modus-table-dropdown-menu.scss",
            "modus-table-dropdown-menu.tsx",
            "readme.md"
          ],
          "components": [
            "modus-table-dropdown-menu.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\panel\\modus-table-toolbar": {
          "files": [
            "modus-table-toolbar.scss",
            "modus-table-toolbar.tsx",
            "readme.md"
          ],
          "components": [
            "modus-table-toolbar.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\row": {
          "files": [],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\row\\actions": {
          "files": [
            "modus-table-row-actions-cell.tsx",
            "readme.md"
          ],
          "components": [
            "modus-table-row-actions-cell.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\row\\actions\\modus-table-row-actions": {
          "files": [
            "modus-table-row-actions.scss",
            "modus-table-row-actions.tsx",
            "readme.md"
          ],
          "components": [
            "modus-table-row-actions.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\row\\actions\\modus-table-row-actions-menu": {
          "files": [
            "modus-table-row-actions-menu.scss",
            "modus-table-row-actions-menu.tsx",
            "readme.md"
          ],
          "components": [
            "modus-table-row-actions-menu.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-table\\parts\\row\\selection": {
          "files": [
            "modus-table-cell-checkbox.tsx",
            "modus-table-header-checkbox.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-table\\utilities": {
          "files": [
            "table-cell-formatter.utility.tsx",
            "table-cell-navigation.utility.tsx",
            "table-header-drag-drop.utility.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\components\\modus-tabs": {
          "files": [
            "modus-tabs.e2e.ts",
            "modus-tabs.scss",
            "modus-tabs.spec.ts",
            "modus-tabs.tsx",
            "modus-tabs.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-tabs.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-text-input": {
          "files": [
            "modus-text-input.e2e.ts",
            "modus-text-input.scss",
            "modus-text-input.spec.tsx",
            "modus-text-input.tsx",
            "modus-text-input.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-text-input.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-textarea-input": {
          "files": [
            "modus-textarea-input.e2e.ts",
            "modus-textarea-input.scss",
            "modus-textarea-input.spec.tsx",
            "modus-textarea-input.tsx",
            "modus-textarea-input.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-textarea-input.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-time-picker": {
          "files": [
            "modus-time-picker.e2e.ts",
            "modus-time-picker.formatter.tsx",
            "modus-time-picker.models.tsx",
            "modus-time-picker.scss",
            "modus-time-picker.spec.tsx",
            "modus-time-picker.tsx",
            "modus-time-picker.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-time-picker.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-toast": {
          "files": [
            "modus-toast.e2e.ts",
            "modus-toast.scss",
            "modus-toast.spec.ts",
            "modus-toast.tsx",
            "modus-toast.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-toast.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-toolbar": {
          "files": [
            "modus-divider.scss",
            "modus-divider.tsx",
            "modus-toolbar.e2e.ts",
            "modus-toolbar.scss",
            "modus-toolbar.spec.ts",
            "modus-toolbar.tsx",
            "modus-toolbar.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-divider.tsx",
            "modus-toolbar.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-tooltip": {
          "files": [
            "modus-tooltip.e2e.ts",
            "modus-tooltip.models.ts",
            "modus-tooltip.scss",
            "modus-tooltip.spec.ts",
            "modus-tooltip.tsx",
            "modus-tooltip.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-tooltip.tsx"
          ]
        },
        "stencil-workspace\\src\\components\\modus-utility-panel": {
          "files": [
            "modus-utility-panel.e2e.ts",
            "modus-utility-panel.scss",
            "modus-utility-panel.spec.ts",
            "modus-utility-panel.tsx",
            "modus-utility-panel.vars.scss",
            "readme.md"
          ],
          "components": [
            "modus-utility-panel.tsx"
          ]
        },
        "stencil-workspace\\src\\global": {
          "files": [
            "modus-colors.scss",
            "modus-functions.scss",
            "modus-light-theme.scss",
            "modus-variables.scss",
            "shared-mixins.scss",
            "themes.scss"
          ],
          "components": []
        },
        "stencil-workspace\\src\\icons": {
          "files": [
            "icon.spec.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\icons\\generated-icons": {
          "files": [
            "ABOUT_FOLDER.md"
          ],
          "components": []
        },
        "stencil-workspace\\src\\icons\\svgs": {
          "files": [
            "icon-accessibility-circle.tsx",
            "icon-add.tsx",
            "icon-apps.tsx",
            "icon-arrow-down.tsx",
            "icon-arrow-up.tsx",
            "icon-calendar.tsx",
            "icon-cancel.tsx",
            "icon-caret-down.tsx",
            "icon-caret-up.tsx",
            "icon-check-circle.tsx",
            "icon-check.tsx",
            "icon-chevron-double-down.tsx",
            "icon-chevron-double-up.tsx",
            "icon-chevron-down-thick.tsx",
            "icon-chevron-left-thick.tsx",
            "icon-chevron-right-thick.tsx",
            "icon-chevron-up-thick.tsx",
            "icon-close.tsx",
            "icon-delete.tsx",
            "icon-download-line.tsx",
            "icon-error.tsx",
            "icon-export.tsx",
            "icon-file-bar-graph.tsx",
            "icon-help.tsx",
            "icon-history.tsx",
            "icon-horizontal-ellipsis.tsx",
            "icon-indeterminate.tsx",
            "icon-info.tsx",
            "icon-menu.tsx",
            "icon-moon.tsx",
            "icon-notifications.tsx",
            "icon-pencil.tsx",
            "icon-pin.tsx",
            "icon-refresh.tsx",
            "icon-remove.tsx",
            "icon-search.tsx",
            "icon-shield.tsx",
            "icon-smiley-dissatisfied-outline.tsx",
            "icon-smiley-dissatisfied.tsx",
            "icon-smiley-neutral-outline.tsx",
            "icon-smiley-neutral.tsx",
            "icon-smiley-satisfied-outline.tsx",
            "icon-smiley-satisfied.tsx",
            "icon-smiley-somewhat-dissatisfied-outline.tsx",
            "icon-smiley-somewhat-dissatisfied.tsx",
            "icon-smiley-somewhat-satisfied-outline.tsx",
            "icon-smiley-somewhat-satisfied.tsx",
            "icon-sort-a-z.tsx",
            "icon-sort-z-a.tsx",
            "icon-sun.tsx",
            "icon-thumbs-down-outlined.tsx",
            "icon-thumbs-down.tsx",
            "icon-thumbs-up-outline.tsx",
            "icon-thumbs-up.tsx",
            "icon-timer-countdown.tsx",
            "icon-triangle-down.tsx",
            "icon-triangle-left.tsx",
            "icon-tune.tsx",
            "icon-upload-cloud.tsx",
            "icon-visibility-off.tsx",
            "icon-visibility.tsx",
            "icon-warning.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\src\\lang": {
          "files": [
            "translations.ts"
          ],
          "components": []
        },
        "stencil-workspace\\src\\utils": {
          "files": [
            "utils.spec.ts",
            "utils.ts"
          ],
          "components": []
        },
        "stencil-workspace\\storybook": {
          "files": [
            ".npmrc",
            "package-lock.json",
            "package.json",
            "postcss.config.js"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\.storybook": {
          "files": [
            "main.js",
            "manager-head.html",
            "manager.js",
            "preview-body.html",
            "preview-head.html",
            "preview.js",
            "your-theme.js"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\public": {
          "files": [
            "023-student.svg",
            "045-student.svg",
            "favicon.ico",
            "favicon.svg",
            "github.svg",
            "preview.png",
            "robots.txt",
            "staticwebapp.config.json",
            "storybook-styles.css",
            "trimble-logo.svg"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\public\\404": {
          "files": [
            "index.html"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories": {
          "files": [],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components": {
          "files": [],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-accordion": {
          "files": [
            "modus-accordion-storybook-docs.mdx",
            "modus-accordion.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-alert": {
          "files": [
            "modus-alert-storybook-docs.mdx",
            "modus-alert.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-autocomplete": {
          "files": [
            "modus-autocomplete-storybook-docs.mdx",
            "modus-autocomplete.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-badge": {
          "files": [
            "modus-badge-storybook-docs.mdx",
            "modus-badge.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-breadcrumb": {
          "files": [
            "modus-breadcrumb-storybook-docs.mdx",
            "modus-breadcrumb.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-button": {
          "files": [
            "modus-button-storybook-docs.mdx",
            "modus-button.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-button-group": {
          "files": [
            "modus-button-group-storybook-docs.mdx",
            "modus-button-group.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-card": {
          "files": [
            "modus-card-storybook-docs.mdx",
            "modus-card.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-checkbox": {
          "files": [
            "modus-checkbox-storybook-docs.mdx",
            "modus-checkbox.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-chip": {
          "files": [
            "modus-chip-storybook-docs.mdx",
            "modus-chip.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-content-tree": {
          "files": [
            "modus-content-tree-storybook-docs.mdx",
            "modus-content-tree.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-data-table": {
          "files": [
            "modus-data-table-storybook-docs.mdx",
            "modus-data-table.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-date-picker": {
          "files": [
            "modus-date-picker-storybook-docs.mdx",
            "modus-date-picker.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-dropdown": {
          "files": [
            "modus-dropdown-storybook-docs.mdx",
            "modus-dropdown.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-file-dropzone": {
          "files": [
            "modus-file-dropzone-storybook-docs.mdx",
            "modus-file-dropzone.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-icons": {
          "files": [
            "modus-icons-storybook-docs.mdx",
            "modus-icons.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-list": {
          "files": [
            "modus-list-storybook-docs.mdx",
            "modus-list.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-message": {
          "files": [
            "modus-message-storybook-docs.mdx",
            "modus-message.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-modal": {
          "files": [
            "modus-modal-storybook-docs.mdx",
            "modus-modal.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-navbar": {
          "files": [
            "modus-navbar-storybook-docs.mdx",
            "modus-navbar.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-number-input": {
          "files": [
            "modus-number-input-storybook-docs.mdx",
            "modus-number-input.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-pagination": {
          "files": [
            "modus-pagination-storybook-docs.mdx",
            "modus-pagination.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-progress-bar": {
          "files": [
            "modus-progress-bar-storybook-docs.mdx",
            "modus-progress-bar.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-radio-group": {
          "files": [
            "modus-radio-group-storybook-docs.mdx",
            "modus-radio-group.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-select": {
          "files": [
            "modus-select-storybook-docs.mdx",
            "modus-select.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-sentiment-scale": {
          "files": [
            "modus-sentiment-scale-storybook-docs.mdx",
            "modus-sentiment-scale.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-side-navigation": {
          "files": [
            "modus-side-navigation-storybook-docs.mdx",
            "modus-side-navigation.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-slider": {
          "files": [
            "modus-slider-storybook-docs.mdx",
            "modus-slider.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-spinner": {
          "files": [
            "modus-spinner-storybook-docs.mdx",
            "modus-spinner.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-switch": {
          "files": [
            "modus-switch-storybook-docs.mdx",
            "modus-switch.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-table": {
          "files": [
            "modus-table-storybook-docs.mdx",
            "modus-table.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-tabs": {
          "files": [
            "modus-tabs-storybook-docs.mdx",
            "modus-tabs.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-text-input": {
          "files": [
            "modus-text-input-storybook-docs.mdx",
            "modus-text-input.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-textarea-input": {
          "files": [
            "modus-textarea-input-storybook-docs.mdx",
            "modus-textarea-input.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-time-picker": {
          "files": [
            "modus-time-picker-storybook-docs.mdx",
            "modus-time-picker.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-toast": {
          "files": [
            "modus-toast-storybook-docs.mdx",
            "modus-toast.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-toolbar": {
          "files": [
            "modus-toolbar-storybook-docs.mdx",
            "modus-toolbar.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-tooltip": {
          "files": [
            "modus-tooltip-storybook-docs.mdx",
            "modus-tooltip.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\components\\modus-utility-panel": {
          "files": [
            "modus-utility-panel-storybook-docs.mdx",
            "modus-utility-panel.stories.tsx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\framework-integrations": {
          "files": [
            "angular.mdx",
            "react.mdx"
          ],
          "components": []
        },
        "stencil-workspace\\storybook\\stories\\introduction": {
          "files": [
            "accessibility.mdx",
            "contributing.mdx",
            "getting-started.mdx",
            "welcome.mdx"
          ],
          "components": []
        }
      }
    },
    "v2": {
      "root": "\\tmp\\modus-wc-2.0.git",
      "structure": {
        ".": {
          "files": [
            ".cspell.json",
            ".editorconfig",
            ".gitignore",
            ".prettierignore",
            ".stylelintignore",
            ".stylelintrc.json",
            ".whitesource",
            "angular-value-accessor-bindings.ts",
            "CONTRIBUTING.md",
            "eslint.config.js",
            "package-lock.json",
            "package.json",
            "prettier.config.js",
            "README.md",
            "RELEASING.md",
            "stencil.config.ts",
            "tailwind.config.ts",
            "tsconfig.json"
          ],
          "components": []
        },
        ".git": {
          "files": [
            "config",
            "description",
            "FETCH_HEAD",
            "HEAD",
            "index",
            "ORIG_HEAD",
            "packed-refs"
          ],
          "components": []
        },
        ".git\\hooks": {
          "files": [
            "applypatch-msg.sample",
            "commit-msg.sample",
            "fsmonitor-watchman.sample",
            "post-update.sample",
            "pre-applypatch.sample",
            "pre-commit.sample",
            "pre-merge-commit.sample",
            "pre-push.sample",
            "pre-rebase.sample",
            "pre-receive.sample",
            "prepare-commit-msg.sample",
            "push-to-checkout.sample",
            "sendemail-validate.sample",
            "update.sample"
          ],
          "components": []
        },
        ".git\\info": {
          "files": [
            "exclude"
          ],
          "components": []
        },
        ".git\\logs": {
          "files": [
            "HEAD"
          ],
          "components": []
        },
        ".git\\logs\\refs": {
          "files": [],
          "components": []
        },
        ".git\\logs\\refs\\heads": {
          "files": [
            "main"
          ],
          "components": []
        },
        ".git\\logs\\refs\\remotes": {
          "files": [],
          "components": []
        },
        ".git\\logs\\refs\\remotes\\origin": {
          "files": [
            "HEAD"
          ],
          "components": []
        },
        ".git\\objects": {
          "files": [],
          "components": []
        },
        ".git\\objects\\info": {
          "files": [],
          "components": []
        },
        ".git\\objects\\pack": {
          "files": [
            "pack-a3869dde9eb49943fb202616a1512d8ce251fdc3.idx",
            "pack-a3869dde9eb49943fb202616a1512d8ce251fdc3.pack",
            "pack-a3869dde9eb49943fb202616a1512d8ce251fdc3.rev"
          ],
          "components": []
        },
        ".git\\refs": {
          "files": [],
          "components": []
        },
        ".git\\refs\\heads": {
          "files": [
            "main"
          ],
          "components": []
        },
        ".git\\refs\\remotes": {
          "files": [],
          "components": []
        },
        ".git\\refs\\remotes\\origin": {
          "files": [
            "HEAD"
          ],
          "components": []
        },
        ".git\\refs\\tags": {
          "files": [],
          "components": []
        },
        ".github": {
          "files": [
            "CODEOWNERS",
            "fixup-cem-json.cjs",
            "pull_request_template.md"
          ],
          "components": []
        },
        ".github\\workflows": {
          "files": [
            "a11y-check.yml",
            "build-angular.yml",
            "build-react.yml",
            "merge-gate.yml",
            "preview-cleanup.yml",
            "preview-storybook.yml",
            "publish-angular.yml",
            "publish-react.yml",
            "publish.yml"
          ],
          "components": []
        },
        ".storybook": {
          "files": [
            "a11yConfig.js",
            "main.ts",
            "manager-head.html",
            "manager.ts",
            "preview-head.html",
            "preview.ts",
            "theme.ts"
          ],
          "components": []
        },
        ".storybook\\public": {
          "files": [
            "favicon.ico",
            "favicon.svg",
            "robots.txt",
            "trimble-logo.svg"
          ],
          "components": []
        },
        ".vscode": {
          "files": [
            "extensions.json",
            "settings.json"
          ],
          "components": []
        },
        "docs": {
          "files": [
            "adding-angular-integrations.md",
            "build-scripts.md",
            "considerations.md",
            "custom-themes.md",
            "project-design.md",
            "responsive-design.md"
          ],
          "components": []
        },
        "integrations": {
          "files": [],
          "components": []
        },
        "integrations\\angular": {
          "files": [],
          "components": []
        },
        "integrations\\angular\\ng17": {
          "files": [
            ".npmrc",
            "angular.json",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "integrations\\angular\\ng17\\projects": {
          "files": [],
          "components": []
        },
        "integrations\\angular\\ng17\\projects\\trimble-cms": {
          "files": [],
          "components": []
        },
        "integrations\\angular\\ng17\\projects\\trimble-cms\\modus-wc-angular": {
          "files": [
            "ng-package.json",
            "package.json",
            "README.md",
            "tsconfig.lib.json",
            "tsconfig.lib.prod.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "integrations\\angular\\ng17\\projects\\trimble-cms\\modus-wc-angular\\src": {
          "files": [
            "public-api.ts"
          ],
          "components": []
        },
        "integrations\\angular\\ng17\\projects\\trimble-cms\\modus-wc-angular\\src\\lib": {
          "files": [
            "modus-wc-angular.module.ts"
          ],
          "components": []
        },
        "integrations\\angular\\ng18": {
          "files": [
            ".npmrc",
            "angular.json",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "integrations\\angular\\ng18\\projects": {
          "files": [],
          "components": []
        },
        "integrations\\angular\\ng18\\projects\\trimble-cms": {
          "files": [],
          "components": []
        },
        "integrations\\angular\\ng18\\projects\\trimble-cms\\modus-wc-angular": {
          "files": [
            ".npmrc",
            "ng-package.json",
            "package.json",
            "README.md",
            "tsconfig.lib.json",
            "tsconfig.lib.prod.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "integrations\\angular\\ng18\\projects\\trimble-cms\\modus-wc-angular\\src": {
          "files": [
            "public-api.ts"
          ],
          "components": []
        },
        "integrations\\angular\\ng18\\projects\\trimble-cms\\modus-wc-angular\\src\\lib": {
          "files": [
            "modus-wc-angular.module.ts"
          ],
          "components": []
        },
        "integrations\\react": {
          "files": [],
          "components": []
        },
        "integrations\\react\\test-react-v17": {
          "files": [
            ".gitignore",
            "eslint.config.js",
            "index.html",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.app.json",
            "tsconfig.json",
            "tsconfig.node.json",
            "vite.config.ts"
          ],
          "components": []
        },
        "integrations\\react\\test-react-v17\\src": {
          "files": [
            "App.css",
            "App.tsx",
            "index.css",
            "main.tsx",
            "vite-env.d.ts"
          ],
          "components": []
        },
        "integrations\\react\\test-react-v17\\src\\examples": {
          "files": [
            "index.tsx",
            "ModusBadgeExamples.tsx",
            "ModusIconExamples.tsx"
          ],
          "components": []
        },
        "integrations\\react\\test-react-v18": {
          "files": [
            ".gitignore",
            "eslint.config.js",
            "index.html",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.app.json",
            "tsconfig.json",
            "tsconfig.node.json",
            "vite.config.ts"
          ],
          "components": []
        },
        "integrations\\react\\test-react-v18\\src": {
          "files": [
            "App.css",
            "App.tsx",
            "index.css",
            "main.tsx",
            "vite-env.d.ts"
          ],
          "components": []
        },
        "integrations\\react\\test-react-v18\\src\\examples": {
          "files": [
            "index.tsx",
            "ModusBadgeExamples.tsx",
            "ModusIconExamples.tsx",
            "ModusTabsExamples.tsx"
          ],
          "components": []
        },
        "integrations\\react\\v17": {
          "files": [
            ".npmrc",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "integrations\\react\\v17\\src": {
          "files": [
            "index.ts"
          ],
          "components": []
        },
        "integrations\\react\\v18": {
          "files": [
            ".npmrc",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.json"
          ],
          "components": []
        },
        "integrations\\react\\v18\\src": {
          "files": [
            "index.ts"
          ],
          "components": []
        },
        "src": {
          "files": [
            "components.d.ts",
            "custom-elements.json"
          ],
          "components": []
        },
        "src\\components": {
          "files": [
            "constants.ts",
            "types.ts",
            "utils.ts"
          ],
          "components": []
        },
        "src\\components\\modus-wc-accordion": {
          "files": [
            "modus-wc-accordion.scss",
            "modus-wc-accordion.spec.ts",
            "modus-wc-accordion.stories.ts",
            "modus-wc-accordion.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-accordion.tsx"
          ]
        },
        "src\\components\\modus-wc-accordion\\__snapshots__": {
          "files": [
            "modus-wc-accordion.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-alert": {
          "files": [
            "modus-wc-alert.scss",
            "modus-wc-alert.spec.ts",
            "modus-wc-alert.stories.ts",
            "modus-wc-alert.tailwind.ts",
            "modus-wc-alert.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-alert.tsx"
          ]
        },
        "src\\components\\modus-wc-alert\\__snapshots__": {
          "files": [
            "modus-wc-alert.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-autocomplete": {
          "files": [
            "modus-wc-autocomplete.scss",
            "modus-wc-autocomplete.spec.ts",
            "modus-wc-autocomplete.stories.ts",
            "modus-wc-autocomplete.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-autocomplete.tsx"
          ]
        },
        "src\\components\\modus-wc-autocomplete\\__snapshots__": {
          "files": [
            "modus-wc-autocomplete.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-avatar": {
          "files": [
            "modus-wc-avatar.scss",
            "modus-wc-avatar.spec.ts",
            "modus-wc-avatar.stories.ts",
            "modus-wc-avatar.tailwind.ts",
            "modus-wc-avatar.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-avatar.tsx"
          ]
        },
        "src\\components\\modus-wc-avatar\\__snapshots__": {
          "files": [
            "modus-wc-avatar.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-badge": {
          "files": [
            "modus-wc-badge.scss",
            "modus-wc-badge.spec.ts",
            "modus-wc-badge.stories.ts",
            "modus-wc-badge.tailwind.ts",
            "modus-wc-badge.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-badge.tsx"
          ]
        },
        "src\\components\\modus-wc-badge\\__snapshots__": {
          "files": [
            "modus-wc-badge.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-breadcrumbs": {
          "files": [
            "modus-wc-breadcrumbs.scss",
            "modus-wc-breadcrumbs.spec.ts",
            "modus-wc-breadcrumbs.stories.ts",
            "modus-wc-breadcrumbs.tailwind.ts",
            "modus-wc-breadcrumbs.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-breadcrumbs.tsx"
          ]
        },
        "src\\components\\modus-wc-breadcrumbs\\__snapshots__": {
          "files": [
            "modus-wc-breadcrumbs.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-button": {
          "files": [
            "modus-wc-button.scss",
            "modus-wc-button.spec.ts",
            "modus-wc-button.stories.ts",
            "modus-wc-button.tailwind.ts",
            "modus-wc-button.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-button.tsx"
          ]
        },
        "src\\components\\modus-wc-button\\__snapshots__": {
          "files": [
            "modus-wc-button.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-card": {
          "files": [
            "modus-wc-card.scss",
            "modus-wc-card.spec.ts",
            "modus-wc-card.stories.ts",
            "modus-wc-card.tailwind.ts",
            "modus-wc-card.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-card.tsx"
          ]
        },
        "src\\components\\modus-wc-card\\__snapshots__": {
          "files": [
            "modus-wc-card.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-checkbox": {
          "files": [
            "modus-wc-checkbox.scss",
            "modus-wc-checkbox.spec.ts",
            "modus-wc-checkbox.stories.ts",
            "modus-wc-checkbox.tailwind.ts",
            "modus-wc-checkbox.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-checkbox.tsx"
          ]
        },
        "src\\components\\modus-wc-checkbox\\__snapshots__": {
          "files": [
            "modus-wc-checkbox.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-chip": {
          "files": [
            "modus-wc-chip.icons.tsx",
            "modus-wc-chip.scss",
            "modus-wc-chip.spec.ts",
            "modus-wc-chip.stories.ts",
            "modus-wc-chip.tailwind.ts",
            "modus-wc-chip.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-chip.tsx"
          ]
        },
        "src\\components\\modus-wc-chip\\__snapshots__": {
          "files": [
            "modus-wc-chip.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-collapse": {
          "files": [
            "modus-wc-collapse.scss",
            "modus-wc-collapse.spec.ts",
            "modus-wc-collapse.stories.ts",
            "modus-wc-collapse.tailwind.ts",
            "modus-wc-collapse.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-collapse.tsx"
          ]
        },
        "src\\components\\modus-wc-collapse\\__snapshots__": {
          "files": [
            "modus-wc-collapse.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-date": {
          "files": [
            "modus-wc-date.scss",
            "modus-wc-date.spec.ts",
            "modus-wc-date.stories.ts",
            "modus-wc-date.tailwind.ts",
            "modus-wc-date.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-date.tsx"
          ]
        },
        "src\\components\\modus-wc-date\\__snapshots__": {
          "files": [
            "modus-wc-date.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-divider": {
          "files": [
            "modus-wc-divider.scss",
            "modus-wc-divider.spec.ts",
            "modus-wc-divider.stories.ts",
            "modus-wc-divider.tailwind.ts",
            "modus-wc-divider.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-divider.tsx"
          ]
        },
        "src\\components\\modus-wc-divider\\__snapshots__": {
          "files": [
            "modus-wc-divider.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-icon": {
          "files": [
            "modus-wc-icon.scss",
            "modus-wc-icon.spec.ts",
            "modus-wc-icon.stories.ts",
            "modus-wc-icon.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-icon.tsx"
          ]
        },
        "src\\components\\modus-wc-icon\\__snapshots__": {
          "files": [
            "modus-wc-icon.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-input-label": {
          "files": [
            "modus-wc-input-label.scss",
            "modus-wc-input-label.spec.ts",
            "modus-wc-input-label.stories.ts",
            "modus-wc-input-label.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-input-label.tsx"
          ]
        },
        "src\\components\\modus-wc-input-label\\__snapshots__": {
          "files": [
            "modus-wc-input-label.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-loader": {
          "files": [
            "modus-wc-loader.scss",
            "modus-wc-loader.spec.ts",
            "modus-wc-loader.stories.ts",
            "modus-wc-loader.tailwind.ts",
            "modus-wc-loader.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-loader.tsx"
          ]
        },
        "src\\components\\modus-wc-loader\\__snapshots__": {
          "files": [
            "modus-wc-loader.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-menu": {
          "files": [
            "modus-wc-menu.scss",
            "modus-wc-menu.spec.ts",
            "modus-wc-menu.stories.ts",
            "modus-wc-menu.tailwind.ts",
            "modus-wc-menu.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-menu.tsx"
          ]
        },
        "src\\components\\modus-wc-menu\\__snapshots__": {
          "files": [
            "modus-wc-menu.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-menu-item": {
          "files": [
            "modus-wc-menu-item.scss",
            "modus-wc-menu-item.spec.ts",
            "modus-wc-menu-item.stories.ts",
            "modus-wc-menu-item.tailwind.ts",
            "modus-wc-menu-item.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-menu-item.tsx"
          ]
        },
        "src\\components\\modus-wc-menu-item\\__snapshots__": {
          "files": [
            "modus-wc-menu-item.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-modal": {
          "files": [
            "modus-wc-modal.icons.tsx",
            "modus-wc-modal.scss",
            "modus-wc-modal.spec.ts",
            "modus-wc-modal.stories.ts",
            "modus-wc-modal.tailwind.ts",
            "modus-wc-modal.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-modal.tsx"
          ]
        },
        "src\\components\\modus-wc-modal\\__snapshots__": {
          "files": [
            "modus-wc-modal.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-number-input": {
          "files": [
            "modus-wc-number-input.scss",
            "modus-wc-number-input.spec.ts",
            "modus-wc-number-input.stories.ts",
            "modus-wc-number-input.tailwind.ts",
            "modus-wc-number-input.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-number-input.tsx"
          ]
        },
        "src\\components\\modus-wc-number-input\\__snapshots__": {
          "files": [
            "modus-wc-number-input.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-pagination": {
          "files": [
            "modus-wc-pagination.icons.tsx",
            "modus-wc-pagination.scss",
            "modus-wc-pagination.spec.ts",
            "modus-wc-pagination.stories.ts",
            "modus-wc-pagination.tailwind.ts",
            "modus-wc-pagination.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-pagination.tsx"
          ]
        },
        "src\\components\\modus-wc-pagination\\__snapshots__": {
          "files": [
            "modus-wc-pagination.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-progress": {
          "files": [
            "modus-wc-progress.scss",
            "modus-wc-progress.spec.ts",
            "modus-wc-progress.stories.ts",
            "modus-wc-progress.tailwind.ts",
            "modus-wc-progress.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-progress.tsx"
          ]
        },
        "src\\components\\modus-wc-progress\\__snapshots__": {
          "files": [
            "modus-wc-progress.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-radio": {
          "files": [
            "modus-wc-radio.scss",
            "modus-wc-radio.spec.ts",
            "modus-wc-radio.stories.ts",
            "modus-wc-radio.tailwind.ts",
            "modus-wc-radio.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-radio.tsx"
          ]
        },
        "src\\components\\modus-wc-radio\\__snapshots__": {
          "files": [
            "modus-wc-radio.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-select": {
          "files": [
            "modus-wc-select.scss",
            "modus-wc-select.spec.ts",
            "modus-wc-select.stories.ts",
            "modus-wc-select.tailwind.ts",
            "modus-wc-select.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-select.tsx"
          ]
        },
        "src\\components\\modus-wc-select\\__snapshots__": {
          "files": [
            "modus-wc-select.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-skeleton": {
          "files": [
            "modus-wc-skeleton.scss",
            "modus-wc-skeleton.spec.ts",
            "modus-wc-skeleton.stories.ts",
            "modus-wc-skeleton.tailwind.ts",
            "modus-wc-skeleton.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-skeleton.tsx"
          ]
        },
        "src\\components\\modus-wc-skeleton\\__snapshots__": {
          "files": [
            "modus-wc-skeleton.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-slider": {
          "files": [
            "modus-wc-slider.scss",
            "modus-wc-slider.spec.ts",
            "modus-wc-slider.stories.ts",
            "modus-wc-slider.tailwind.ts",
            "modus-wc-slider.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-slider.tsx"
          ]
        },
        "src\\components\\modus-wc-slider\\__snapshots__": {
          "files": [
            "modus-wc-slider.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-stepper": {
          "files": [
            "modus-wc-stepper.scss",
            "modus-wc-stepper.spec.ts",
            "modus-wc-stepper.stories.ts",
            "modus-wc-stepper.tailwind.ts",
            "modus-wc-stepper.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-stepper.tsx"
          ]
        },
        "src\\components\\modus-wc-stepper\\__snapshots__": {
          "files": [
            "modus-wc-stepper.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-table": {
          "files": [
            "modus-wc-table.scss",
            "modus-wc-table.spec.tsx",
            "modus-wc-table.stories.ts",
            "modus-wc-table.tailwind.ts",
            "modus-wc-table.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-table.tsx"
          ]
        },
        "src\\components\\modus-wc-table\\__snapshots__": {
          "files": [
            "modus-wc-table.spec.tsx.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-tabs": {
          "files": [
            "modus-wc-tabs.scss",
            "modus-wc-tabs.spec.ts",
            "modus-wc-tabs.stories.ts",
            "modus-wc-tabs.tailwind.ts",
            "modus-wc-tabs.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-tabs.tsx"
          ]
        },
        "src\\components\\modus-wc-tabs\\__snapshots__": {
          "files": [
            "modus-wc-tabs.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-text-input": {
          "files": [
            "modus-wc-text-input.scss",
            "modus-wc-text-input.spec.ts",
            "modus-wc-text-input.stories.ts",
            "modus-wc-text-input.tailwind.ts",
            "modus-wc-text-input.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-text-input.tsx"
          ]
        },
        "src\\components\\modus-wc-text-input\\__snapshots__": {
          "files": [
            "modus-wc-text-input.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-textarea": {
          "files": [
            "modus-wc-textarea.scss",
            "modus-wc-textarea.spec.ts",
            "modus-wc-textarea.stories.ts",
            "modus-wc-textarea.tailwind.ts",
            "modus-wc-textarea.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-textarea.tsx"
          ]
        },
        "src\\components\\modus-wc-textarea\\__snapshots__": {
          "files": [
            "modus-wc-textarea.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-theme-switcher": {
          "files": [
            "modus-wc-theme-switcher.scss",
            "modus-wc-theme-switcher.stories.ts",
            "modus-wc-theme-switcher.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-theme-switcher.tsx"
          ]
        },
        "src\\components\\modus-wc-time-input": {
          "files": [
            "modus-wc-time-input.scss",
            "modus-wc-time-input.spec.ts",
            "modus-wc-time-input.stories.ts",
            "modus-wc-time-input.tailwind.ts",
            "modus-wc-time-input.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-time-input.tsx"
          ]
        },
        "src\\components\\modus-wc-time-input\\__snapshots__": {
          "files": [
            "modus-wc-time-input.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-toast": {
          "files": [
            "modus-wc-toast.scss",
            "modus-wc-toast.spec.ts",
            "modus-wc-toast.stories.ts",
            "modus-wc-toast.tailwind.ts",
            "modus-wc-toast.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-toast.tsx"
          ]
        },
        "src\\components\\modus-wc-toast\\__snapshots__": {
          "files": [
            "modus-wc-toast.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-toggle": {
          "files": [
            "modus-wc-toggle.scss",
            "modus-wc-toggle.spec.ts",
            "modus-wc-toggle.stories.ts",
            "modus-wc-toggle.tailwind.ts",
            "modus-wc-toggle.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-toggle.tsx"
          ]
        },
        "src\\components\\modus-wc-toggle\\__snapshots__": {
          "files": [
            "modus-wc-toggle.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-tooltip": {
          "files": [
            "modus-wc-tooltip.scss",
            "modus-wc-tooltip.spec.ts",
            "modus-wc-tooltip.stories.ts",
            "modus-wc-tooltip.tailwind.ts",
            "modus-wc-tooltip.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-tooltip.tsx"
          ]
        },
        "src\\components\\modus-wc-tooltip\\__snapshots__": {
          "files": [
            "modus-wc-tooltip.spec.ts.snap"
          ],
          "components": []
        },
        "src\\components\\modus-wc-typography": {
          "files": [
            "modus-wc-typography.scss",
            "modus-wc-typography.spec.ts",
            "modus-wc-typography.stories.ts",
            "modus-wc-typography.tailwind.ts",
            "modus-wc-typography.tsx",
            "readme.md"
          ],
          "components": [
            "modus-wc-typography.tsx"
          ]
        },
        "src\\components\\modus-wc-typography\\__snapshots__": {
          "files": [
            "modus-wc-typography.spec.ts.snap"
          ],
          "components": []
        },
        "src\\providers": {
          "files": [],
          "components": []
        },
        "src\\providers\\theme": {
          "files": [
            "readme.md",
            "theme-provider.tsx",
            "theme.store.ts",
            "theme.types.ts"
          ],
          "components": [
            "theme-provider.tsx"
          ]
        },
        "src\\stories": {
          "files": [
            "custom-styling.mdx",
            "getting-started.mdx",
            "modus-icon-usage.mdx"
          ],
          "components": []
        },
        "src\\stories\\frameworks": {
          "files": [
            "angular.mdx",
            "react.mdx"
          ],
          "components": []
        },
        "src\\styles": {
          "files": [
            "global.scss",
            "mixins.scss",
            "output.css",
            "tailwind-themeable.ts",
            "tailwind.css",
            "variables.scss"
          ],
          "components": []
        },
        "src\\styles\\themes": {
          "files": [
            "common.ts",
            "modus-classic.ts",
            "modus-modern.ts"
          ],
          "components": []
        }
      }
    },
    "target": {
      "root": "\\tmp\\GitHub-Issues-Extraction.git",
      "structure": {
        ".": {
          "files": [
            "git_issues.py",
            "issues_with_comments.csv",
            "issues_with_comments.json",
            "new_git_issues.py"
          ],
          "components": []
        },
        ".git": {
          "files": [
            "config",
            "description",
            "FETCH_HEAD",
            "HEAD",
            "index",
            "ORIG_HEAD",
            "packed-refs"
          ],
          "components": []
        },
        ".git\\hooks": {
          "files": [
            "applypatch-msg.sample",
            "commit-msg.sample",
            "fsmonitor-watchman.sample",
            "post-update.sample",
            "pre-applypatch.sample",
            "pre-commit.sample",
            "pre-merge-commit.sample",
            "pre-push.sample",
            "pre-rebase.sample",
            "pre-receive.sample",
            "prepare-commit-msg.sample",
            "push-to-checkout.sample",
            "sendemail-validate.sample",
            "update.sample"
          ],
          "components": []
        },
        ".git\\info": {
          "files": [
            "exclude"
          ],
          "components": []
        },
        ".git\\logs": {
          "files": [
            "HEAD"
          ],
          "components": []
        },
        ".git\\logs\\refs": {
          "files": [],
          "components": []
        },
        ".git\\logs\\refs\\heads": {
          "files": [
            "main"
          ],
          "components": []
        },
        ".git\\logs\\refs\\remotes": {
          "files": [],
          "components": []
        },
        ".git\\logs\\refs\\remotes\\origin": {
          "files": [
            "HEAD"
          ],
          "components": []
        },
        ".git\\objects": {
          "files": [],
          "components": []
        },
        ".git\\objects\\info": {
          "files": [],
          "components": []
        },
        ".git\\objects\\pack": {
          "files": [
            "pack-ec0622e0818a7db59204c05d5c1f0d9ef2f6f193.idx",
            "pack-ec0622e0818a7db59204c05d5c1f0d9ef2f6f193.pack",
            "pack-ec0622e0818a7db59204c05d5c1f0d9ef2f6f193.rev"
          ],
          "components": []
        },
        ".git\\refs": {
          "files": [],
          "components": []
        },
        ".git\\refs\\heads": {
          "files": [
            "main"
          ],
          "components": []
        },
        ".git\\refs\\remotes": {
          "files": [],
          "components": []
        },
        ".git\\refs\\remotes\\origin": {
          "files": [
            "HEAD"
          ],
          "components": []
        },
        ".git\\refs\\tags": {
          "files": [],
          "components": []
        },
        ".venv": {
          "files": [
            "pyvenv.cfg"
          ],
          "components": []
        },
        ".venv\\Lib": {
          "files": [],
          "components": []
        },
        ".venv\\Lib\\site-packages": {
          "files": [],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip": {
          "files": [
            "py.typed",
            "__init__.py",
            "__main__.py",
            "__pip-runner__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal": {
          "files": [
            "build_env.py",
            "cache.py",
            "configuration.py",
            "exceptions.py",
            "main.py",
            "pyproject.py",
            "self_outdated_check.py",
            "wheel_builder.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\cli": {
          "files": [
            "autocompletion.py",
            "base_command.py",
            "cmdoptions.py",
            "command_context.py",
            "index_command.py",
            "main.py",
            "main_parser.py",
            "parser.py",
            "progress_bars.py",
            "req_command.py",
            "spinners.py",
            "status_codes.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\cli\\__pycache__": {
          "files": [
            "autocompletion.cpython-312.pyc",
            "base_command.cpython-312.pyc",
            "cmdoptions.cpython-312.pyc",
            "command_context.cpython-312.pyc",
            "index_command.cpython-312.pyc",
            "main.cpython-312.pyc",
            "main_parser.cpython-312.pyc",
            "parser.cpython-312.pyc",
            "progress_bars.cpython-312.pyc",
            "req_command.cpython-312.pyc",
            "spinners.cpython-312.pyc",
            "status_codes.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands": {
          "files": [
            "cache.py",
            "check.py",
            "completion.py",
            "configuration.py",
            "debug.py",
            "download.py",
            "freeze.py",
            "hash.py",
            "help.py",
            "index.py",
            "inspect.py",
            "install.py",
            "list.py",
            "search.py",
            "show.py",
            "uninstall.py",
            "wheel.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\commands\\__pycache__": {
          "files": [
            "cache.cpython-312.pyc",
            "check.cpython-312.pyc",
            "completion.cpython-312.pyc",
            "configuration.cpython-312.pyc",
            "debug.cpython-312.pyc",
            "download.cpython-312.pyc",
            "freeze.cpython-312.pyc",
            "hash.cpython-312.pyc",
            "help.cpython-312.pyc",
            "index.cpython-312.pyc",
            "inspect.cpython-312.pyc",
            "install.cpython-312.pyc",
            "list.cpython-312.pyc",
            "search.cpython-312.pyc",
            "show.cpython-312.pyc",
            "uninstall.cpython-312.pyc",
            "wheel.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\distributions": {
          "files": [
            "base.py",
            "installed.py",
            "sdist.py",
            "wheel.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\distributions\\__pycache__": {
          "files": [
            "base.cpython-312.pyc",
            "installed.cpython-312.pyc",
            "sdist.cpython-312.pyc",
            "wheel.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\index": {
          "files": [
            "collector.py",
            "package_finder.py",
            "sources.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\index\\__pycache__": {
          "files": [
            "collector.cpython-312.pyc",
            "package_finder.cpython-312.pyc",
            "sources.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\locations": {
          "files": [
            "base.py",
            "_distutils.py",
            "_sysconfig.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\locations\\__pycache__": {
          "files": [
            "base.cpython-312.pyc",
            "_distutils.cpython-312.pyc",
            "_sysconfig.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\metadata": {
          "files": [
            "base.py",
            "pkg_resources.py",
            "_json.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib": {
          "files": [
            "_compat.py",
            "_dists.py",
            "_envs.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\__pycache__": {
          "files": [
            "_compat.cpython-312.pyc",
            "_dists.cpython-312.pyc",
            "_envs.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\metadata\\__pycache__": {
          "files": [
            "base.cpython-312.pyc",
            "pkg_resources.cpython-312.pyc",
            "_json.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\models": {
          "files": [
            "candidate.py",
            "direct_url.py",
            "format_control.py",
            "index.py",
            "installation_report.py",
            "link.py",
            "scheme.py",
            "search_scope.py",
            "selection_prefs.py",
            "target_python.py",
            "wheel.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\models\\__pycache__": {
          "files": [
            "candidate.cpython-312.pyc",
            "direct_url.cpython-312.pyc",
            "format_control.cpython-312.pyc",
            "index.cpython-312.pyc",
            "installation_report.cpython-312.pyc",
            "link.cpython-312.pyc",
            "scheme.cpython-312.pyc",
            "search_scope.cpython-312.pyc",
            "selection_prefs.cpython-312.pyc",
            "target_python.cpython-312.pyc",
            "wheel.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\network": {
          "files": [
            "auth.py",
            "cache.py",
            "download.py",
            "lazy_wheel.py",
            "session.py",
            "utils.py",
            "xmlrpc.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\network\\__pycache__": {
          "files": [
            "auth.cpython-312.pyc",
            "cache.cpython-312.pyc",
            "download.cpython-312.pyc",
            "lazy_wheel.cpython-312.pyc",
            "session.cpython-312.pyc",
            "utils.cpython-312.pyc",
            "xmlrpc.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\operations": {
          "files": [
            "check.py",
            "freeze.py",
            "prepare.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\operations\\build": {
          "files": [
            "build_tracker.py",
            "metadata.py",
            "metadata_editable.py",
            "metadata_legacy.py",
            "wheel.py",
            "wheel_editable.py",
            "wheel_legacy.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\operations\\build\\__pycache__": {
          "files": [
            "build_tracker.cpython-312.pyc",
            "metadata.cpython-312.pyc",
            "metadata_editable.cpython-312.pyc",
            "metadata_legacy.cpython-312.pyc",
            "wheel.cpython-312.pyc",
            "wheel_editable.cpython-312.pyc",
            "wheel_legacy.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\operations\\install": {
          "files": [
            "editable_legacy.py",
            "wheel.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\operations\\install\\__pycache__": {
          "files": [
            "editable_legacy.cpython-312.pyc",
            "wheel.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\operations\\__pycache__": {
          "files": [
            "check.cpython-312.pyc",
            "freeze.cpython-312.pyc",
            "prepare.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\req": {
          "files": [
            "constructors.py",
            "req_file.py",
            "req_install.py",
            "req_set.py",
            "req_uninstall.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\req\\__pycache__": {
          "files": [
            "constructors.cpython-312.pyc",
            "req_file.cpython-312.pyc",
            "req_install.cpython-312.pyc",
            "req_set.cpython-312.pyc",
            "req_uninstall.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\resolution": {
          "files": [
            "base.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\resolution\\legacy": {
          "files": [
            "resolver.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\resolution\\legacy\\__pycache__": {
          "files": [
            "resolver.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib": {
          "files": [
            "base.py",
            "candidates.py",
            "factory.py",
            "found_candidates.py",
            "provider.py",
            "reporter.py",
            "requirements.py",
            "resolver.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\__pycache__": {
          "files": [
            "base.cpython-312.pyc",
            "candidates.cpython-312.pyc",
            "factory.cpython-312.pyc",
            "found_candidates.cpython-312.pyc",
            "provider.cpython-312.pyc",
            "reporter.cpython-312.pyc",
            "requirements.cpython-312.pyc",
            "resolver.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\resolution\\__pycache__": {
          "files": [
            "base.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils": {
          "files": [
            "appdirs.py",
            "compat.py",
            "compatibility_tags.py",
            "datetime.py",
            "deprecation.py",
            "direct_url_helpers.py",
            "egg_link.py",
            "encoding.py",
            "entrypoints.py",
            "filesystem.py",
            "filetypes.py",
            "glibc.py",
            "hashes.py",
            "logging.py",
            "misc.py",
            "packaging.py",
            "retry.py",
            "setuptools_build.py",
            "subprocess.py",
            "temp_dir.py",
            "unpacking.py",
            "urls.py",
            "virtualenv.py",
            "wheel.py",
            "_jaraco_text.py",
            "_log.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\utils\\__pycache__": {
          "files": [
            "appdirs.cpython-312.pyc",
            "compat.cpython-312.pyc",
            "compatibility_tags.cpython-312.pyc",
            "datetime.cpython-312.pyc",
            "deprecation.cpython-312.pyc",
            "direct_url_helpers.cpython-312.pyc",
            "egg_link.cpython-312.pyc",
            "encoding.cpython-312.pyc",
            "entrypoints.cpython-312.pyc",
            "filesystem.cpython-312.pyc",
            "filetypes.cpython-312.pyc",
            "glibc.cpython-312.pyc",
            "hashes.cpython-312.pyc",
            "logging.cpython-312.pyc",
            "misc.cpython-312.pyc",
            "packaging.cpython-312.pyc",
            "retry.cpython-312.pyc",
            "setuptools_build.cpython-312.pyc",
            "subprocess.cpython-312.pyc",
            "temp_dir.cpython-312.pyc",
            "unpacking.cpython-312.pyc",
            "urls.cpython-312.pyc",
            "virtualenv.cpython-312.pyc",
            "wheel.cpython-312.pyc",
            "_jaraco_text.cpython-312.pyc",
            "_log.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\vcs": {
          "files": [
            "bazaar.py",
            "git.py",
            "mercurial.py",
            "subversion.py",
            "versioncontrol.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\vcs\\__pycache__": {
          "files": [
            "bazaar.cpython-312.pyc",
            "git.cpython-312.pyc",
            "mercurial.cpython-312.pyc",
            "subversion.cpython-312.pyc",
            "versioncontrol.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_internal\\__pycache__": {
          "files": [
            "build_env.cpython-312.pyc",
            "cache.cpython-312.pyc",
            "configuration.cpython-312.pyc",
            "exceptions.cpython-312.pyc",
            "main.cpython-312.pyc",
            "pyproject.cpython-312.pyc",
            "self_outdated_check.cpython-312.pyc",
            "wheel_builder.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor": {
          "files": [
            "typing_extensions.py",
            "vendor.txt",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol": {
          "files": [
            "adapter.py",
            "cache.py",
            "controller.py",
            "filewrapper.py",
            "heuristics.py",
            "py.typed",
            "serialize.py",
            "wrapper.py",
            "_cmd.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\caches": {
          "files": [
            "file_cache.py",
            "redis_cache.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\caches\\__pycache__": {
          "files": [
            "file_cache.cpython-312.pyc",
            "redis_cache.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\__pycache__": {
          "files": [
            "adapter.cpython-312.pyc",
            "cache.cpython-312.pyc",
            "controller.cpython-312.pyc",
            "filewrapper.cpython-312.pyc",
            "heuristics.cpython-312.pyc",
            "serialize.cpython-312.pyc",
            "wrapper.cpython-312.pyc",
            "_cmd.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\certifi": {
          "files": [
            "cacert.pem",
            "core.py",
            "py.typed",
            "__init__.py",
            "__main__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\certifi\\__pycache__": {
          "files": [
            "core.cpython-312.pyc",
            "__init__.cpython-312.pyc",
            "__main__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib": {
          "files": [
            "compat.py",
            "database.py",
            "index.py",
            "locators.py",
            "manifest.py",
            "markers.py",
            "metadata.py",
            "resources.py",
            "scripts.py",
            "t32.exe",
            "t64-arm.exe",
            "t64.exe",
            "util.py",
            "version.py",
            "w32.exe",
            "w64-arm.exe",
            "w64.exe",
            "wheel.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\__pycache__": {
          "files": [
            "compat.cpython-312.pyc",
            "database.cpython-312.pyc",
            "index.cpython-312.pyc",
            "locators.cpython-312.pyc",
            "manifest.cpython-312.pyc",
            "markers.cpython-312.pyc",
            "metadata.cpython-312.pyc",
            "resources.cpython-312.pyc",
            "scripts.cpython-312.pyc",
            "util.cpython-312.pyc",
            "version.cpython-312.pyc",
            "wheel.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distro": {
          "files": [
            "distro.py",
            "py.typed",
            "__init__.py",
            "__main__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\distro\\__pycache__": {
          "files": [
            "distro.cpython-312.pyc",
            "__init__.cpython-312.pyc",
            "__main__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\idna": {
          "files": [
            "codec.py",
            "compat.py",
            "core.py",
            "idnadata.py",
            "intranges.py",
            "package_data.py",
            "py.typed",
            "uts46data.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\idna\\__pycache__": {
          "files": [
            "codec.cpython-312.pyc",
            "compat.cpython-312.pyc",
            "core.cpython-312.pyc",
            "idnadata.cpython-312.pyc",
            "intranges.cpython-312.pyc",
            "package_data.cpython-312.pyc",
            "uts46data.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\msgpack": {
          "files": [
            "exceptions.py",
            "ext.py",
            "fallback.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\msgpack\\__pycache__": {
          "files": [
            "exceptions.cpython-312.pyc",
            "ext.cpython-312.pyc",
            "fallback.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\packaging": {
          "files": [
            "markers.py",
            "metadata.py",
            "py.typed",
            "requirements.py",
            "specifiers.py",
            "tags.py",
            "utils.py",
            "version.py",
            "_elffile.py",
            "_manylinux.py",
            "_musllinux.py",
            "_parser.py",
            "_structures.py",
            "_tokenizer.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\__pycache__": {
          "files": [
            "markers.cpython-312.pyc",
            "metadata.cpython-312.pyc",
            "requirements.cpython-312.pyc",
            "specifiers.cpython-312.pyc",
            "tags.cpython-312.pyc",
            "utils.cpython-312.pyc",
            "version.cpython-312.pyc",
            "_elffile.cpython-312.pyc",
            "_manylinux.cpython-312.pyc",
            "_musllinux.cpython-312.pyc",
            "_parser.cpython-312.pyc",
            "_structures.cpython-312.pyc",
            "_tokenizer.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources": {
          "files": [
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__pycache__": {
          "files": [
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs": {
          "files": [
            "android.py",
            "api.py",
            "macos.py",
            "py.typed",
            "unix.py",
            "version.py",
            "windows.py",
            "__init__.py",
            "__main__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\__pycache__": {
          "files": [
            "android.cpython-312.pyc",
            "api.cpython-312.pyc",
            "macos.cpython-312.pyc",
            "unix.cpython-312.pyc",
            "version.cpython-312.pyc",
            "windows.cpython-312.pyc",
            "__init__.cpython-312.pyc",
            "__main__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments": {
          "files": [
            "cmdline.py",
            "console.py",
            "filter.py",
            "formatter.py",
            "lexer.py",
            "modeline.py",
            "plugin.py",
            "regexopt.py",
            "scanner.py",
            "sphinxext.py",
            "style.py",
            "token.py",
            "unistring.py",
            "util.py",
            "__init__.py",
            "__main__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\filters": {
          "files": [
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\filters\\__pycache__": {
          "files": [
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters": {
          "files": [
            "bbcode.py",
            "groff.py",
            "html.py",
            "img.py",
            "irc.py",
            "latex.py",
            "other.py",
            "pangomarkup.py",
            "rtf.py",
            "svg.py",
            "terminal.py",
            "terminal256.py",
            "_mapping.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\__pycache__": {
          "files": [
            "bbcode.cpython-312.pyc",
            "groff.cpython-312.pyc",
            "html.cpython-312.pyc",
            "img.cpython-312.pyc",
            "irc.cpython-312.pyc",
            "latex.cpython-312.pyc",
            "other.cpython-312.pyc",
            "pangomarkup.cpython-312.pyc",
            "rtf.cpython-312.pyc",
            "svg.cpython-312.pyc",
            "terminal.cpython-312.pyc",
            "terminal256.cpython-312.pyc",
            "_mapping.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexers": {
          "files": [
            "python.py",
            "_mapping.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexers\\__pycache__": {
          "files": [
            "python.cpython-312.pyc",
            "_mapping.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\styles": {
          "files": [
            "_mapping.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\styles\\__pycache__": {
          "files": [
            "_mapping.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\__pycache__": {
          "files": [
            "cmdline.cpython-312.pyc",
            "console.cpython-312.pyc",
            "filter.cpython-312.pyc",
            "formatter.cpython-312.pyc",
            "lexer.cpython-312.pyc",
            "modeline.cpython-312.pyc",
            "plugin.cpython-312.pyc",
            "regexopt.cpython-312.pyc",
            "scanner.cpython-312.pyc",
            "sphinxext.cpython-312.pyc",
            "style.cpython-312.pyc",
            "token.cpython-312.pyc",
            "unistring.cpython-312.pyc",
            "util.cpython-312.pyc",
            "__init__.cpython-312.pyc",
            "__main__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks": {
          "files": [
            "_compat.py",
            "_impl.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\_in_process": {
          "files": [
            "_in_process.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\_in_process\\__pycache__": {
          "files": [
            "_in_process.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\__pycache__": {
          "files": [
            "_compat.cpython-312.pyc",
            "_impl.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\requests": {
          "files": [
            "adapters.py",
            "api.py",
            "auth.py",
            "certs.py",
            "compat.py",
            "cookies.py",
            "exceptions.py",
            "help.py",
            "hooks.py",
            "models.py",
            "packages.py",
            "sessions.py",
            "status_codes.py",
            "structures.py",
            "utils.py",
            "_internal_utils.py",
            "__init__.py",
            "__version__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\requests\\__pycache__": {
          "files": [
            "adapters.cpython-312.pyc",
            "api.cpython-312.pyc",
            "auth.cpython-312.pyc",
            "certs.cpython-312.pyc",
            "compat.cpython-312.pyc",
            "cookies.cpython-312.pyc",
            "exceptions.cpython-312.pyc",
            "help.cpython-312.pyc",
            "hooks.cpython-312.pyc",
            "models.cpython-312.pyc",
            "packages.cpython-312.pyc",
            "sessions.cpython-312.pyc",
            "status_codes.cpython-312.pyc",
            "structures.cpython-312.pyc",
            "utils.cpython-312.pyc",
            "_internal_utils.cpython-312.pyc",
            "__init__.cpython-312.pyc",
            "__version__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib": {
          "files": [
            "providers.py",
            "py.typed",
            "reporters.py",
            "resolvers.py",
            "structs.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\compat": {
          "files": [
            "collections_abc.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\compat\\__pycache__": {
          "files": [
            "collections_abc.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\__pycache__": {
          "files": [
            "providers.cpython-312.pyc",
            "reporters.cpython-312.pyc",
            "resolvers.cpython-312.pyc",
            "structs.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich": {
          "files": [
            "abc.py",
            "align.py",
            "ansi.py",
            "bar.py",
            "box.py",
            "cells.py",
            "color.py",
            "color_triplet.py",
            "columns.py",
            "console.py",
            "constrain.py",
            "containers.py",
            "control.py",
            "default_styles.py",
            "diagnose.py",
            "emoji.py",
            "errors.py",
            "filesize.py",
            "file_proxy.py",
            "highlighter.py",
            "json.py",
            "jupyter.py",
            "layout.py",
            "live.py",
            "live_render.py",
            "logging.py",
            "markup.py",
            "measure.py",
            "padding.py",
            "pager.py",
            "palette.py",
            "panel.py",
            "pretty.py",
            "progress.py",
            "progress_bar.py",
            "prompt.py",
            "protocol.py",
            "py.typed",
            "region.py",
            "repr.py",
            "rule.py",
            "scope.py",
            "screen.py",
            "segment.py",
            "spinner.py",
            "status.py",
            "style.py",
            "styled.py",
            "syntax.py",
            "table.py",
            "terminal_theme.py",
            "text.py",
            "theme.py",
            "themes.py",
            "traceback.py",
            "tree.py",
            "_cell_widths.py",
            "_emoji_codes.py",
            "_emoji_replace.py",
            "_export_format.py",
            "_extension.py",
            "_fileno.py",
            "_inspect.py",
            "_log_render.py",
            "_loop.py",
            "_null_file.py",
            "_palettes.py",
            "_pick.py",
            "_ratio.py",
            "_spinners.py",
            "_stack.py",
            "_timer.py",
            "_win32_console.py",
            "_windows.py",
            "_windows_renderer.py",
            "_wrap.py",
            "__init__.py",
            "__main__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\rich\\__pycache__": {
          "files": [
            "abc.cpython-312.pyc",
            "align.cpython-312.pyc",
            "ansi.cpython-312.pyc",
            "bar.cpython-312.pyc",
            "box.cpython-312.pyc",
            "cells.cpython-312.pyc",
            "color.cpython-312.pyc",
            "color_triplet.cpython-312.pyc",
            "columns.cpython-312.pyc",
            "console.cpython-312.pyc",
            "constrain.cpython-312.pyc",
            "containers.cpython-312.pyc",
            "control.cpython-312.pyc",
            "default_styles.cpython-312.pyc",
            "diagnose.cpython-312.pyc",
            "emoji.cpython-312.pyc",
            "errors.cpython-312.pyc",
            "filesize.cpython-312.pyc",
            "file_proxy.cpython-312.pyc",
            "highlighter.cpython-312.pyc",
            "json.cpython-312.pyc",
            "jupyter.cpython-312.pyc",
            "layout.cpython-312.pyc",
            "live.cpython-312.pyc",
            "live_render.cpython-312.pyc",
            "logging.cpython-312.pyc",
            "markup.cpython-312.pyc",
            "measure.cpython-312.pyc",
            "padding.cpython-312.pyc",
            "pager.cpython-312.pyc",
            "palette.cpython-312.pyc",
            "panel.cpython-312.pyc",
            "pretty.cpython-312.pyc",
            "progress.cpython-312.pyc",
            "progress_bar.cpython-312.pyc",
            "prompt.cpython-312.pyc",
            "protocol.cpython-312.pyc",
            "region.cpython-312.pyc",
            "repr.cpython-312.pyc",
            "rule.cpython-312.pyc",
            "scope.cpython-312.pyc",
            "screen.cpython-312.pyc",
            "segment.cpython-312.pyc",
            "spinner.cpython-312.pyc",
            "status.cpython-312.pyc",
            "style.cpython-312.pyc",
            "styled.cpython-312.pyc",
            "syntax.cpython-312.pyc",
            "table.cpython-312.pyc",
            "terminal_theme.cpython-312.pyc",
            "text.cpython-312.pyc",
            "theme.cpython-312.pyc",
            "themes.cpython-312.pyc",
            "traceback.cpython-312.pyc",
            "tree.cpython-312.pyc",
            "_cell_widths.cpython-312.pyc",
            "_emoji_codes.cpython-312.pyc",
            "_emoji_replace.cpython-312.pyc",
            "_export_format.cpython-312.pyc",
            "_extension.cpython-312.pyc",
            "_fileno.cpython-312.pyc",
            "_inspect.cpython-312.pyc",
            "_log_render.cpython-312.pyc",
            "_loop.cpython-312.pyc",
            "_null_file.cpython-312.pyc",
            "_palettes.cpython-312.pyc",
            "_pick.cpython-312.pyc",
            "_ratio.cpython-312.pyc",
            "_spinners.cpython-312.pyc",
            "_stack.cpython-312.pyc",
            "_timer.cpython-312.pyc",
            "_win32_console.cpython-312.pyc",
            "_windows.cpython-312.pyc",
            "_windows_renderer.cpython-312.pyc",
            "_wrap.cpython-312.pyc",
            "__init__.cpython-312.pyc",
            "__main__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\tomli": {
          "files": [
            "py.typed",
            "_parser.py",
            "_re.py",
            "_types.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\tomli\\__pycache__": {
          "files": [
            "_parser.cpython-312.pyc",
            "_re.cpython-312.pyc",
            "_types.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\truststore": {
          "files": [
            "py.typed",
            "_api.py",
            "_macos.py",
            "_openssl.py",
            "_ssl_constants.py",
            "_windows.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\__pycache__": {
          "files": [
            "_api.cpython-312.pyc",
            "_macos.cpython-312.pyc",
            "_openssl.cpython-312.pyc",
            "_ssl_constants.cpython-312.pyc",
            "_windows.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3": {
          "files": [
            "connection.py",
            "connectionpool.py",
            "exceptions.py",
            "fields.py",
            "filepost.py",
            "poolmanager.py",
            "request.py",
            "response.py",
            "_collections.py",
            "_version.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib": {
          "files": [
            "appengine.py",
            "ntlmpool.py",
            "pyopenssl.py",
            "securetransport.py",
            "socks.py",
            "_appengine_environ.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_securetransport": {
          "files": [
            "bindings.py",
            "low_level.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_securetransport\\__pycache__": {
          "files": [
            "bindings.cpython-312.pyc",
            "low_level.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\__pycache__": {
          "files": [
            "appengine.cpython-312.pyc",
            "ntlmpool.cpython-312.pyc",
            "pyopenssl.cpython-312.pyc",
            "securetransport.cpython-312.pyc",
            "socks.cpython-312.pyc",
            "_appengine_environ.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages": {
          "files": [
            "six.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports": {
          "files": [
            "makefile.py",
            "weakref_finalize.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\__pycache__": {
          "files": [
            "makefile.cpython-312.pyc",
            "weakref_finalize.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\__pycache__": {
          "files": [
            "six.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util": {
          "files": [
            "connection.py",
            "proxy.py",
            "queue.py",
            "request.py",
            "response.py",
            "retry.py",
            "ssltransport.py",
            "ssl_.py",
            "ssl_match_hostname.py",
            "timeout.py",
            "url.py",
            "wait.py",
            "__init__.py"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\__pycache__": {
          "files": [
            "connection.cpython-312.pyc",
            "proxy.cpython-312.pyc",
            "queue.cpython-312.pyc",
            "request.cpython-312.pyc",
            "response.cpython-312.pyc",
            "retry.cpython-312.pyc",
            "ssltransport.cpython-312.pyc",
            "ssl_.cpython-312.pyc",
            "ssl_match_hostname.cpython-312.pyc",
            "timeout.cpython-312.pyc",
            "url.cpython-312.pyc",
            "wait.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\__pycache__": {
          "files": [
            "connection.cpython-312.pyc",
            "connectionpool.cpython-312.pyc",
            "exceptions.cpython-312.pyc",
            "fields.cpython-312.pyc",
            "filepost.cpython-312.pyc",
            "poolmanager.cpython-312.pyc",
            "request.cpython-312.pyc",
            "response.cpython-312.pyc",
            "_collections.cpython-312.pyc",
            "_version.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\_vendor\\__pycache__": {
          "files": [
            "typing_extensions.cpython-312.pyc",
            "__init__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip\\__pycache__": {
          "files": [
            "__init__.cpython-312.pyc",
            "__main__.cpython-312.pyc",
            "__pip-runner__.cpython-312.pyc"
          ],
          "components": []
        },
        ".venv\\Lib\\site-packages\\pip-24.2.dist-info": {
          "files": [
            "AUTHORS.txt",
            "entry_points.txt",
            "INSTALLER",
            "LICENSE.txt",
            "METADATA",
            "RECORD",
            "REQUESTED",
            "top_level.txt",
            "WHEEL"
          ],
          "components": []
        },
        ".venv\\Scripts": {
          "files": [
            "activate",
            "activate.bat",
            "Activate.ps1",
            "deactivate.bat",
            "pip.exe",
            "pip3.12.exe",
            "pip3.exe",
            "python.exe",
            "pythonw.exe"
          ],
          "components": []
        },
        "duplicate data": {
          "files": [
            "issues_v0.csv",
            "issues_v0.json",
            "issues_v1.csv",
            "issues_v1.json"
          ],
          "components": []
        },
        "TDAAS-Web": {
          "files": [
            ".editorconfig",
            ".gitignore",
            "all-code.txt",
            "angular.json",
            "concat-code.js",
            "package-lock.json",
            "package.json",
            "README.md",
            "tsconfig.app.json",
            "tsconfig.json",
            "tsconfig.spec.json"
          ],
          "components": []
        },
        "TDAAS-Web\\.vscode": {
          "files": [
            "extensions.json",
            "launch.json",
            "tasks.json"
          ],
          "components": []
        },
        "TDAAS-Web\\src": {
          "files": [
            "favicon.ico",
            "index.html",
            "main.ts",
            "staticwebapp.config.json",
            "styles.css"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\app": {
          "files": [
            "app-routing.module.ts",
            "app.component.css",
            "app.component.html",
            "app.component.spec.ts",
            "app.component.ts",
            "app.module.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\app\\authenticated": {
          "files": [
            "authenticated.component.css",
            "authenticated.component.html",
            "authenticated.component.spec.ts",
            "authenticated.component.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\app\\authentication": {
          "files": [
            "authentication.component.css",
            "authentication.component.html",
            "authentication.component.spec.ts",
            "authentication.component.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\app\\code2-code": {
          "files": [
            "code2-code.component.css",
            "code2-code.component.html",
            "code2-code.component.spec.ts",
            "code2-code.component.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\app\\image2-code": {
          "files": [
            "image2-code.component.css",
            "image2-code.component.html",
            "image2-code.component.spec.ts",
            "image2-code.component.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\app\\logout": {
          "files": [
            "logout.component.css",
            "logout.component.html",
            "logout.component.spec.ts",
            "logout.component.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\app\\main-menu": {
          "files": [
            "main-menu.component.css",
            "main-menu.component.html",
            "main-menu.component.spec.ts",
            "main-menu.component.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\app\\prompt2-code": {
          "files": [
            "prompt2-code.component.css",
            "prompt2-code.component.html",
            "prompt2-code.component.spec.ts",
            "prompt2-code.component.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\app\\sample": {
          "files": [
            "sample.component.css",
            "sample.component.html",
            "sample.component.spec.ts",
            "sample.component.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\assets": {
          "files": [
            ".gitkeep"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\assets\\Images": {
          "files": [
            "favIcon.png",
            "Logo.png"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\config": {
          "files": [
            "prod-config.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\guards": {
          "files": [
            "authentication-guard.guard.spec.ts",
            "authentication-guard.guard.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\services": {
          "files": [
            "assistant.service.spec.ts",
            "assistant.service.ts",
            "authentication.service.spec.ts",
            "authentication.service.ts",
            "http-client.service.spec.ts",
            "http-client.service.ts",
            "shared-data.service.ts"
          ],
          "components": []
        },
        "TDAAS-Web\\src\\utils": {
          "files": [
            "auth-utils.ts",
            "localstorage-utils.ts"
          ],
          "components": []
        }
      }
    }
  },
  "migrations": {},
  "v1_components": {
    "modus-accordion.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The \"ariaLabel\" prop allows developers to assign an accessible label to the accordion, which is then used as the aria-label attribute on the div. This enhances accessibility by providing screen readers with descriptive information about the component."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-accordion-storybook-docs.mdx';\nimport { html } from 'lit-html';\n\nexport default {\n  title: 'Components/Accordion',\n  argTypes: {\n    icon: {\n      name: 'icon',\n      description: 'The icon to display before the header text',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    expandButtonType: {\n      name: 'expandButtonType',\n      type: 'select',\n      defaultValue: 'standardArrow',\n      description: 'The type of expand button',\n      table: {\n        type: { summary: 'standardArrow | circleArrow' },\n        defaultValue: { summary: 'standardArrow' },\n      },\n      options: ['standardArrow', 'circleArrow'],\n    },\n    supportingLabel: {\n      name: 'supportingLabel',\n      type: 'string',\n      description: 'The supportingLabel of the accordion',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    controls: {\n      expanded: true,\n      sort: 'alpha',\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\nconst Template = ({ expandButtonType, icon, supportingLabel }) => html`\n  <modus-accordion>\n    <modus-accordion-item\n      header-text=\"Item 1\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}\n      >Content</modus-accordion-item\n    >\n    <modus-accordion-item\n      header-text=\"Item 2\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}\n      >Content</modus-accordion-item\n    >\n    <modus-accordion-item\n      disabled\n      header-text=\"Item 3\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}>\n      Content\n    </modus-accordion-item>\n  </modus-accordion>\n`;\n\nconst DefaultTemplateArgs = {\n  expandButtonType: 'standardArrow',\n  icon: '',\n  supportingLabel: 'Item Label',\n};\n\nconst WithIconTemplateArgs = {\n  expandButtonType: 'standardArrow',\n  icon: 'notifications',\n  supportingLabel: 'Item Label',\n};\n\nconst CircleArrowTemplateArgs = {\n  expandButtonType: 'circleArrow',\n  icon: '',\n  supportingLabel: 'Item Label',\n};\n\nexport const Default = Template.bind({});\nDefault.args = DefaultTemplateArgs;\n\nexport const WithIcon = Template.bind({});\nWithIcon.args = WithIconTemplateArgs;\n\nexport const CircleArrow = Template.bind({});\nCircleArrow.args = CircleArrowTemplateArgs;\n"
    },
    "modus-accordion-item.tsx": {
      "props": [
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop prevents user interaction with the accordion item. When set to true, it stops the expand/collapse behavior, applies the appropriate styling (e.g., disabling pointer events), and sets proper ARIA attributes to indicate that the component is not interactive."
        },
        {
          "name": "expandButtonType",
          "comment": "// The 'expandButtonType' prop sets the style of the expand icon used in the accordion header, allowing the developer to choose between a standard arrow (using IconExpandMore) or a circle arrow icon (using IconExpandMoreCircle)."
        },
        {
          "name": "headerText",
          "comment": "// The 'headerText' prop holds the required string that is displayed as the title in the header of the accordion item."
        },
        {
          "name": "icon",
          "comment": "// The 'icon' prop holds an optional string that names the icon to display before the header text. When provided, it is used by the renderIcon() method\u2014which leverages the ModusIconMap component\u2014to render the appropriate icon."
        },
        {
          "name": "supportingLabel",
          "comment": "// The 'supportingLabel' prop is an optional string used to provide additional descriptive text alongside the header text of the accordion item.\n// When specified, it renders below the main header title, giving extra context or information about the accordion's content."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop controls the overall dimensions and styling of the accordion item.\n// It accepts either 'condensed' (for a more compact layout) or 'standard' (default layout),\n// and is used to set appropriate CSS classes (e.g., for spacing and font sizes) as well as\n// determining icon sizes throughout the component."
        }
      ],
      "events": [
        {
          "name": "closed",
          "comment": "// 'closed' is an event that fires after the accordion item has fully collapsed (i.e., its close animation is complete). It allows parent components or other consumers to react to the collapse event, e.g., by updating state or performing cleanup actions."
        },
        {
          "name": "opened",
          "comment": "// The 'opened' event is emitted after the accordion item has completed its expand transition.\n// It notifies any listening parent components or handlers that the accordion has been fully opened."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-action-bar.tsx": {
      "props": [
        {
          "name": "size",
          "comment": "// The 'size' prop controls the visual dimensions of the action bar items (buttons and list items). \n// It accepts 'small', 'medium', or 'large', allowing the consumer to adjust the overall item size to fit the design requirements. \n// For example, the prop is used for styling the buttons via their 'size' attribute and determines the list-item size (as 'condensed' or 'standard') accordingly."
        }
      ],
      "events": [
        {
          "name": "actionBarClick",
          "comment": "// 'actionBarClick' is a custom event emitted when an action item (button) is clicked.\n// It notifies parent components which action was triggered by sending the action's id in an event payload."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-alert.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The \"ariaLabel\" prop provides an accessible text description for the alert element. If specified, it assigns an aria-label to the container (the <div> with role=\"alert\"), improving accessibility for assistive technologies by describing the alert\u2019s content and purpose."
        },
        {
          "name": "buttonAriaLabel",
          "comment": "// The prop 'buttonAriaLabel' provides an accessible label for the action button. \n// It is used as the value for the button\u2019s aria-label attribute on the <modus-button> element,\n// ensuring that screen readers can convey a meaningful description of the button's purpose to users."
        },
        {
          "name": "buttonText",
          "comment": "// The 'buttonText' prop holds the text for an optional action button.\n // If provided (i.e., if buttonText is a non-empty string), an action button renders\n // within the alert, allowing the user to trigger an action via a click (emitting the actionClick event).\n // If absent or empty, the action button is omitted."
        },
        {
          "name": "dismissible",
          "comment": "// The 'dismissible' prop determines whether the alert displays a close button.\n// When true, the alert renders a dismiss (close) icon that users can click or activate via keyboard (e.g., Escape key)\n// to trigger the dismissClick event, allowing the alert to be programmatically dismissed."
        },
        {
          "name": "message",
          "comment": "// The 'message' prop holds the main text content that the alert displays. If the text exceeds a set length (300 characters),\n// it gets truncated with an ellipsis. This allows the alert to dynamically show a brief message while preventing overly long text from overwhelming the UI."
        },
        {
          "name": "type",
          "comment": "// The 'type' prop determines the alert\u2019s visual style by selecting the appropriate icon and CSS class. \n// It accepts specific values ('error', 'info', 'info-gray', 'info-gray-dark', 'success', 'warning'),\n// which control aspects like color and icon rendering to match the alert's intended meaning."
        }
      ],
      "events": [
        {
          "name": "dismissClick",
          "comment": "// The 'dismissClick' event is emitted when the alert is dismissed (either by clicking the dismiss icon or pressing the Escape key), allowing parent components to respond (e.g., hide the alert) when the user chooses to dismiss it."
        },
        {
          "name": "actionClick",
          "comment": "// The 'actionClick' event is emitted when the alert\u2019s action button (if provided) is activated (via mouse click or keyboard interaction). This lets parent components listen for and respond to the user's action on the alert, for example, to trigger additional logic or navigation when the button is pressed."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-autocomplete.tsx": {
      "props": [
        {
          "name": "multiple",
          "comment": "// The 'multiple' prop determines whether the autocomplete allows selecting more than one option. \n// When true, multiple selections are allowed and the selected options are displayed as chips.\n// When false, only a single option can be selected and displayed."
        },
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop allows consumers to set an accessible label for the autocomplete component, which is injected into the component\u2019s container as an \"aria-label\" attribute. This helps assistive technologies (like screen readers) convey the purpose or identity of the component to users with disabilities."
        },
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop indicates whether the autocomplete component should be non-interactive.\n// When set to true, the component and its child elements (such as the text input and chips) are rendered in a disabled state, \n// preventing user interactions, modifying ARIA attributes for accessibility, and avoiding triggering related events."
        },
        {
          "name": "disableCloseOnSelect",
          "comment": "// The 'disableCloseOnSelect' prop controls whether the dropdown options list should remain open after a user selects an option.\n// When set to true, the dropdown stays open (and filtering is maintained), allowing the user to make additional selections\n// or adjustments without the options closing automatically. When false, selecting an option will close the dropdown."
        },
        {
          "name": "label",
          "comment": "// The 'label' prop sets a descriptive text or title for the autocomplete input.\n// When provided, the component renders this text above the input field to give context\n// to the user. This is especially useful for accessibility and clarity, for example,\n// in forms where components require labeling, and it can also display a required marker."
        },
        {
          "name": "filterOptions",
          "comment": "/* \n   The filterOptions prop is an optional function that accepts a search string and returns a Promise resolving to a filtered list of options. It enables asynchronous or custom filtering logic for the autocomplete component. When a user types in the input, if filterOptions is provided, the component invokes this function to obtain and update the dropdown options accordingly.\n*/"
        },
        {
          "name": "showOptionsOnFocus",
          "comment": "/* \n  The 'showOptionsOnFocus' prop determines whether the autocomplete's options should be displayed \n  immediately when the component gains focus. When true, the dropdown is shown on focus even \n  if the user hasn't typed any search text; when false, the dropdown appears only when a search \n  value is provided or other conditions (like disableCloseOnSelect) are met.\n*/"
        },
        {
          "name": "placeholder",
          "comment": "// The 'placeholder' prop is used to display helper text inside the autocomplete's text input when it is empty, guiding the user on what to enter. It is passed as the placeholder attribute to the underlying text input component."
        },
        {
          "name": "readOnly",
          "comment": "// The 'readOnly' prop controls whether the component allows user input or modifications. \n// When set to true, the component's input cannot be edited, options cannot be selected or cleared,\n// and it marks the component as read-only in its ARIA attributes. This ensures the user can view \n// the autocomplete value(s) without being able to change them."
        },
        {
          "name": "required",
          "comment": "// The 'required' prop indicates whether the autocomplete input must have a value. When set to true, it adds a visual indicator (an asterisk next to the label) and applies the appropriate ARIA attribute (aria-required) for accessibility. This informs both the user and assistive technologies that the field is mandatory."
        },
        {
          "name": "size",
          "comment": "/* \n  The 'size' prop controls the visual sizing of the autocomplete component by allowing two configurations: 'medium' or 'large'. \n  It influences various UI elements such as the text input, chips (with their respective sizes), and icon sizes (e.g., search icon being 16px for 'medium' and 24px for 'large'), ensuring a consistent appearance throughout the component.\n*/"
        }
      ],
      "events": [
        {
          "name": "optionSelected",
          "comment": "// The 'optionSelected' event is emitted when a user selects an option (via mouse click or keyboard interaction). \n// It sends out the unique id of the chosen option, allowing external consumers to respond (e.g., update state or trigger actions) based on the selection."
        },
        {
          "name": "valueChange",
          "comment": "// The 'valueChange' event is fired whenever the autocomplete\u2019s input value is updated.\n// It emits the new value (a string or an array of strings for multiple selections) so that parent components\n// can synchronize state and react to changes (e.g., updating filtered options or handling selected chips)."
        },
        {
          "name": "selectionsChanged",
          "comment": "// The 'selectionsChanged' event emits an array of IDs representing the currently selected options (or chips). \n// It is triggered whenever an option is added or removed (in both single and multiple selection modes), \n// allowing consumers to reactively update any external state based on the user's current selections."
        }
      ],
      "slots": [],
      "documentation": "import { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-autocomplete-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Autocomplete',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The autocomplete's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    clearable: {\n      description: 'Whether the autocomplete is clearable',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the autocomplete is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    dropdownMaxHeight: {\n      name: 'dropdown-max-height',\n      description: 'The maximum height of the dropdown',\n      table: {\n        defaultValue: { summary: '300px' },\n        type: { summary: 'string' },\n      },\n    },\n    dropdownZIndex: {\n      name: 'dropdown-z-index',\n      description: \"The dropdown's z-index\",\n      table: {\n        defaultValue: { summary: '1' },\n        type: { summary: 'string' },\n      },\n    },\n    disableCloseOnSelect: {\n      name: 'disable-close-on-select',\n      description: 'Whether the autocomplete options always display on select',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The autocomplete's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    filterOptions: {\n      name: 'filter-options',\n      description: 'Function to filter options',\n      table: {\n        type: { summary: 'function' },\n      },\n    },\n    includeSearchIcon: {\n      name: 'include-search-icon',\n      description: 'Whether to include the search icon',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    label: {\n      description: \"The autocomplete's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    loading: {\n      description: 'Whether the autocomplete is in a loading state',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    noResultsFoundText: {\n      name: 'no-results-found-text',\n      description: \"The autocomplete's no results found text\",\n      table: {\n        defaultValue: { summary: 'No results found' },\n        type: { summary: 'string' },\n      },\n    },\n    noResultsFoundSubtext: {\n      name: 'no-results-found-subtext',\n      description: \"The autocomplete's no results found subtext\",\n      table: {\n        defaultValue: { summary: 'Check spelling or try a different keyword' },\n        type: { summary: 'string' },\n      },\n    },\n    placeholder: {\n      description: \"The autocomplete's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the autocomplete is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the autocomplete is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    showNoResultsFoundMessage: {\n      name: 'show-no-results-found-message',\n      description: 'Whether to show the no results found message when no results are found',\n      table: {\n        defaultValue: { summary: true },\n        type: { summary: 'boolean' },\n      },\n    },\n    showOptionsOnFocus: {\n      name: 'show-options-on-focus',\n      description: 'Whether to show autocomplete options when focus',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the autocomplete',\n      table: {\n        defaultValue: { summary: \"'medium'\" },\n        type: { summary: \"'medium' | 'large'\" },\n      },\n    },\n    value: {\n      description: \"The autocomplete's value\",\n      table: {\n        type: { summary: 'string | string[]' },\n      },\n    },\n    multiple: {\n      description:\n        'When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'requiredFirst' },\n    actions: {\n      handles: ['valueChange', 'optionSelected', 'selectionsChanged'],\n    },\n    docs: {\n      inlineStories: true,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  clearable,\n  disabled,\n  dropdownMaxHeight,\n  dropdownZIndex,\n  disableCloseOnSelect,\n  errorText,\n  includeSearchIcon,\n  label,\n  multiple,\n  noResultsFoundText,\n  noResultsFoundSubtext,\n  placeholder,\n  readOnly,\n  required,\n  showNoResultsFoundMessage,\n  showOptionsOnFocus,\n  size,\n  value,\n  options,\n}) => html`\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      id=\"autocomplete-default\"\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      disable-close-on-select=${disableCloseOnSelect}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}\n      .options=${options}>\n    </modus-autocomplete>\n  </div>\n`;\n\nconst defaultOptions = [\n  'Apple',\n  'Banana',\n  'Orange',\n  'Mango',\n  'Pineapple',\n  'Grapes',\n  'Watermelon',\n  'Strawberry',\n  'Blueberry',\n  'Raspberry',\n  'Blackberry',\n  'Cherry',\n  'Peach',\n  'Pear',\n  'Plum',\n  'Kiwi',\n  'Lemon',\n  'Lime',\n  'Papaya',\n  'Passion Fruit',\n];\n\nconst defaultArgs = {\n  ariaLabel: 'autocomplete',\n  clearable: false,\n  disabled: false,\n  disableCloseOnSelect: false,\n  dropdownMaxHeight: '300px',\n  dropdownZIndex: '1',\n  errorText: '',\n  includeSearchIcon: true,\n  label: 'Default Autocomplete',\n  multiple: false,\n  noResultsFoundText: 'No results found',\n  noResultsFoundSubtext: 'Check spelling or try a different keyword',\n  placeholder: 'Search...',\n  readOnly: false,\n  required: false,\n  showNoResultsFoundMessage: true,\n  showOptionsOnFocus: false,\n  size: 'medium',\n  value: '',\n  options: defaultOptions,\n};\n\nconst customOptions = [\n  { id: 'ID0', value: 'Apple' },\n  { id: 'ID1', value: 'Banana' },\n  { id: 'ID2', value: 'Orange' },\n];\n\nexport const Default = Template.bind({});\nDefault.args = defaultArgs;\n\nexport const WithOption = Template.bind({});\nWithOption.args = { ...defaultArgs, label: 'Autocomplete using option model' };\n\nexport const MultipleSelection = Template.bind({});\nMultipleSelection.args = {\n  ...defaultArgs,\n  label: 'Autocomplete with multiple selection',\n  multiple: true,\n  value: ['Apple', 'Banana'],\n  options: customOptions,\n};\n\nexport const WithCustomOption = ({\n  ariaLabel,\n  clearable,\n  disabled,\n  dropdownMaxHeight,\n  dropdownZIndex,\n  disableCloseOnSelect,\n  errorText,\n  includeSearchIcon,\n  label,\n  multiple,\n  noResultsFoundText,\n  noResultsFoundSubtext,\n  placeholder,\n  readOnly,\n  required,\n  showNoResultsFoundMessage,\n  showOptionsOnFocus,\n  size,\n  value,\n}) => html`\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      value=${value}>\n      <li data-search-value=\"The Git Guru\" data-id=\"1\" style=\"padding: 8px\">\n        <div style=\"font-weight: bold\">The Git Guru</div>\n        <div style=\"font-size: 12px\">Lead DevOps Engineer</div>\n      </li>\n      <li data-search-value=\"Bob the Builder\" data-id=\"2\" style=\"padding: 8px\">\n        <div style=\"font-weight: bold\">Bob the Builder</div>\n        <div style=\"font-size: 12px\">Senior Construction Engineer</div>\n      </li>\n    </modus-autocomplete>\n  </div>\n`;\n\nWithCustomOption.args = {\n  ariaLabel: 'autocomplete',\n  clearable: false,\n  disabled: false,\n  dropdownMaxHeight: '300px',\n  dropdownZIndex: '1',\n  disableCloseOnSelect: false,\n  errorText: '',\n  includeSearchIcon: true,\n  label: 'Employee Search',\n  multiple: false,\n  noResultsFoundText: 'No results found',\n  noResultsFoundSubtext: 'Check spelling or try a different keyword',\n  placeholder: 'Search...',\n  readOnly: false,\n  required: false,\n  showNoResultsFoundMessage: true,\n  showOptionsOnFocus: false,\n  size: 'medium',\n  value: '',\n};\n\nexport const WithDynamicOptions = ({\n  ariaLabel,\n  clearable,\n  disabled,\n  dropdownMaxHeight,\n  dropdownZIndex,\n  disableCloseOnSelect,\n  errorText,\n  includeSearchIcon,\n  label,\n  loading,\n  multiple,\n  noResultsFoundText,\n  noResultsFoundSubtext,\n  placeholder,\n  readOnly,\n  required,\n  showNoResultsFoundMessage,\n  showOptionsOnFocus,\n  size,\n  value,\n}) => html`\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      id=\"dynamic-options\"\n      label=${label}\n      loading=${loading}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}>\n    </modus-autocomplete>\n  </div>\n  ${setDynamicOptions()}\n`;\nWithDynamicOptions.args = {\n  ariaLabel: 'autocomplete',\n  clearable: false,\n  disabled: false,\n  dropdownMaxHeight: '300px',\n  dropdownZIndex: '1',\n  disableCloseOnSelect: false,\n  errorText: '',\n  includeSearchIcon: true,\n  label: 'Dynamic Autocomplete',\n  loading: false,\n  multiple: false,\n  noResultsFoundText: 'No results found',\n  noResultsFoundSubtext: 'Check spelling or try a different keyword',\n  placeholder: 'Search...',\n  readOnly: false,\n  required: false,\n  showNoResultsFoundMessage: true,\n  showOptionsOnFocus: false,\n  size: 'medium',\n  value: '',\n};\nconst setDynamicOptions = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n        (function () {\n          const modusAutocomplete = document.querySelector('#dynamic-options');\n          if (modusAutocomplete) {\n            const options = [\n              { id: '0', value: 'Apple' },\n              { id: '1', value: 'Banana' },\n              { id: '2', value: 'Orange' },\n              { id: '3', value: 'Mango' },\n              { id: '4', value: 'Pineapple' },\n            ];\n            const dynamicOptions = [\n              { id: '5', value: 'Grapes' },\n              { id: '6', value: 'Watermelon' },\n              { id: '7', value: 'Strawberry' },\n              { id: '8', value: 'Blueberry' },\n              { id: '9', value: 'Raspberry' },\n              { id: '10', value: 'Blackberry' },\n              { id: '11', value: 'Cherry' },\n              { id: '12', value: 'Peach' },\n              { id: '13', value: 'Pear' },\n              { id: '14', value: 'Plum' },\n              { id: '15', value: 'Kiwi' },\n              { id: '16', value: 'Lemon' },\n              { id: '17', value: 'Lime' },\n              { id: '18', value: 'Papaya' },\n              { id: '19', value: 'Passion Fruit' },\n            ];\n            function getFilteredOptions(value) {\n              modusAutocomplete.loading = true;\n              return new Promise((resolve) => {\n                setTimeout(() => {\n                  const filteredOptions = [...options, ...dynamicOptions].filter((option) =>\n                    (option.value ?? option).toLowerCase().includes(value.toLowerCase())\n                  );\n                  resolve(filteredOptions);\n                  modusAutocomplete.loading = false;\n                }, 1500);\n              });\n            }\n            modusAutocomplete.options = options;\n            modusAutocomplete.filterOptions = getFilteredOptions;\n          }\n        }())\n  `;\n\n  return tag;\n};\n"
    },
    "modus-badge.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an accessible label for the badge, ensuring that screen readers can describe its purpose if a visible text label isn't available. When set, its value is applied as the component's aria-label attribute; if not provided, the attribute is omitted, keeping the markup clean and accessible."
        },
        {
          "name": "color",
          "comment": "// The 'color' prop lets users specify the badge's color by selecting one of the predefined options \n// ('danger', 'dark', 'primary', 'secondary', 'success', 'tertiary', or 'warning'). This prop determines \n// which CSS class is applied (via the lookup in classByColor), hence controlling the badge's visual styling."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop lets users choose the badge's visual size ('small', 'medium', or 'large'). It defaults to 'medium' and is used to determine which CSS class to apply (via the classBySize map) to style the badge appropriately."
        },
        {
          "name": "type",
          "comment": "// The 'type' prop determines which variant of badge is rendered\u2014such as a counter badge, a default badge, or a text badge\u2014by selecting the appropriate CSS class and styling for the component."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-badge-storybook-docs.mdx';\n\nexport default {\n  title: 'Components/Badge',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The badge's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    color: {\n      options: ['danger', 'dark', 'primary', 'secondary', 'success', 'tertiary', 'warning'],\n      type: 'select',\n      description: 'The color of the badge',\n      table: {\n        defaultValue: { summary: `'primary'` },\n        type: {\n          summary: `'danger' | 'dark' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning'`,\n        },\n      },\n    },\n    size: {\n      options: ['small', 'medium', 'large'],\n      type: 'select',\n      description: 'The size of the badge',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'small' | 'medium' | 'large'` },\n      },\n    },\n    type: {\n      options: ['counter', 'default', 'text'],\n      type: 'select',\n      description: 'The type of the badge',\n      table: {\n        defaultValue: { summary: `'default'` },\n        type: { summary: `'counter' | 'default' | 'text'` },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\n// TODO - Figure how to work with slots.\nexport const Default = ({ ariaLabel, color, size, type }) => html`\n  <modus-badge aria-label=${ariaLabel} color=${color} size=${size} type=${type}> Default </modus-badge>\n`;\nDefault.args = {\n  ariaLabel: '',\n  color: 'primary',\n  size: 'medium',\n  type: 'default',\n};\n\nexport const Counter = ({ ariaLabel, color, size, type }) => html`\n  <modus-badge aria-label=${ariaLabel} color=${color} size=${size} type=${type}> 12 </modus-badge>\n`;\nCounter.args = {\n  ariaLabel: '',\n  color: 'primary',\n  size: 'medium',\n  type: 'counter',\n};\n\nexport const Text = ({ ariaLabel, color, size, type }) => html`\n  <modus-badge aria-label=${ariaLabel} color=${color} size=${size} type=${type}> Text </modus-badge>\n`;\nText.args = { ariaLabel: '', color: 'primary', size: 'medium', type: 'text' };\n"
    },
    "modus-breadcrumb.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The \"ariaLabel\" prop allows the developer to specify an accessible label for the breadcrumb navigation.\n// When provided, it sets the \"aria-label\" attribute on the <nav> element to make the breadcrumb region understandable\n// for assistive technologies like screen readers. If no label is given, the nav element renders without an explicit aria-label."
        },
        {
          "name": "crumbs",
          "comment": "// 'crumbs' is an array of breadcrumb objects (each with an 'id' and 'display' text) that the component uses to dynamically generate the navigation links. Each crumb represents a step in the breadcrumb trail, where earlier crumbs are rendered as clickable links (emitting a 'crumbClick' event) and the final crumb is displayed as the current page indicator."
        },
        {
          "name": "underlineLinks",
          "comment": "// The 'underlineLinks' prop is an optional boolean flag that, when true, applies an 'underline' CSS class to breadcrumb links to display them with an underline style."
        }
      ],
      "events": [
        {
          "name": "crumbClick",
          "comment": "// The 'crumbClick' event is an EventEmitter that fires when a breadcrumb (except the last one) is clicked. It emits the corresponding Crumb object, allowing parent components to respond to breadcrumb navigation actions, such as updating the view or tracking user interactions."
        }
      ],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-breadcrumb-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Breadcrumb',\n  argTypes: {\n    underlineLinks: {\n      name: 'underlineLinks',\n      description: 'A flag that controls the display of underline',\n      type: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    actions: {\n      handles: ['crumbClick'],\n    },\n    controls: {\n      disabled: false,\n      expanded: true,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst defaultCrumbs = [\n  { id: '1', display: 'Crumb 1' },\n  { id: '2', display: 'Crumb 2' },\n  { id: '3', display: 'Crumb 3' },\n  { id: '4', display: 'Crumb 4' },\n];\n\nconst Template = ({ underlineLinks }) => html`\n  <modus-breadcrumb underline-links=${underlineLinks} .crumbs=${defaultCrumbs}></modus-breadcrumb>\n`;\nexport const Default = Template.bind({});\nDefault.args = { underlineLinks: false };\n\nexport const Underline = Template.bind({});\nUnderline.args = { underlineLinks: true };\n"
    },
    "modus-button.tsx": {
      "props": [
        {
          "name": "ariaDisabled",
          "comment": "// The 'ariaDisabled' prop allows developers to manually set the aria-disabled attribute on the button element for accessibility purposes. If provided, it overrides the default behavior which sets aria-disabled to \"true\" when the button is disabled."
        },
        {
          "name": "ariaLabel",
          "comment": "/* \n  The 'ariaLabel' property is an optional prop that lets you specify a custom label for the button, intended to improve accessibility.\n  When provided, it sets the button's 'aria-label' attribute to describe its purpose for assistive technologies.\n  Note: If the button is a critical action (i.e., a danger button with a fill style that requires a press-and-hold confirmation), \n  the component overrides this value with a default aria-label that communicates the critical action's instructions.\n*/"
        },
        {
          "name": "iconOnly",
          "comment": "// The 'iconOnly' prop specifies the name of an icon to render an icon-only button without any text content. It allows the component to display a button that consists solely of an icon by rendering the button using the renderIconOnly() method and applying an 'icon-only' CSS class."
        },
        {
          "name": "leftIcon",
          "comment": "// The 'leftIcon' prop accepts an icon name that, when provided, will render an icon to the left of the button's text. This is done by invoking the ModusIconMap component within the renderIconWithText() method, allowing the button to display a decorative or informative icon alongside its label."
        },
        {
          "name": "rightIcon",
          "comment": "// The 'rightIcon' prop allows a developer to specify an icon to be displayed on the right side of the button text. When provided (and if no caret is requested via the 'showCaret' prop), its value is used to render an icon via the ModusIconMap component next to the button label, adding visual context or enhancing the button's appearance."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop determines the dimensions of the button by applying a corresponding CSS class.\n// It accepts values such as 'small', 'medium', and 'large' (with 'medium' being the default),\n// which control size-related styling via a mapping defined in the component."
        },
        {
          "name": "showCaret",
          "comment": "// The \"showCaret\" prop is an optional boolean that, when true, displays a caret icon \n// on the right side of the button. This visual cue often indicates that the button \n// triggers a dropdown or additional actions/options."
        },
        {
          "name": "type",
          "comment": "// The 'type' prop specifies the button's HTML type (e.g., \"button\", \"submit\", \"toggle\") and governs its behavior.\n// For instance, when set to \"toggle\", clicking the button not only emits the click event but also toggles\n// the component's active state (isActive). Otherwise, it functions as a standard button."
        },
        {
          "name": "criticalAction",
          "comment": "// The \"criticalAction\" prop designates that the button represents a critical or potentially destructive action (typically a danger action that requires deliberate user confirmation). When set to true\u2014and when combined with a \"danger\" color and a \"fill\" style\u2014the button initiates a progress animation (triggered by press/hold events) before ultimately executing its action, helping to prevent accidental activations."
        }
      ],
      "events": [
        {
          "name": "buttonClick",
          "comment": "// The 'buttonClick' event is an emitter that notifies parent components when the button is activated. \n// It is fired on a normal click (when the button isn't disabled or in critical action mode) and also\n// when a critical action (typically a danger action requiring a press-and-hold confirmation) is fully confirmed.\n// This allows external handlers to react to the button activation accordingly without directly handling internal state changes."
        }
      ],
      "slots": [],
      "documentation": "import { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-button-storybook-docs.mdx';\n\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Button',\n  argTypes: {\n    ariaDisabled: {\n      name: 'aria-disabled',\n      description: \"The button's aria-disabled state\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The button's aria-label\",\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n    },\n    buttonStyle: {\n      name: 'button-style',\n      options: ['borderless', 'fill', 'outline'],\n      type: 'select',\n      description: 'The style of the button',\n      table: {\n        defaultValue: { summary: `'fill'` },\n        type: { summary: `'borderless' | 'fill' | 'outline'` },\n      },\n    },\n    color: {\n      options: ['danger', 'primary', 'secondary', 'tertiary', 'special'],\n      type: 'select',\n      description: 'The color of the button',\n      table: {\n        defaultValue: { summary: `'primary'` },\n        type: { summary: `'danger' | 'primary' | 'secondary' | 'tertiary' | 'special'` },\n      },\n    },\n    criticalAction: {\n      name: 'critical-action',\n      description: 'Enable the progress animation for danger button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['small', 'medium', 'large'],\n      type: 'select',\n      description: 'The size of the button',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'small' | 'medium' | 'large'` },\n      },\n    },\n    showCaret: {\n      description: 'Shows a caret icon right side of the button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    iconOnly: {\n      name: 'icon-only',\n      description: 'Takes the icon name and renders an icon-only button',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    leftIcon: {\n      name: 'left-icon',\n      description: 'Takes the icon name and shows the icon aligned to the left of the button text',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    rightIcon: {\n      name: 'right-icon',\n      description: 'Takes the icon name and shows the icon aligned to the right of the button text',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'alpha' },\n    actions: {\n      handles: ['buttonClick modus-button'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst DefaultTemplate = ({\n  ariaDisabled,\n  ariaLabel,\n  buttonStyle,\n  color,\n  criticalAction,\n  disabled,\n  size,\n  leftIcon,\n  rightIcon,\n  iconOnly,\n  showCaret,\n  label,\n}) => html`\n  <modus-button\n    aria-disabled=${ariaDisabled}\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    ?disabled=${disabled}\n    critical-action=${criticalAction}\n    size=${size}\n    left-icon=${leftIcon}\n    right-icon=${rightIcon}\n    icon-only=${iconOnly}\n    show-caret=${showCaret}>\n    ${label}\n  </modus-button>\n`;\n\nconst DefaultTemplateArgs = {\n  ariaDisabled: 'false',\n  ariaLabel: '',\n  buttonStyle: 'fill',\n  color: 'primary',\n  disabled: false,\n  size: 'medium',\n  leftIcon: '',\n  rightIcon: '',\n  iconOnly: '',\n  showCaret: false,\n  label: 'Default',\n  criticalAction: false,\n};\n\nexport const Default = DefaultTemplate.bind({});\nDefault.args = { ...DefaultTemplateArgs };\n\nexport const Borderless = DefaultTemplate.bind({});\nBorderless.args = { ...DefaultTemplateArgs, buttonStyle: 'borderless', label: 'Borderless' };\n\nexport const Outline = DefaultTemplate.bind({});\nOutline.args = { ...DefaultTemplateArgs, buttonStyle: 'outline', label: 'Outline' };\n\nexport const IconWithText = DefaultTemplate.bind({});\nIconWithText.args = { ...DefaultTemplateArgs, label: 'Default', leftIcon: 'notifications' };\n\nexport const IconOnly = DefaultTemplate.bind({});\nIconOnly.args = {\n  ...DefaultTemplateArgs,\n  ariaLabel: 'Notifications',\n  ariaDisabled: false,\n  label: '',\n  buttonStyle: 'borderless',\n  color: 'secondary',\n  size: 'large',\n  iconOnly: 'notifications',\n  showCaret: false,\n};\n\nexport const WithCaret = DefaultTemplate.bind({});\nWithCaret.args = { ...DefaultTemplateArgs, label: 'Primary', color: 'primary', disabled: false, showCaret: true };\n\nexport const SpecialButton = DefaultTemplate.bind({});\nSpecialButton.args = { ...DefaultTemplateArgs, label: 'Button', color: 'special' };\n\nexport const DangerButton = DefaultTemplate.bind({});\nDangerButton.args = { ...DefaultTemplateArgs, label: 'Danger', color: 'danger' };\n"
    },
    "modus-button-group.tsx": {
      "props": [
        {
          "name": "ariaDisabled",
          "comment": "// The 'ariaDisabled' prop lets users specify an ARIA disabled state for accessibility purposes. It explicitly sets the aria-disabled attribute on the button group and is also passed to child buttons to ensure consistent accessibility behavior, even when the disabled property is not actively set."
        },
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an accessible name for the button group.\n// It is used to set the aria-label attribute on the host element, which assistive technologies\n// (like screen readers) utilize to describe the component to users."
        },
        {
          "name": "buttonStyle",
          "comment": "/**\n * The \"buttonStyle\" prop determines the style variant (e.g., \"outline\", \"solid\") applied to all buttons within the group.\n * When the property changes, the component updates each child button's visual style accordingly.\n */"
        },
        {
          "name": "color",
          "comment": "// The 'color' prop defines the visual color theme for all buttons in the group. Its value (defaulting to 'primary')\n// is passed down to each child button, ensuring they share a consistent color style as defined by the component's design system."
        },
        {
          "name": "selectionType",
          "comment": "// The 'selectionType' prop determines how button selections are managed within the group. When set to a single selection type, clicking a button activates it while deactivating any previously active button (i.e., only one button can be selected at a time). When set to a multiple selection type, clicking buttons toggles their active state, allowing multiple buttons to be selected simultaneously. If it is set to the default type, no internal selection logic is applied."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop defines the size of each button in the group (e.g., 'medium').\n// It is used to configure each child button's dimensions and appearance,\n// triggering a re-render of the buttons via the watch decorator when its value changes."
        }
      ],
      "events": [
        {
          "name": "buttonGroupClick",
          "comment": "// The 'buttonGroupClick' event is emitted whenever a button within the group is clicked.\n// After processing the click and updating the selection state (whether in single- or multi-select mode),\n// the event emits an object containing the clicked button reference and a flag indicating if it is currently selected.\n// This allows parent components to conveniently react to user interactions within the button group."
        },
        {
          "name": "buttonSelectionChange",
          "comment": "// The 'buttonSelectionChange' event is emitted whenever the selection state of the button group changes. It provides an array of currently selected buttons so that external consumers can react accordingly (e.g., updating state or triggering side effects) based on which buttons are active."
        }
      ],
      "slots": [],
      "documentation": "import { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-button-group-storybook-docs.mdx';\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nexport default {\n  title: 'Components/Button Group',\n  argTypes: {\n    ariaDisabled: {\n      name: 'aria-disabled',\n      description: \"The button group's aria-disabled state\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The button's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    buttonStyle: {\n      name: 'button-style',\n      options: ['borderless', 'fill', 'outline'],\n      type: 'select',\n      description: 'The style of the buttons in group, not all colors are supported for each button style',\n      table: {\n        defaultValue: { summary: `'outline'` },\n        type: { summary: `'borderless' | 'fill' | 'outline'` },\n      },\n    },\n    color: {\n      options: ['danger', 'primary', 'secondary', 'tertiary'],\n      type: 'select',\n      description: 'The color of the buttons in group, not all button styles are supported for each color',\n      table: {\n        defaultValue: { summary: `'primary'` },\n        type: { summary: `'danger' | 'primary' | 'secondary' | 'tertiary'` },\n      },\n    },\n    disabled: {\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    selectionType: {\n      name: 'selection-type',\n      description: 'The type of selection',\n      options: ['none', 'single', 'multiple'],\n      type: 'select',\n      table: {\n        defaultValue: { summary: `'none'` },\n        type: { summary: `'none' | 'single' | 'multiple'` },\n      },\n    },\n    size: {\n      name: 'size',\n      description: 'The size of the buttons',\n      options: ['small', 'medium', 'large'],\n      type: 'select',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'small' | 'medium' | 'large'` },\n      },\n    },\n  },\n\n  parameters: {\n    controls: { expanded: true, sort: 'alpha' },\n    actions: {\n      handles: ['buttonGroupClick modus-button-group', 'buttonSelectionChange modus-button-group'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\nconst DefaultTemplate = ({ ariaLabel, buttonStyle, color, disabled, selectionType, size }) => html`\n  <modus-button-group\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    .disabled=${disabled}\n    selection-type=${selectionType}\n    size=${size}>\n    <modus-button>Button 1</modus-button>\n    <modus-button>Button 2</modus-button>\n    <modus-button>Button 3</modus-button>\n  </modus-button-group>\n`;\nconst SingleSelectionTemplate = ({ ariaLabel, buttonStyle, color, disabled, selectionType, size }) => html`\n  <modus-button-group\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    .disabled=${disabled}\n    selection-type=${selectionType}\n    size=${size}>\n    <modus-button selected>Button 1</modus-button>\n    <modus-button>Button 2</modus-button>\n    <modus-button>Button 3</modus-button>\n  </modus-button-group>\n`;\nconst MultipleSelectionTemplate = ({ ariaLabel, buttonStyle, color, disabled, selectionType, size }) => html`\n  <modus-button-group\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    .disabled=${disabled}\n    selection-type=${selectionType}\n    size=${size}>\n    <modus-button selected>Button 1</modus-button>\n    <modus-button selected>Button 2</modus-button>\n    <modus-button>Button 3</modus-button>\n  </modus-button-group>\n`;\nconst DefaultArgs = {\n  ariaDisabled: '',\n  ariaLabel: '',\n  disabled: false,\n  selectionType: 'none',\n  size: 'medium',\n  color: 'primary',\n  buttonStyle: 'outline',\n};\nexport const Default = DefaultTemplate.bind({});\nDefault.args = { ...DefaultArgs };\n\nexport const SingleSelection = SingleSelectionTemplate.bind({});\nSingleSelection.args = { ...DefaultArgs, selectionType: 'single' };\n\nexport const MultipleSelection = MultipleSelectionTemplate.bind({});\nMultipleSelection.args = { ...DefaultArgs, selectionType: 'multiple' };\n"
    },
    "modus-card.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop allows developers to add an accessible label to the card for assistive technologies, enhancing the semantic meaning and accessibility of the element. If specified, it sets the 'aria-label' attribute on the article element, otherwise no label is applied."
        },
        {
          "name": "borderRadius",
          "comment": "// borderRadius allows users to customize the card's corner rounding by applying a specific CSS \"border-radius\" value to the card. If provided, it directly sets the corner curvature through inline styles."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-card-storybook-docs.mdx';\nimport { html } from 'lit-html';\n\nexport default {\n  title: 'Components/Card',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The card's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    height: {\n      height: 'The height of the card',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n    },\n    width: {\n      description: 'The width of the card',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n    },\n    borderRadius: {\n      description: 'The border radius of the card',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n    },\n    showCardBorder: {\n      description: 'A flag that controls the display of border',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    showShadowOnHover: {\n      description: 'A flag that controls the display of shadow box when the element is hovered',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      page: docs,\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\nconst Template = ({ ariaLabel, height, width, borderRadius, showCardBorder, showShadowOnHover }) => html`\n  <modus-card\n    aria-label=${ariaLabel}\n    height=${height}\n    width=${width}\n    border-radius=${borderRadius}\n    show-card-border=${showCardBorder}\n    show-shadow-on-hover=${showShadowOnHover}>\n    <!-- Render anything here -->\n    <div style=\"padding:10px\">\n      <h4>Card title</h4>\n      <h5>Card subtitle</h5>\n      <p>Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n      <modus-button color=\"primary\">Go somewhere</modus-button>\n    </div>\n  </modus-card>\n`;\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  height: '270px',\n  width: '250px',\n  borderRadius: '4px',\n  showCardBorder: true,\n  showShadowOnHover: true,\n};\n"
    },
    "modus-checkbox.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// 'ariaLabel' provides an accessible, non-visible label for the checkbox input. When specified, its value is set as the input\u2019s aria-label attribute to aid screen readers in identifying the checkbox, especially when a visible label is absent or insufficient."
        },
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop determines whether the checkbox is interactive. When set to true, it prevents user clicks, keyboard events, and focuses on the checkbox. It also sets the appropriate styling and accessibility attributes (such as aria-disabled) to indicate that the checkbox is not available for interaction."
        },
        {
          "name": "label",
          "comment": "// 'label' is a string prop that, if provided, defines the text to display beside the checkbox.\n// When set, it renders a corresponding <label> element linked to the checkbox input,\n// offering users a clear description of the checkbox's purpose."
        },
        {
          "name": "stopPropagation",
          "comment": "// The 'stopPropagation' prop allows users of the component to opt-in to preventing the checkbox click\n// event from bubbling up and triggering any parent handlers. When set to true, the component calls\n// event.stopPropagation() and event.preventDefault() in its click event handler, thereby isolating the\n// event and preventing unwanted side effects in parent components or the global scope."
        },
        {
          "name": "size",
          "comment": "// 'size' determines the visual size of the checkbox.\n// It accepts either 'small' or 'medium' (defaulting to 'medium') and applies corresponding CSS classes \n// to style both the checkbox input and its label for the desired size variant."
        }
      ],
      "events": [
        {
          "name": "checkboxClick",
          "comment": "// The 'checkboxClick' event is a custom event emitted every time the checkbox is clicked or activated\n// via keyboard (Enter or Space). It notifies parent components of the updated \"checked\" state (true/false)\n// after toggling the checkbox. This event can be used to react to user interaction with the checkbox,\n// allowing external components to update their state or trigger side effects based on the new value."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-chip.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop allows developers to provide a custom accessible label for the chip's button,\n// enhancing screen reader support by describing the chip's purpose when the visible text might not be enough."
        },
        {
          "name": "chipStyle",
          "comment": "// The 'chipStyle' prop controls the visual appearance of the chip, allowing it to be rendered with either an 'outline' or a 'solid' style. Based on its value, the component maps the prop to corresponding CSS classes (i.e., 'style-outline' for 'outline' and 'style-solid' for 'solid') to apply the appropriate styling."
        },
        {
          "name": "imageUrl",
          "comment": "// The \"imageUrl\" prop holds a string URL for an image to be displayed on the chip. When provided, the component renders an <img> element using that URL, replacing the default checkmark icon if \"showCheckmark\" is false, thereby allowing custom iconography within the chip."
        },
        {
          "name": "advancedChip",
          "comment": "The prop advancedChip is used to switch the chip into an \"advanced\" state. When advancedChip is true, the component applies a custom border radius for styling, renders an additional dropdown caret icon (via ModusIconMap), and uses a different close icon (IconClose) instead of IconRemove. This allows the chip to visually indicate that it has extra functionality (such as a dropdown) compared to a basic chip.\n\nExample concise comment:\n/*\n * advancedChip prop:\n * - When true, the chip applies a custom border-radius (8px), displays a dropdown caret icon,\n *   and uses an alternative close icon (IconClose) to signal advanced functionality.\n */"
        },
        {
          "name": "size",
          "comment": "// The 'size' prop defines the visual size of the chip component (either 'medium' or 'small').\n// It is used to select and apply the corresponding CSS class from the size mapping (classBySize)\n// so that the chip is styled appropriately based on the chosen size setting."
        },
        {
          "name": "value",
          "comment": "// The 'value' prop holds the text or label that appears inside the chip, representing its descriptive content visible to the user."
        },
        {
          "name": "chipId",
          "comment": "// The chipId prop allows developers to assign a unique identifier to the chip's root HTML element (the button).\n// It is used to set the element's id attribute, which can be helpful for targeted styling, accessibility, and testing purposes."
        },
        {
          "name": "maxWidth",
          "comment": "// The 'maxWidth' prop defines the maximum width for the chip\u2019s text area.\n// It is applied inline to the text container (<span>) as a CSS 'max-width' property.\n// This ensures that if the text exceeds the specified width, it will be truncated with an ellipsis."
        }
      ],
      "events": [
        {
          "name": "chipClick",
          "comment": "// The 'chipClick' event is emitted when the chip is activated\u2014either by a mouse click or key (Enter/Space) press. This allows parent components to listen for and handle chip activation events, such as triggering actions or updating state based on user interaction."
        },
        {
          "name": "closeClick",
          "comment": "// The 'closeClick' event is emitted when the chip\u2019s close action is triggered\u2014either by clicking the close icon or pressing the Escape key (if applicable). This lets parent components listen for and handle the chip\u2019s removal or other related close actions."
        }
      ],
      "slots": [],
      "documentation": "import { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-chip-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Chip',\n  argTypes: {\n    active: {\n      name: 'active',\n      description: 'Whether the chip is active',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The chip's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    advancedChip: {\n      name: 'advanced-chip',\n      description: 'Whether the chip is advanced',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    chipStyle: {\n      name: 'chip-style',\n      options: ['solid', 'outline'],\n      type: 'select',\n      description: 'The style of the chip',\n      table: {\n        defaultValue: { summary: `'solid'` },\n        type: { summary: `'solid' | 'outline'` },\n      },\n    },\n    disabled: {\n      description: 'Whether the chip is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    hasError: {\n      name: 'has-error',\n      description: 'Whether the chip has an error',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    imageUrl: {\n      name: 'image-url',\n      description: \"The chip's image URL\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    showCheckmark: {\n      name: 'show-checkmark',\n      description: 'Whether to show the checkmark',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    showClose: {\n      name: 'show-close',\n      description: 'Whether to show the close icon',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'small'],\n      type: 'select',\n      description: 'The size of the chip',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `medium' | 'small'` },\n      },\n    },\n    value: {\n      description: \"The chip's value\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxWidth: {\n      description: \"Chip text's maximum width\",\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: '100px' },\n      },\n    },\n    chipId: {\n      description: \"This chip's id will create much more visibility for testing\",\n      table: {\n        type: { summary: `string` },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true },\n    actions: {\n      handles: ['chipClick', 'closeClick'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nexport const Default = ({\n  active,\n  ariaLabel,\n  advancedChip,\n  chipStyle,\n  disabled,\n  hasError,\n  imageUrl,\n  maxWidth,\n  showCheckmark,\n  showClose,\n  size,\n  value,\n  chipId,\n}) => html`\n  <modus-chip\n    active=${active}\n    aria-label=${ariaLabel}\n    ?advanced-chip=${advancedChip}\n    chip-style=${chipStyle}\n    ?disabled=${disabled}\n    has-error=${hasError}\n    image-url=${imageUrl}\n    max-width=${maxWidth}\n    show-checkmark=${showCheckmark}\n    show-close=${showClose}\n    size=${size}\n    value=${value}\n    chip-id=${chipId}>\n  </modus-chip>\n`;\nDefault.args = {\n  active: false,\n  ariaLabel: '',\n  advancedChip: false,\n  chipStyle: 'solid',\n  disabled: false,\n  hasError: false,\n  imageUrl: 'https://randomuser.me/api/portraits/lego/1.jpg',\n  maxWidth: '100px',\n  showCheckmark: false,\n  showClose: false,\n  size: 'medium',\n  value: 'Bryan',\n  chipId: '',\n};\n\nexport const Outline = ({\n  active,\n  ariaLabel,\n  advancedChip,\n  chipStyle,\n  disabled,\n  hasError,\n  imageUrl,\n  maxWidth,\n  showCheckmark,\n  showClose,\n  size,\n  value,\n}) => html`\n  <modus-chip\n    active=${active}\n    aria-label=${ariaLabel}\n    ?advanced-chip=${advancedChip}\n    chip-style=${chipStyle}\n    ?disabled=${disabled}\n    has-error=${hasError}\n    image-url=${imageUrl}\n    max-width=${maxWidth}\n    show-checkmark=${showCheckmark}\n    show-close=${showClose}\n    size=${size}\n    value=${value}>\n  </modus-chip>\n`;\nOutline.args = {\n  active: false,\n  ariaLabel: '',\n  advancedChip: false,\n  chipStyle: 'outline',\n  disabled: false,\n  hasError: false,\n  imageUrl: 'https://randomuser.me/api/portraits/lego/1.jpg',\n  maxWidth: '100px',\n  showCheckmark: false,\n  showClose: false,\n  size: 'medium',\n  value: 'Bryan',\n};\n\nexport const AdvancedChip = ({\n  active,\n  ariaLabel,\n  advancedChip,\n  chipStyle,\n  disabled,\n  hasError,\n  imageUrl,\n  maxWidth,\n  showCheckmark,\n  showClose,\n  size,\n  value,\n}) => html`\n  <modus-dropdown label=\"Dropdown\" ?disabled=${disabled} id=\"dropdown\" toggle-element-id=\"toggleElement\" animate-list>\n    <modus-chip\n      id=\"toggleElement\"\n      slot=\"dropdownToggle\"\n      active=${active}\n      aria-label=${ariaLabel}\n      ?advanced-chip=${advancedChip}\n      chip-style=${chipStyle}\n      ?disabled=${disabled}\n      has-error=${hasError}\n      image-url=${imageUrl}\n      max-width=${maxWidth}\n      show-checkmark=${showCheckmark}\n      show-close=${showClose}\n      size=${size}\n      value=${value}>\n    </modus-chip>\n    <modus-list slot=\"dropdownList\">\n      <modus-list-item value=\"1\" disabled borderless>Select Process</modus-list-item>\n      <modus-list-item value=\"2\" borderless>First Option (FO)</modus-list-item>\n      <modus-list-item value=\"3\" borderless>Second Option (SO)</modus-list-item>\n      <modus-list-item value=\"4\" borderless>Next Option (NO)</modus-list-item>\n      <modus-list-item value=\"4\" borderless>Another Option (AO)</modus-list-item>\n    </modus-list>\n  </modus-dropdown>\n\n  ${setAdvancedChip()}\n`;\nAdvancedChip.args = {\n  active: false,\n  ariaLabel: '',\n  advancedChip: true,\n  chipStyle: 'outline',\n  disabled: false,\n  hasError: false,\n  imageUrl: '',\n  maxWidth: '',\n  showCheckmark: false,\n  showClose: false,\n  size: 'medium',\n  value: 'Processes Type',\n};\n\nconst setAdvancedChip = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n      const chip = document.querySelector('#toggleElement');\n      const dropdown = document.querySelector('modus-dropdown');\n      const list = document.querySelector('modus-list');\n      let itemSelected = false;\n      dropdown.addEventListener('dropdownClose', (e) => {\n        console.log('dropdownClose');\n        if(!itemSelected) {\n          chip.active = false;\n        }\n      });\n      chip.addEventListener('chipClick', (e) => {\n        console.log('chipClick');\n        chip.active = true;\n        dropdown.toggleDropdown = true;\n      });\n      chip.addEventListener('closeClick', (e) => {\n        console.log('chipClose');\n        chip.value = 'Processes Type';\n        chip.active = false;\n        chip.showClose = false;\n        dropdown.toggleDropdown = false;\n\n      });\n      list.addEventListener('itemClick', (e) => {\n        console.log('listItem', e.srcElement.innerText);\n        chip.value = 'Processes Type: ' + e.srcElement.innerText;\n        chip.showClose = true;\n        chip.active = true;\n        itemSelected = true;\n      });\n  `;\n  return tag;\n};\n"
    },
    "modus-tree-view.tsx": {
      "props": [
        {
          "name": "checkboxSelection",
          "comment": "// The \"checkboxSelection\" prop enables the appearance and functionality of checkboxes on each tree item. When set to true, each item in the tree view will render with a checkbox, allowing users to select items via checking. This prop is used in the options passed to each tree item (through getTreeViewItemOptions) so that they can render and manage checkbox states accordingly."
        },
        {
          "name": "enableReordering",
          "comment": "// The enableReordering prop is used to toggle the drag-and-drop functionality for the tree items.\n// When set to true, it marks all child tree items as draggable, allowing users to reorder them\n// via drag events. This property is forwarded to the tree item options as the 'draggable' flag\n// so that each item's behavior can be adjusted accordingly."
        },
        {
          "name": "multiCheckboxSelection",
          "comment": "// The \"multiCheckboxSelection\" prop enables the component to support selecting multiple tree items via checkboxes at the same time. When set to true, checking or unchecking a checkbox not only affects the selected item but also syncs descendant and ancestor items accordingly, allowing for bulk checkbox operations."
        },
        {
          "name": "multiSelection",
          "comment": "// The 'multiSelection' prop controls whether users can select multiple tree items at the same time.\n// When set to true, the component allows selection of more than one item (using modifier keys like Shift, Ctrl, or Meta),\n// enabling features such as range selection. When false, only a single item can be selected at any one time."
        },
        {
          "name": "size",
          "comment": "// 'size' defines the default visual size for each tree item in the tree view.\n// It accepts one of three values: 'condensed', 'large', or 'standard' (default).\n// This prop is used when initializing tree view items via getTreeViewItemOptions(),\n// allowing the component to adjust the items' appearance based on the selected size."
        },
        {
          "name": "borderless",
          "comment": "// The borderless prop is an optional boolean flag that controls whether the tree view and its tree items are rendered without borders. When set to true, the component and each tree item will omit border styling (as specified in their SCSS/styling),\n// creating a cleaner, less \"boxed\" appearance. This flag is passed via the getTreeViewItemOptions method to ensure consistent styling across tree items."
        }
      ],
      "events": [
        {
          "name": "itemDrop",
          "comment": "// Fired when a dragged tree item is successfully dropped onto a valid target.\n// The event carries an object mapping each tree item\u2019s unique ID to its associated details,\n// allowing parent components or consumers to update or react to the new tree structure (i.e. reordering)\n// as a result of the drag-and-drop operation."
        },
        {
          "name": "itemSelectionChange",
          "comment": "// itemSelectionChange is emitted whenever a tree item's selection state changes (i.e., an item is selected or deselected). It notifies any listening components with details (such as the nodeId and whether it is selected), allowing outside logic to react accordingly or keep external state in sync with the tree view\u2019s selection changes."
        },
        {
          "name": "itemActionClick",
          "comment": "// The 'itemActionClick' event is emitted when an action is triggered (e.g., a button click) within any tree item.\n// It packages both the action's identifier and the corresponding tree item's nodeId, allowing parent components or consumers\n// to listen for and respond to specific actions initiated within the tree view items."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-tree-view-item.tsx": {
      "props": [
        {
          "name": "disabled",
          "comment": "// The \"disabled\" prop determines whether the tree item is interactive or not. When true, it prevents user interactions by disabling event handlers, updates the component\u2019s appearance (e.g., applying a \"disabled\" CSS class and setting \"aria-disabled\"), and notifies the tree's root (via options) that the item is disabled, ensuring consistency in state management."
        },
        {
          "name": "isLastChild",
          "comment": "// The \"isLastChild\" prop indicates whether the tree view item is the last child in its parent's list.\n// It is used in the render() method to conditionally apply a CSS class (\"is-last-child\") when the item is not expanded,\n// allowing for special styling (e.g., adjusting borders or spacing) for the last item in the tree."
        }
      ],
      "events": [
        {
          "name": "checkboxClick",
          "comment": "// The 'checkboxClick' event is emitted when the tree item's checkbox is clicked. It notifies the parent or managing component that the checkbox\u2019s state has been toggled, enabling the overall tree view to update selection state accordingly."
        },
        {
          "name": "itemLabelChange",
          "comment": "// The 'itemLabelChange' event is emitted when the user finishes editing the tree item\u2019s label (for example, pressing Enter in edit mode).\n// It sends the updated label value to allow parent components or external listeners to synchronize changes or trigger additional logic."
        },
        {
          "name": "itemClick",
          "comment": "// The 'itemClick' event is emitted when a tree item is clicked (or activated via keyboard), informing parent components or listeners that the item was interacted with. The event payload is a boolean indicating the item's new selection state (as determined by the tree view's internal selection logic)."
        },
        {
          "name": "itemSelectionChange",
          "comment": "// 'itemSelectionChange' is emitted when a tree item's selection state changes (typically after a user clicks it).\n// The event payload includes an object with 'nodeId' (the unique identifier for the item) and 'isSelected' (a boolean indicating the current selection state).\n// This allows the parent component or any external listener to update the overall tree selection accordingly."
        },
        {
          "name": "itemExpandToggle",
          "comment": "// The 'itemExpandToggle' event is emitted whenever the tree item's expand/collapse action is triggered.\n// It informs parent or listening components that the item's expansion state has changed (true for expanded, false for collapsed),\n// allowing them to update their state or UI accordingly."
        },
        {
          "name": "itemAdded",
          "comment": "// The 'itemAdded' event is emitted during the component's initialization (in componentWillLoad) to notify the parent or root tree that a new tree item has been added. This allows the parent to register the item (e.g., for drag-and-drop or selection management) by receiving a reference to the tree item\u2019s DOM element."
        },
        {
          "name": "actionClick",
          "comment": "// The 'actionClick' event is fired whenever an action button inside the tree item is clicked.\n// It emits an object containing the actionId from the clicked action, allowing parent components\n// or consumers of this component to handle specific action events accordingly."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-data-table.tsx": {
      "props": [],
      "events": [
        {
          "name": "cellLinkClick",
          "comment": "// The 'cellLinkClick' event is triggered when a table cell that contains hyperlink content is clicked. It emits the data associated with that link (of type ModusDataTableCellLink), allowing parent components or consumers to handle the click event (for example, to navigate or show more details) as needed."
        },
        {
          "name": "rowDoubleClick",
          "comment": "// The 'rowDoubleClick' event is emitted when a user double-clicks on a table row. It sends the unique row identifier (string) so that parent components or consumers can react to the double-click action (for example, opening a detailed view for that row)."
        },
        {
          "name": "selection",
          "comment": "// The \"selection\" event is emitted whenever the row selection state changes (e.g., when a user clicks a checkbox or row). It sends an array of the currently selected row IDs, so that parent components can react to which rows are selected."
        },
        {
          "name": "sort",
          "comment": "// The 'sort' event notifies consumers when a column sort is triggered. It emits the updated sort state,\n// including the column identifier and sort direction (asc, desc, or none), so that the parent or server-side logic\n// can handle or update the sorting behavior accordingly."
        },
        {
          "name": "rowActionClick",
          "comment": "// The 'rowActionClick' event is emitted when a user clicks on a row action within the table. It sends an object containing the clicked action's ID and the corresponding row's ID, allowing consumers of the component to handle custom row action logic based on the user's selection."
        }
      ],
      "slots": [],
      "documentation": "import { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-data-table-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Data Table',\n  argTypes: {},\n  parameters: {\n    controls: { disable: true, expanded: true, sort: 'alpha' },\n    actions: {\n      handles: ['cellLinkClick', 'rowDoubleClick', 'selection', 'sort', 'rowActionClick'],\n    },\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nexport const Default = () => html`\n  <div style=\"width: 800px\">\n    <modus-data-table />\n  </div>\n  ${setDataTable()}\n`;\n\nexport const RowActions = () => html`\n  <div style=\"width: 800px\">\n    <modus-data-table />\n  </div>\n  ${setDataTableRowActions()}\n`;\n\n// The <script> tag cannot be used in the MDX file, so we use this method to\n// set the data table data for the default story.\nconst setDataTable = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('modus-data-table').columns = [{ display: 'Name', width: '33%'}, { display: 'Age', width: '33%' }, { display: 'Contacted', width: '33%' }];\n    document.querySelector('modus-data-table').data = [['John', 25, false], ['Jane', 26, false], ['Joe', 27, true]];\n  `;\n\n  return tag;\n};\n\nconst setDataTableRowActions = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('modus-data-table').columns = [\n      { display: 'Name', width: '100px' },\n      { display: 'Age', align: 'right', width: '34px' },\n      { display: 'Status', align: 'center' },\n      { display: 'Email' }\n    ];\n    document.querySelector('modus-data-table').data = [\n      {\n        _id: '0',\n        name: 'Joe',\n        age: 27,\n        status: {\n          _type: 'badge',\n          text: 'Complete'\n        },\n        email: {\n          _type: 'link',\n          display: 'joe@example.com',\n          url: 'mailto:joe@example.com',\n        },\n      },\n      {\n        _id: '1',\n        name: 'Jane',\n        age: 34,\n        status: {\n          _type: 'badge',\n          text: 'Complete'\n        },\n        email: {\n          _type: 'link',\n          display: 'jane@example.com',\n          url: 'mailto:jane@example.com',\n        },\n      },\n      {\n        _id: '2',\n        name: 'William',\n        age: 28,\n        status: {\n          _type: 'badge',\n          text: 'Incomplete',\n          color: 'warning'\n        },\n        email: {\n          _type: 'link',\n          display: 'william@example.com',\n          url: 'mailto:william@example.com',\n        },\n      },\n    ];\n    document.querySelector('modus-data-table').sortOptions = { canSort: true, serverSide: false };\n    document.querySelector('modus-data-table').selectionOptions = { canSelect: true, checkboxSelection: true };\n    document.querySelector('modus-data-table').rowActions = [\n      {\n        _id: '0',\n        display: {\n          text: 'Delete',\n          icon: 'delete'\n        }\n      }\n    ];\n  `;\n\n  return tag;\n};\n"
    },
    "modus-date-input.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an accessible name for the date input,\n// ensuring that assistive technologies (like screen readers) can describe the input.\n// When a value is supplied, it sets the input's 'aria-label' attribute, aiding accessibility."
        },
        {
          "name": "autoFocusInput",
          "comment": "// autoFocusInput is an optional boolean prop that, when true, automatically focuses the date input when the component renders."
        },
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop is a boolean that determines whether the input is interactive.\n// When set to true, it disables user input, applies disabled styling, and prevents focus/interactions on the element."
        },
        {
          "name": "disableValidation",
          "comment": "// The 'disableValidation' prop allows consumers of the component to bypass its built-in validation logic for the date input.\n// When set to true, the component skips validating the input (and thus does not emit error messages or update internal error state)\n// even if the entered date is missing or invalid. This enables developers to handle validation externally if desired."
        },
        {
          "name": "errorText",
          "comment": "// The 'errorText' prop allows consumers to set a custom error message for the date input.\n// When provided, this custom text overrides the component's internally generated error messages\n// during validation, ensuring that the displayed error is completely user-defined."
        },
        {
          "name": "fillerDate",
          "comment": "// The 'fillerDate' prop provides a default ISO-formatted date (YYYY-MM-DD) that the component uses to fill in any missing parts when constructing a complete date string from the user's input. It serves as a reference point to complete partial dates based on the specified display format."
        },
        {
          "name": "altFormats",
          "comment": "// 'altFormats' allows you to specify one or more alternative date format strings (separated by the \"|\" character)\n// that the component will recognize when parsing user input. This enables the date input to accept and convert dates\n// entered in formats different from the primary 'format' prop."
        },
        {
          "name": "helperText",
          "comment": "// The 'helperText' prop is an optional string that displays supplemental guidance below the input label, providing users with additional context or instructions for using the date input."
        },
        {
          "name": "label",
          "comment": "// The 'label' prop is an optional string used to display descriptive text (the input's label)\n// above the date input field. It clarifies the purpose of the input for users and aids accessibility."
        },
        {
          "name": "placeholder",
          "comment": "// The 'placeholder' prop specifies the hint text displayed inside the input field when it is empty, guiding users on the expected date format."
        },
        {
          "name": "readOnly",
          "comment": "// The 'readOnly' prop specifies whether users can manually edit the date input's content.\n// When set to true, the input renders as non-editable, displaying the value without allowing\n// any changes by the user. This is useful for showing a fixed date value while still keeping the\n// input visually consistent with editable fields."
        },
        {
          "name": "required",
          "comment": "// The 'required' prop indicates whether a value must be entered into the date input. \n// When set to true, it displays a required asterisk next to the label and triggers validation to show an error ('Required') if the input is left empty."
        },
        {
          "name": "showCalendarIcon",
          "comment": "// The 'showCalendarIcon' prop controls whether a calendar icon appears alongside the date input. When true, the icon is rendered, and clicking it emits a \"calendarIconClicked\" event (or fires on keyboard interaction) to allow external handlers (such as a date picker) to be triggered."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop determines the visual size of the date input. It accepts either 'medium' or 'large' (with 'medium' as the default), and applies the corresponding CSS class to style the input accordingly."
        },
        {
          "name": "type",
          "comment": "// 'type' denotes what kind of date is being handled by the input (e.g., 'start', 'end', or 'single'). This prop is used to inform other components (like a date picker) and event handlers about the date context, affecting how the input's date value is interpreted and validated."
        },
        {
          "name": "validText",
          "comment": "// The 'validText' prop is an optional string that, when provided, displays a custom \"valid\" message below the input field.\n// This message appears only when there is no error (i.e., no internalErrorText or errorText is present)."
        },
        {
          "name": "min",
          "comment": "// 'min' represents the minimum allowable date for user input, expressed as an ISO8601 string (YYYY-MM-DD).\n// During validation, the component compares the parsed input date with 'min'. If the input date is earlier than 'min',\n// an error message is set and emitted, informing the user to select a date after the provided minimum date."
        },
        {
          "name": "max",
          "comment": "// The 'max' prop sets the maximum allowed date for the input. It accepts a date string in ISO8601 format (YYYY-MM-DD) and is used during validation. If the entered date exceeds this maximum, the component will display an error prompting the user to select an earlier date."
        }
      ],
      "events": [
        {
          "name": "calendarIconClicked",
          "comment": "// The 'calendarIconClicked' event is emitted whenever the user clicks on the calendar icon.\n// It notifies parent components that the calendar icon was interacted with and passes an event payload \n// containing the current date value, the type of date input (e.g., single, start, end), and the input string.\n// This allows external handlers to react (such as opening a calendar popup) without tightly coupling to the internal component logic."
        },
        {
          "name": "dateInputBlur",
          "comment": "// The 'dateInputBlur' event is emitted when the date input loses focus. It notifies parent components that the user has finished editing, providing the current ISO date value, the input type, and the formatted display string for additional handling (such as validation or UI updates)."
        },
        {
          "name": "valueChange",
          "comment": "// The 'valueChange' event is emitted whenever the component's date value is updated. It notifies any external listeners that the input value has changed and provides an object containing the new ISO-formatted date value, the type of date input (e.g., single, start, or end), and the display string. This helps synchronize the component's state with any external models or parent components."
        },
        {
          "name": "valueError",
          "comment": "// The 'valueError' event is emitted when the date input fails validation. \n// It notifies parent components about an error (e.g., an invalid or missing date) \n// by sending the error message, enabling them to respond (like displaying error feedback)."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-date-picker.tsx": {
      "props": [
        {
          "name": "label",
          "comment": "// The 'label' prop is an optional string that, when provided,\n// adds a text label above the date inputs in the component's UI.\n// This helps describe or contextualize the datepicker field for users."
        },
        {
          "name": "position",
          "comment": "/* \n  The 'position' prop sets the placement of the calendar popup relative to the input element. \n  It accepts either specific placements (e.g., \"bottom-start\") or auto-placement options (\"auto\", \"auto-start\", \"auto-end\"), \n  and is used by the floating-ui computePosition function to position the calendar dynamically. \n*/"
        },
        {
          "name": "isDateEnabled",
          "comment": "/* \n  The \"isDateEnabled\" prop is a function that the developer can provide to determine if a specific date should be enabled (interactive) or disabled (non-interactive). It receives an ISO 8601 date string as input and returns a boolean (or undefined) indicating whether the day is available for selection. This allows custom logic for disabling certain dates within the calendar.\n*/"
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-date-picker-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Date Picker',\n  argTypes: {\n    allowedCharsRegex: {\n      name: 'allowed-chars-regex',\n      description: 'Regular expression to allow characters while typing the input.',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    altFormats: {\n      name: 'alt-formats',\n      description: 'Alternative formats string for the date input split by | separator.',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The input's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    autoFocusInput: {\n      name: 'auto-focus-input',\n      description: 'Sets autofocus for the input',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    position: {\n      name: 'position',\n      options: [\n        'auto',\n        'auto-start',\n        'auto-end',\n        'top-start',\n        'top-end',\n        'bottom-start',\n        'bottom-end',\n        'right-start',\n        'right-end',\n        'left-start',\n        'left-end',\n        'top',\n        'left',\n        'bottom',\n        'right',\n      ],\n      type: 'select',\n      description: 'The placement of the calendar popup',\n      table: {\n        defaultValue: { summary: 'bottom-start' },\n        type: {\n          summary:\n            \"'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end' | 'top' | 'left' | 'bottom' | 'right'\",\n        },\n      },\n    },\n    disabled: {\n      description: 'Whether the date input is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disableValidation: {\n      name: 'disable-validation',\n      description: 'Disables default validation for the date input',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The input's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    format: {\n      name: 'format',\n      description: \"Format string for the date input. Default 'mm/dd/yyyy'\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    helperText: {\n      name: 'helper-text',\n      description: \"The input's helper text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    label: {\n      description: \"The input's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    max: {\n      description: \"The maximum date allowed. The input string should be ISO8601 'yyyy-mm-dd'.\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    min: {\n      description: \"The minimum date allowed. The input string should be ISO8601 'yyyy-mm-dd'.\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    placeholder: {\n      description: \"The input's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the input is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the input is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    showCalendarIcon: {\n      name: 'show-calendar-icon',\n      description: 'Show a calendar icon.',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the input',\n      table: {\n        defaultValue: { summary: \"'medium'\" },\n        type: { summary: \"'medium' | 'large'\" },\n      },\n    },\n    validText: {\n      name: 'valid-text',\n      description: \"The input's valid text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"A string representing the date entered in the input. The input string should be ISO8601 'yyyy-mm-dd'.\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange', 'dateInputBlur', 'calendarIconClicked'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst defaultArgs = {\n  ariaLabel: '',\n  allowedCharsRegex: '[\\\\d\\\\/]',\n  altFormats: '',\n  autoFocusInput: true,\n  disableValidation: false,\n  disabled: false,\n  errorText: '',\n  format: 'mm/dd/yyyy',\n  helperText: 'mm/dd/yyyy',\n  label: 'Date',\n  min: '',\n  max: '',\n  placeholder: '',\n  readOnly: false,\n  required: false,\n  showCalendarIcon: false,\n  size: 'medium',\n  validText: '',\n  value: '2022-12-22',\n};\n\nconst DefaultTemplate = ({\n  ariaLabel,\n  allowedCharsRegex,\n  altFormats,\n  autoFocusInput,\n  disableValidation,\n  disabled,\n  errorText,\n  format,\n  helperText,\n  label,\n  min,\n  max,\n  placeholder,\n  readOnly,\n  required,\n  showCalendarIcon,\n  size,\n  validText,\n  value,\n}) => html`\n  <modus-date-input\n    allowed-chars-regex=${allowedCharsRegex}\n    alt-formats=${altFormats}\n    aria-label=${ariaLabel}\n    auto-focus-input=${autoFocusInput}\n    disable-validation=${disableValidation}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    format=${format}\n    helper-text=${helperText}\n    label=${label}\n    min=${min}\n    max=${max}\n    placeholder=${placeholder}\n    read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    show-calendar-icon=${showCalendarIcon}\n    valid-text=${validText}\n    value=${value}></modus-date-input>\n`;\n\nexport const Default = DefaultTemplate.bind({});\nDefault.args = {\n  ...defaultArgs,\n  format: 'mmm dd, yyyy',\n  allowedCharsRegex: '.',\n  helperText: 'mmm dd, yyyy',\n  ...{ label: 'Single Date' },\n};\n\nconst DateRangeTemplate = ({\n  ariaLabel,\n  allowedCharsRegex,\n  altFormats,\n  autoFocusInput,\n  disableValidation,\n  disabled,\n  errorText,\n  format,\n  min,\n  position,\n  max,\n  helperText,\n  placeholder,\n  readOnly,\n  required,\n  showCalendarIcon,\n  size,\n  validText,\n  value,\n}) => html`\n  <modus-date-picker label=\"Select date range\" position=${position}>\n    <modus-date-input\n      allowed-chars-regex=${allowedCharsRegex}\n      alt-formats=${altFormats}\n      aria-label=${ariaLabel}\n      auto-focus-input=${autoFocusInput}\n      disable-validation=${disableValidation}\n      ?disabled=${disabled}\n      error-text=${errorText}\n      format=${format}\n      min=${min}\n      max=${max}\n      helper-text=${helperText}\n      type=\"start\"\n      label=\"Start\"\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      show-calendar-icon=${showCalendarIcon}\n      valid-text=${validText}\n      value=${value}></modus-date-input>\n\n    <modus-date-input\n      allowed-chars-regex=${allowedCharsRegex}\n      alt-formats=${altFormats}\n      aria-label=${ariaLabel}\n      auto-focus-input=${autoFocusInput}\n      disable-validation=${disableValidation}\n      ?disabled=${disabled}\n      error-text=${errorText}\n      format=${format}\n      min=${min}\n      max=${max}\n      helper-text=${helperText}\n      type=\"end\"\n      label=\"End\"\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      show-calendar-icon=${showCalendarIcon}\n      valid-text=${validText}\n      value=${value}></modus-date-input>\n  </modus-date-picker>\n`;\nexport const DateRange = DateRangeTemplate.bind({});\nDateRange.args = {\n  ...defaultArgs,\n  ...{\n    showCalendarIcon: true,\n    format: 'dd-mm-yyyy',\n    helperText: 'dd-mm-yyyy',\n    allowedCharsRegex: '[\\\\d-]',\n  },\n};\n\nconst DefaultWithPickerTemplate = ({\n  ariaLabel,\n  allowedCharsRegex,\n  altFormats,\n  autoFocusInput,\n  position,\n  disableValidation,\n  disabled,\n  errorText,\n  format,\n  helperText,\n  label,\n  min,\n  max,\n  placeholder,\n  readOnly,\n  required,\n  showCalendarIcon,\n  size,\n  validText,\n  value,\n  isDateEnabled,\n}) => {\n  setTimeout(() => {\n    isDateEnabledLoading = false;\n  }, 4000);\n  return html`\n    <modus-date-picker .isDateEnabled=${isDateEnabled} position=${position}>\n      <modus-date-input\n        allowed-chars-regex=${allowedCharsRegex}\n        aria-label=${ariaLabel}\n        alt-formats=${altFormats}\n        auto-focus-input=${autoFocusInput}\n        disable-validation=${disableValidation}\n        ?disabled=${disabled}\n        error-text=${errorText}\n        format=${format}\n        helper-text=${helperText}\n        label=${label}\n        min=${min}\n        max=${max}\n        placeholder=${placeholder}\n        read-only=${readOnly}\n        ?required=${required}\n        size=${size}\n        show-calendar-icon=${showCalendarIcon}\n        valid-text=${validText}\n        value=${value}></modus-date-input>\n    </modus-date-picker>\n  `;\n};\n\nexport const DefaultWithPicker = DefaultWithPickerTemplate.bind({});\n// Uncomment and pass in as isDateEnabled below to test isDateEnabled functionality\n// const isWeekend = (isoString: string) => {\n//   const date = new Date(isoString);\n//   const isWeekend  = date.getDay() === 0 || date.getDay() === 6;\n//   return isWeekend;\n// }\n\nDefaultWithPicker.args = {\n  ...defaultArgs,\n  position: 'bottom-start',\n  showCalendarIcon: true,\n  min: '2022-12-02',\n  max: '2022-12-30',\n  format: 'mmm dd, yyyy',\n  allowedCharsRegex: '.',\n  helperText: 'mmm dd, yyyy',\n  label: 'Single Date',\n};\n"
    },
    "modus-dropdown.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop optionally adds an ARIA label to the dropdown's host element.\n// This improves accessibility by allowing screen readers to identify the dropdown with a custom, descriptive label."
        },
        {
          "name": "customPlacement",
          "comment": "// The 'customPlacement' prop allows developers to override the default dropdown positioning by specifying custom offset values (top, right, bottom, and left). When provided, these values are applied as inline CSS styles, enabling precise control over the placement of the dropdown list relative to its toggle element."
        },
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop determines whether the dropdown component is interactive. When set to true, the component adds a disabled attribute to its toggle element and ignores click and keyboard events, effectively preventing users from opening or interacting with the dropdown."
        },
        {
          "name": "placement",
          "comment": "// The 'placement' prop specifies on which side (top, right, bottom, or left) the dropdown list should appear relative to its associated toggle element. When set, it not only influences the applied CSS class (via the classByPlacement map) but also affects positioning logic, ensuring that the dropdown aligns properly with the toggle element."
        },
        {
          "name": "toggleElementId",
          "comment": "// The \"toggleElementId\" prop specifies the required HTML element ID for the dropdown's toggle element. \n// In the component, it's used to locate the toggle element in the DOM (via querySelector) and determine whether a user interaction (click or keydown) occurred on it, so the component can toggle the dropdown list accordingly."
        }
      ],
      "events": [
        {
          "name": "dropdownClose",
          "comment": "// The 'dropdownClose' event is emitted whenever the dropdown is closed (i.e., when the visible state changes to false). This lets parent components or consumers know that the dropdown has been closed so they can perform any necessary follow-up actions."
        }
      ],
      "slots": [
        {
          "name": "dropdownToggle",
          "comment": "// The \"dropdownToggle\" slot is where consumers provide the element (e.g., a button) that acts as the trigger for toggling the dropdown\u2019s open/close state.\n// When using the component, ensure that the element in this slot has an id matching the toggleElementId prop so that the component can correctly attach event listeners to it."
        },
        {
          "name": "dropdownList",
          "comment": "// The 'dropdownList' slot enables users of the component to inject custom dropdown list content (e.g., menu items or options) into the designated area of the dropdown. This allows the dropdown's list to be customized externally while still benefiting from the component\u2019s built-in styling and behavior."
        }
      ],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-dropdown-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Dropdown',\n  argTypes: {\n    animateList: {\n      name: 'animate-list',\n      description: 'Whether the dropdown list should animate',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: false },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The dropdowns's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    borderRadius: {\n      name: 'border-radius',\n      description: 'The border radius of the dropdown list.',\n      table: {\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    customPlacement: {\n      name: 'custom-placement',\n      description: 'Determines custom dropdown placement offset.',\n      table: {\n        type: { summary: '{ top?: number; right?: number; bottom?: number; left?: number; }' },\n      },\n      type: { required: false },\n    },\n    disabled: {\n      name: 'disabled',\n      description: 'Whether the dropdown is disabled',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: false },\n      },\n    },\n    disableCloseOnSelect: {\n      name: 'disable-close-on-select',\n      description: 'Prevents the dropdown from closing when an option is selected.',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: false },\n      },\n    },\n    placement: {\n      name: 'placement',\n      description: 'The placement of the dropdown in relation to the toggleElement.',\n      options: ['top', 'right', 'bottom', 'left'],\n      type: 'select',\n      table: {\n        type: { summary: `'top' | 'right' | 'bottom' | 'left'` },\n\n        defaultValue: { summary: 'bottom' },\n      },\n    },\n    showDropdownListBorder: {\n      name: 'show-dropdown-list-border',\n      description: 'Whether to show the dropdown list border',\n      table: {\n        type: {\n          summary: 'boolean',\n        },\n        defaultValue: { summary: true },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['dropdownClose'],\n    },\n    docs: {\n      page: docs,\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst DefaultTemplate = ({\n  animateList,\n  ariaLabel,\n  borderRadius,\n  customPlacement,\n  disableCloseOnSelect,\n  disabled,\n  placement,\n  showDropdownListBorder,\n}) => html`\n  <modus-dropdown\n    animate-list=${animateList}\n    aria-label=${ariaLabel}\n    border-radius=${borderRadius}\n    disabled=${disabled}\n    disable-close-on-select=${disableCloseOnSelect}\n    placement=${placement}\n    show-dropdown-list-border=${showDropdownListBorder}\n    toggle-element-id=\"toggleElement\">\n    <modus-button id=\"toggleElement\" slot=\"dropdownToggle\" show-caret=\"true\">Dropdown</modus-button>\n    <modus-list slot=\"dropdownList\">\n      <modus-list-item size=\"condensed\" borderless>Item 1</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 2</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 3</modus-list-item>\n    </modus-list>\n  </modus-dropdown>\n  ${initializeCustomPlacement(customPlacement)}\n`;\nexport const Default = DefaultTemplate.bind({});\nDefault.args = {\n  animateList: false,\n  ariaLabel: '',\n  borderRadius: '0',\n  customPlacement: { top: 0, right: 0, bottom: 0, left: 0 },\n  disabled: false,\n  disableCloseOnSelect: false,\n  placement: 'bottom',\n  showDropdownListBorder: true,\n};\n\nconst WithManyItemsTemplate = ({\n  animateList,\n  ariaLabel,\n  borderRadius,\n  customPlacement,\n  disabled,\n  disableCloseOnSelect,\n  placement,\n  showDropdownListBorder,\n}) => html`\n  <modus-dropdown\n    animate-list=${animateList}\n    aria-label=${ariaLabel}\n    border-radius=${borderRadius}\n    disabled=${disabled}\n    disable-close-on-select=${disableCloseOnSelect}\n    placement=${placement}\n    show-dropdown-list-border=${showDropdownListBorder}\n    toggle-element-id=\"toggleElement\">\n    <modus-button id=\"toggleElement\" slot=\"dropdownToggle\" show-caret=\"true\">Dropdown</modus-button>\n    <modus-list slot=\"dropdownList\">\n      <modus-list-item size=\"condensed\" borderless>Item 1</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 2</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 3</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 4</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 5</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 6</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 7</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 8</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 9</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 10</modus-list-item>\n    </modus-list>\n  </modus-dropdown>\n  ${initializeCustomPlacement(customPlacement)}\n`;\nexport const WithManyItems = WithManyItemsTemplate.bind({});\nWithManyItems.args = {\n  animateList: false,\n  ariaLabel: '',\n  borderRadius: '0',\n  customPlacement: { top: 0, right: 0, bottom: 0, left: 0 },\n  disabled: false,\n  disableCloseOnSelect: false,\n  placement: 'bottom',\n  showDropdownListBorder: true,\n};\n\nfunction initializeCustomPlacement(customPlacement) {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n  var modusDropdown = document.querySelector('modus-dropdown');\n  modusDropdown.customPlacement = ${JSON.stringify(customPlacement)};\n  `;\n  return tag;\n}\n"
    },
    "modus-file-dropzone.tsx": {
      "props": [
        {
          "name": "acceptFileTypes",
          "comment": "// The \u2018acceptFileTypes\u2019 prop specifies which file types the dropzone will accept by setting the underlying file input\u2019s \"accept\" attribute. This allows the component to restrict file selections to specific formats (e.g., \"image/*\" or \".pdf\") as determined by the developer."
        },
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop allows developers to specify an accessible name for the dropzone. This label is applied to the component's host element via its aria-label attribute, enhancing screen reader support by clearly describing the dropzone's purpose to users who rely on assistive technologies."
        },
        {
          "name": "description",
          "comment": "/* \n   The 'description' prop provides additional text to describe the dropzone component. \n   It is used to display supplementary information or context about the dropzone\u2019s purpose \n   (such as file upload instructions or details) alongside the label in the header section.\n*/"
        },
        {
          "name": "dropzoneHeight",
          "comment": "// The 'dropzoneHeight' prop allows developers to set a custom height for the file dropzone container.\n// It is applied as an inline style to the dropzone div, enabling flexible UI layout customization."
        },
        {
          "name": "dropzoneWidth",
          "comment": "/* The 'dropzoneWidth' prop allows consumers of the component to specify a custom width for the dropzone area. This value is applied as an inline style on the dropzone container, enabling flexible layout customization. */"
        },
        {
          "name": "label",
          "comment": "// The 'label' prop sets the header text for the dropzone, allowing developers to specify a title or description that appears above the description text in the component's header section."
        },
        {
          "name": "maxFileCount",
          "comment": "// The maxFileCount prop specifies the maximum number of files a user is allowed to add to the dropzone. \n// When the number of selected files exceeds this count, the component sets an error state (with code 'maxFileCount') \n// and displays an appropriate error message to inform the user of the allowed limit."
        },
        {
          "name": "maxFileNameLength",
          "comment": "// The maxFileNameLength prop sets the maximum allowed number of characters for each file's name. If any selected file has a name that exceeds this limit, the component flags an error (maxFileNameLength) and displays an appropriate error message, preventing the file from being accepted."
        },
        {
          "name": "maxTotalFileSizeBytes",
          "comment": "// The 'maxTotalFileSizeBytes' prop defines the maximum allowed cumulative size (in bytes) for all files added to the dropzone. \n// If the total size of the selected files exceeds this limit, the component triggers an error message, preventing further uploads."
        }
      ],
      "events": [
        {
          "name": "files",
          "comment": "// The 'files' event is emitted every time the file list is updated (whether files are added or removed) and communicates both the current array of files and any file upload error. This allows parent components or consumers of the dropzone to react to file changes and validations in real time."
        }
      ],
      "slots": [],
      "documentation": "import { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-file-dropzone-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/File Dropzone',\n  argTypes: {\n    acceptFileTypes: {\n      name: 'accept-file-types',\n      description: \"The dropzone's accepted file types\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The dropzone's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      name: 'disabled',\n      description: 'Whether the dropzone is disabled',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    description: {\n      name: 'description',\n      description: \"The dropzone's description\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    dropzoneHeight: {\n      name: 'dropzone-height',\n      description: \"The dropzone's height\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    dropzoneWidth: {\n      name: 'dropzone-width',\n      description: \"The dropzone's width\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    fileDraggedOverInstructions: {\n      name: 'file-dragged-over-instructions',\n      description: \"The dropzone's instruction text when a file is being dragged over.'\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    includeStateIcon: {\n      name: 'include-state-icon',\n      description: 'Whether to include the state icon',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    instructions: {\n      name: 'instructions',\n      description: \"The dropzone's instruction text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    label: {\n      name: 'label',\n      description: \"The dropzone's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxFileCount: {\n      name: 'max-file-count',\n      description: \"The dropzone's max file count\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    maxFileNameLength: {\n      name: 'max-file-name-length',\n      description: \"The dropzone's max file name length\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    maxTotalFileSizeBytes: {\n      name: 'max-total-file-size-bytes',\n      description: \"The dropzone's max total file size bytes\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    multiple: {\n      name: 'multiple',\n      description: 'Whether multiple files are allowed',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'alpha' },\n    actions: {\n      handles: ['buttonClick'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nexport const Default = ({\n  acceptFileTypes,\n  ariaLabel,\n  disabled,\n  description,\n  dropzoneHeight,\n  dropzoneWidth,\n  fileDraggedOverInstructions,\n  includeStateIcon,\n  instructions,\n  label,\n  maxFileCount,\n  maxFileNameLength,\n  maxTotalFileSizeBytes,\n  multiple,\n}) => html`\n  <modus-file-dropzone\n    accept-file-types=${acceptFileTypes}\n    aria-label=${ariaLabel}\n    ?disabled=${disabled}\n    description=${description}\n    dropzone-height=${dropzoneHeight}\n    dropzone-width=${dropzoneWidth}\n    file-dragged-over-instructions=${fileDraggedOverInstructions}\n    include-state-icon=${includeStateIcon}\n    instructions=${instructions}\n    label=${label}\n    max-file-count=${maxFileCount}\n    max-file-name-length=${maxFileNameLength}\n    max-total-file-size-bytes=${maxTotalFileSizeBytes}\n    multiple=${multiple}>\n  </modus-file-dropzone>\n`;\nDefault.args = {\n  acceptFileTypes: '.doc,.docx',\n  ariaLabel: 'dropzone',\n  disabled: false,\n  description: 'File dropzone description',\n  dropzoneHeight: '200px',\n  dropzoneWidth: '500px',\n  fileDraggedOverInstructions: 'Drag files here.',\n  includeStateIcon: true,\n  instructions: 'Drag files here or browse to upload.',\n  label: 'Dropzone Label',\n  maxFileCount: '4',\n  maxFileNameLength: '20',\n  maxTotalFileSizeBytes: '1000000',\n  multiple: true,\n};\n"
    },
    "modus-icons.tsx": {
      "props": [
        {
          "name": "name",
          "comment": "/* \n   The 'name' prop specifies the icon identifier that determines which icon from the ModusIconMap should be rendered.\n   By setting this property, users of the component can control which icon is displayed.\n*/"
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-list.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-list-item.tsx": {
      "props": [
        {
          "name": "borderless",
          "comment": "// The 'borderless' prop determines whether the list item should render with a border.\n// When set to true, it applies the 'borderless' CSS class, resulting in an item appearance without a border.\n// This prop is optional, allowing the consuming component to choose if a border should be displayed."
        },
        {
          "name": "disabled",
          "comment": "/* \nThis 'disabled' property is a boolean that controls whether the list item is interactive. When true, the list item:\n\u2022 Receives a 'disabled' CSS class for styling.\n\u2022 Has a tabIndex of -1 so it cannot be focused.\n\u2022 Ignores click and keydown events, preventing user interaction.\n*/"
        },
        {
          "name": "selected",
          "comment": "// The 'selected' prop is used to indicate that the list item is currently selected. When true, it applies a 'selected' CSS class to style the item accordingly and conditionally renders a check icon to visually denote selection."
        },
        {
          "name": "leftIcon",
          "comment": "// The 'leftIcon' prop accepts a string representing an icon name. When provided, the component renders an icon (using the ModusIcon component) aligned to the left of the list item\u2019s text, giving you the flexibility to add visual cues to your list items."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop allows consumers to specify the visual size of the list item, accepting \"condensed\", \"large\", or \"standard\" (default \"standard\"). This prop influences the resulting CSS classes (mapping \"condensed\" to \"small\", etc.) and adjusts the internal icon size accordingly, ensuring consistent styling across different sizes."
        },
        {
          "name": "subText",
          "comment": "// The \"subText\" prop is used to provide additional, optional supporting text that is displayed below the component\u2019s main slot content. When defined, its value is rendered in a dedicated <span> element under the primary text container, optionally wrapped based on the \"wrapSubText\" prop setting."
        },
        {
          "name": "wrapSubText",
          "comment": "// The 'wrapSubText' prop controls whether the sub-text should automatically wrap onto multiple lines.\n// When true, the component applies the CSS class 'wrap' to the sub-text element,\n// allowing it to break into multiple lines if needed; when false, it applies 'no-wrap' to force the sub-text to remain on a single line."
        },
        {
          "name": "iconColor",
          "comment": "// The 'iconColor' prop allows the consumer to specify the color of the left icon.\n// When provided, it is passed to the ModusIcon component so that the icon renders\n// with the desired color, enabling dynamic styling of the icon's appearance."
        }
      ],
      "events": [
        {
          "name": "itemClick",
          "comment": "// The 'itemClick' event is emitted whenever the list item is activated (either by a mouse click or by pressing the Enter key), provided the item isn\u2019t disabled.\n// This allows parent components to listen for and handle these interactions (such as selection or triggering further actions) in an accessible manner."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-message.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// 'ariaLabel' is an optional property that allows developers to define a custom ARIA label for the message component. It enhances accessibility by providing assistive technologies (like screen readers) with descriptive text for the component when its content alone may not be sufficiently informative."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-message-storybook-docs.mdx';\nimport { html } from 'lit-html';\n\nexport default {\n  title: 'Components/Message',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The message's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    icon: {\n      name: 'icon',\n      description: \"The message's icon\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    type: {\n      options: ['info', 'question'],\n      type: 'select',\n      description: 'The type of the message',\n      table: {\n        defaultValue: { summary: `'info'` },\n        type: { summary: `'info' | 'question'` },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\nexport const Default = ({ ariaLabel, icon, type }) => html`\n  <modus-message aria-label=${ariaLabel} icon=${icon} type=${type}> Info (Default) </modus-message>\n`;\nDefault.args = { ariaLabel: '', icon: '', type: 'info' };\n\nexport const Question = ({ ariaLabel, icon, type }) => html`\n  <modus-message aria-label=${ariaLabel} icon=${icon} type=${type}> Question </modus-message>\n`;\nQuestion.args = { ariaLabel: '', icon: '', type: 'question' };\n"
    },
    "modus-modal.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// 'ariaLabel' provides an accessible name for the modal dialog. When the modal is visible, its value is assigned to the modal's aria-label attribute, helping assistive technologies like screen readers describe the dialog\u2019s purpose or content to users."
        },
        {
          "name": "headerText",
          "comment": "// The \"headerText\" prop holds the text that is displayed as the modal's header title. It allows the parent component to specify a custom header label shown at the top of the modal."
        },
        {
          "name": "primaryButtonAriaLabel",
          "comment": "// The 'primaryButtonAriaLabel' prop provides an accessible label for the primary action button in the modal, ensuring that screen readers can correctly describe the button's purpose to users who rely on assistive technologies."
        },
        {
          "name": "primaryButtonDisabled",
          "comment": "// The 'primaryButtonDisabled' prop is a boolean flag that, when set to true, disables the primary action button in the modal footer.\n// This prevents the button from being clickable and stops the primary button click event from being emitted."
        },
        {
          "name": "primaryButtonText",
          "comment": "// The primaryButtonText prop specifies the text label for the modal's primary action button. When provided, it renders the primary button in the modal footer, allowing users to customize the button\u2019s displayed text."
        },
        {
          "name": "secondaryButtonAriaLabel",
          "comment": "// The 'secondaryButtonAriaLabel' prop provides an accessible label for the modal\u2019s secondary action button, ensuring that screen readers can clearly identify the button\u2019s purpose. This is especially useful when the button\u2019s text or visual representation might not be descriptive enough on its own."
        },
        {
          "name": "secondaryButtonDisabled",
          "comment": "// The 'secondaryButtonDisabled' prop is used to disable the secondary button.\n// When set to true, it prevents user interaction by disabling the button\n// (both visually and functionally) and ensures that the secondary button click event is not fired."
        },
        {
          "name": "secondaryButtonText",
          "comment": "// The \"secondaryButtonText\" prop defines the text label for the secondary button in the modal's footer. When a value is provided, a secondary button is rendered with this label, and clicking it emits the \"secondaryButtonClick\" event."
        },
        {
          "name": "backdrop",
          "comment": "// The 'backdrop' prop controls whether clicking outside the modal content (on the overlay) will close the modal.\n// When set to 'default', clicking on the backdrop will close the modal.\n// When set to 'static', the modal remains open on backdrop clicks, requiring explicit close actions."
        }
      ],
      "events": [
        {
          "name": "closed",
          "comment": "// 'closed' is an event emitted when the modal is closed. It notifies any listening components or parent elements that the modal has been dismissed, allowing them to respond accordingly (e.g., cleaning up state or updating the UI)."
        },
        {
          "name": "opened",
          "comment": "// The 'opened' event is emitted in the open() method immediately after the modal becomes visible,\n// serving as a notification to any external listeners that the modal has successfully opened."
        },
        {
          "name": "primaryButtonClick",
          "comment": "// This event is fired when the primary button in the modal is clicked (provided the button is not disabled).\n// Consumers of the component can listen for the \"primaryButtonClick\" event to trigger custom actions\n// (e.g., form submission or navigation) when the primary button is activated."
        },
        {
          "name": "secondaryButtonClick",
          "comment": "// The 'secondaryButtonClick' event is emitted when the secondary button is clicked (if it\u2019s not disabled). \n// It notifies any parent component or listener that the secondary action has been triggered, allowing for custom behavior\n// in response to that action."
        }
      ],
      "slots": [
        {
          "name": "footerContent",
          "comment": "// The 'footerContent' slot provides a way for consumers of the modal to inject custom footer elements into the modal's footer area.\n// It allows additional content (like extra buttons, links, or text) to be rendered alongside or instead of the default primary and secondary buttons."
        }
      ],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-modal-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Modal',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The modal's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    headerText: {\n      name: 'headerText',\n      description: \"The modal's primary button text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    primaryButtonAriaLabel: {\n      name: 'primaryButtonAriaLabel',\n      description: \"The modal's primary button aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    primaryButtonDisabled: {\n      name: 'primaryButtonDisabled',\n      description: 'Disable primary button',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    primaryButtonText: {\n      name: 'primaryButtonText',\n      description: \"The modal's primary button text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    secondaryButtonAriaLabel: {\n      name: 'secondaryButtonAriaLabel',\n      description: \"The modal's secondary button aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    secondaryButtonDisabled: {\n      name: 'secondaryButtonDisabled',\n      description: 'Disable secondary button',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    secondaryButtonText: {\n      name: 'secondaryButtonText',\n      description: \"The modal's secondary button text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    zIndex: {\n      name: 'zIndex',\n      description: \"The modal's z-index\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    backdrop: {\n      name: 'backdrop',\n      description: \"The modal's backdrop\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    fullscreen: {\n      name: 'fullscreen',\n      description: \"The modal's full screen view.\",\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    showFullscreenToggle: {\n      name: 'showFullscreenToggle',\n      description: 'Show full screen toggle',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['closed', 'primaryButtonClick', 'secondaryButtonClick', 'buttonClick'],\n    },\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    viewMode: 'docs',\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  headerText,\n  primaryButtonAriaLabel,\n  primaryButtonDisabled,\n  primaryButtonText,\n  secondaryButtonAriaLabel,\n  secondaryButtonDisabled,\n  secondaryButtonText,\n  zIndex,\n  backdrop,\n  fullscreen,\n  showFullscreenToggle,\n}) => html`\n  <modus-button id=\"btn-modal\" color=\"primary\">Open modal</modus-button>\n  <modus-modal\n    aria-label=${ariaLabel}\n    header-text=${headerText}\n    primary-button-aria-label=${primaryButtonAriaLabel}\n    primary-button-disabled=${primaryButtonDisabled}\n    primary-button-text=${primaryButtonText}\n    secondary-button-aria-label=${secondaryButtonAriaLabel}\n    secondary-button-disabled=${secondaryButtonDisabled}\n    secondary-button-text=${secondaryButtonText}\n    z-index=${zIndex}\n    backdrop=${backdrop}\n    fullscreen=${fullscreen}\n    show-fullscreen-toggle=${showFullscreenToggle}>\n    <p>Woo-hoo, you're reading this text in a modal!</p>\n  </modus-modal>\n  ${setScript()}\n`;\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  headerText: 'Modal title',\n  primaryButtonAriaLabel: 'Save changes',\n  primaryButtonDisabled: false,\n  primaryButtonText: 'Save changes',\n  secondaryButtonAriaLabel: 'Sweet',\n  secondaryButtonDisabled: false,\n  secondaryButtonText: 'Sweet',\n  zIndex: '1',\n  backdrop: 'default',\n  fullscreen: false,\n  showFullscreenToggle: false,\n};\n\nconst CustomFooterTemplate = ({ ariaLabel, headerText, zIndex, backdrop, fullscreen, showFullscreenToggle }) => html`\n  <modus-button id=\"btn-modal-footer\" color=\"primary\">Open modal</modus-button>\n  <modus-modal\n    id=\"modal-footer\"\n    aria-label=${ariaLabel}\n    header-text=${headerText}\n    z-index=${zIndex}\n    backdrop=${backdrop}\n    fullscreen=${fullscreen}\n    show-fullscreen-toggle=${showFullscreenToggle}>\n    <p>\n      A dialog or a modal is a window overlaid on the primary window. It interrupts the user and requires an action. It\n      disables the main content until the user explicitly interacts with the modal dialog.\n    </p>\n    <div\n      style=\"align-items: center;\n    display: flex;\n    justify-content: flex-end; gap: 8px; height:100%;\"\n      slot=\"footerContent\">\n      <modus-button color=\"tertiary\">Cancel</modus-button>\n      <modus-button color=\"secondary\">Check later</modus-button>\n      <modus-button color=\"primary\">Approve</modus-button>\n    </div>\n  </modus-modal>\n  ${setFooterScript()}\n`;\nexport const CustomFooter = CustomFooterTemplate.bind({});\nCustomFooter.args = {\n  ariaLabel: '',\n  headerText: 'Modal title',\n  zIndex: '1',\n  backdrop: 'default',\n  fullscreen: false,\n  showFullscreenToggle: false,\n};\n\nconst setScript = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('#btn-modal').addEventListener('buttonClick', () => {\n      document.querySelector('modus-modal').open();\n    });\n\n    document.querySelector('modus-modal').addEventListener('closed', () => {\n      // Timeout is a workaround for Stencil Web Component not capturing the state updates quick enough when another component is immediately focussed\n      setTimeout(() => {\n        document.querySelector('#btn-modal').focusButton();\n      }, 100);\n    });\n  `;\n\n  return tag;\n};\nconst setFooterScript = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('#btn-modal-footer').addEventListener('buttonClick', () => {\n      document.querySelector('#modal-footer').open();\n    });\n\n    document.querySelector('#modal-footer').addEventListener('closed', () => {\n      // Timeout is a workaround for Stencil Web Component not capturing the state updates quick enough when another component is immediately focussed\n      setTimeout(() => {\n        document.querySelector('#btn-modal-footer').focusButton();\n      }, 100);\n    });\n  `;\n\n  return tag;\n};\n"
    },
    "modus-navbar.tsx": {
      "props": [
        {
          "name": "apps",
          "comment": "/* \nThe 'apps' prop holds an array of app objects (of type ModusNavbarApp) that define the content and behavior of the apps menu. \nWhen the apps menu is activated (via the apps menu button), the component renders these app items in the <modus-navbar-apps-menu> element,\nallowing external configuration of the apps displayed in the navbar.\n*/"
        },
        {
          "name": "enableSearchOverlay",
          "comment": "// The 'enableSearchOverlay' prop determines whether clicking the search button displays a full-screen search overlay.\n// If true, pressing the search button will reveal a search overlay (modus-navbar-search-overlay) that manages user input;\n// if false, the search button simply emits a searchMenuClick event."
        },
        {
          "name": "logoOptions",
          "comment": "// The logoOptions prop provides the configuration for displaying the navbar\u2019s logo. It typically includes settings for a primary logo (for screens wider than 576px) and a secondary logo (for screens 576px or smaller). Its value is passed to the ModusNavbarProductLogo component, which renders the appropriate logo based on the device screen size."
        },
        {
          "name": "dropdownOptions",
          "comment": "// The 'dropdownOptions' prop holds the configuration for rendering a dropdown menu in the navbar. \n// It provides the list of dropdown items, display properties, and behavior settings so that the dropdown component knows what items to display and how to handle user interactions (e.g., item selection)."
        },
        {
          "name": "selectedDropdownItem",
          "comment": "// The 'selectedDropdownItem' prop holds the currently selected option from the dropdown menu.\n// It is used to determine which item should appear as selected in the navbar dropdown,\n// and updates when the user selects a different option, triggering the dropdownItemSelect event."
        },
        {
          "name": "reverse",
          "comment": "// The 'reverse' prop determines whether the navbar's items are rendered in the normal order or in reversed order. When set to true, it applies a 'reverse' CSS class to adjust the layout so that the items (e.g., main menu, logos, buttons) appear in the opposite order."
        },
        {
          "name": "searchTooltip",
          "comment": "// The 'searchTooltip' prop holds optional tooltip configuration for the search button.\n// It is used to provide additional text (and an aria-label) that appears when a user hovers\n// or focuses on the search icon, helping to improve accessibility and enhance user understanding."
        },
        {
          "name": "showAppsMenu",
          "comment": "// The 'showAppsMenu' prop is a Boolean that determines if the apps menu button (and its corresponding functionality) should be rendered in the navbar. When set to true, the navbar displays the apps menu icon (IconApps) that users can interact with to toggle the apps menu view."
        },
        {
          "name": "showMainMenu",
          "comment": "// The 'showMainMenu' prop controls whether the main menu button and its associated content (provided via the \"main\" slot) are rendered in the navbar. When set to true, the component displays the main menu toggle, allowing users to open or close the custom main menu content."
        },
        {
          "name": "showNotifications",
          "comment": "// 'showNotifications' determines if the notifications button and its corresponding menu are rendered.\n// When true, the notifications icon appears in the navbar, allowing users to view and interact with notifications."
        },
        {
          "name": "notificationCount",
          "comment": "// The 'notificationCount' prop holds the number of notifications to display. It is used by the component to show a badge on the notifications icon.\n// When rendering, the component checks this count and:\n// \u2022 if no value is provided or it's 0, no count is shown,\n// \u2022 if it's between 1 and 99, the exact number is displayed (with a minimum of 1),\n// \u2022 if it exceeds 99, it displays \"99+\" as a shorthand."
        },
        {
          "name": "showPendoPlaceholder",
          "comment": "// The 'showPendoPlaceholder' prop conditionally renders a placeholder div (with class \"pendo-placeholder\") in the navbar.\n// When set to true, it creates a designated space where Pendo (or a similar tool) can attach its UI elements."
        },
        {
          "name": "showSearch",
          "comment": "// The 'showSearch' prop is a Boolean that controls whether the search button/icon is rendered in the navbar. When true, the component displays the search UI element, allowing users to trigger the search overlay (if enabled) or emit a search event upon interaction."
        },
        {
          "name": "showShadow",
          "comment": "// The 'showShadow' prop is an optional boolean that controls whether a shadow is added beneath the navbar.\n// When set to true, the component applies the 'shadow' CSS class to the <nav> element, giving it a drop shadow effect\n// to visually elevate the navbar against the rest of the page content."
        },
        {
          "name": "showHelp",
          "comment": "// The 'showHelp' prop determines whether the help button (with its tooltip and associated click/keydown actions) is rendered in the navbar. If true, it displays the help icon that can trigger opening a help URL and emit a \"helpOpen\" event when activated."
        },
        {
          "name": "helpTooltip",
          "comment": "// The 'helpTooltip' prop holds tooltip configuration (e.g., text and optional aria-label) for the Help button.\n// When provided, it supplies the descriptive content displayed via a tooltip on hover or focus\n// over the Help icon, enhancing accessibility and user guidance for the help feature."
        },
        {
          "name": "helpUrl",
          "comment": "// The 'helpUrl' prop specifies the URL to open when the help icon is clicked.\n// If provided, clicking the help button triggers the openHelpMenu() method to open this URL in a new browser tab,\n// providing users with additional help or documentation."
        },
        {
          "name": "variant",
          "comment": "// The 'variant' prop lets the developer choose a color or theme variant for the navbar. When set to 'default', no extra class is added; if set to (for example) 'blue', a CSS class like 'nav-blue' is appended to the navbar element to apply alternate styling."
        }
      ],
      "events": [
        {
          "name": "appsMenuOpen",
          "comment": "// The 'appsMenuOpen' event is fired when the apps menu is opened (i.e., when the user toggles it to be visible). \n// Consumers of the component can listen to this event to perform any additional logic or UI updates needed when the apps menu becomes active."
        },
        {
          "name": "appsMenuAppOpen",
          "comment": "// The 'appsMenuAppOpen' event is emitted when a user selects (opens) one of the apps in the apps menu. It passes along the data of the selected app (of type ModusNavbarApp) so that parent components can react to the opening of that particular app."
        },
        {
          "name": "buttonClick",
          "comment": "// The 'buttonClick' event is emitted when a button in the navbar's dynamic button list is clicked. It sends the button's unique identifier (string)\n// to any listening parent component or handler, allowing custom actions to be triggered based on which button was pressed."
        },
        {
          "name": "helpOpen",
          "comment": "// 'helpOpen' is emitted when the help menu is activated (e.g., via click or key event). It notifies parent components that the help action has been triggered, allowing them to perform additional tasks (such as logging or UI updates) after the help URL is opened."
        },
        {
          "name": "dropdownItemSelect",
          "comment": "// The 'dropdownItemSelect' event is fired when a user selects an item from the dropdown menu.\n// This event carries the selected item's data, allowing parent components or listeners to react\n// (such as by updating state or performing navigation) based on the user's selection."
        },
        {
          "name": "mainMenuClick",
          "comment": "// The \"mainMenuClick\" event notifies consumers when the main menu button is activated (either by mouse click or key press). \n// It emits the originating keyboard or mouse event, allowing external handlers to perform additional custom actions \n// whenever the main menu is toggled."
        },
        {
          "name": "notificationsMenuOpen",
          "comment": "// The 'notificationsMenuOpen' event is emitted when the notifications menu is opened.\n// This allows consumers of the component to perform any required actions (such as lazy-loading notifications or tracking analytics)\n// when the notifications menu becomes visible."
        },
        {
          "name": "productLogoClick",
          "comment": "// The 'productLogoClick' event is fired when the user clicks the primary product logo.\n// It allows parent components or applications to listen for this interaction (for instance,\n// to navigate to the homepage or log user behavior) and respond accordingly."
        },
        {
          "name": "profileMenuLinkClick",
          "comment": "// The 'profileMenuLinkClick' event is used to notify parent components when a link within the profile menu is clicked. It forwards the clicked link's identifier (or URL) from a custom 'linkClick' event, allowing external consumers to handle navigation or other actions based on the user\u2019s selection."
        },
        {
          "name": "profileMenuOpen",
          "comment": "// 'profileMenuOpen' is emitted when the profile menu is opened, notifying any external listeners that the profile menu has been activated (e.g., to trigger related UI updates or analytics)."
        },
        {
          "name": "profileMenuSignOutClick",
          "comment": "// The 'profileMenuSignOutClick' event is emitted when a user triggers the sign out action from the profile menu\u2014either by clicking or using a keyboard event. Consumers of the component can listen to this event to implement custom sign-out logic."
        },
        {
          "name": "searchChange",
          "comment": "// The 'searchChange' event is emitted whenever the search overlay's value is updated by the user.\n// It propagates the new search string (provided via the event detail) to any parent/component listening\n// for changes so that it can respond accordingly, such as filtering a list or performing a search query."
        },
        {
          "name": "searchMenuClick",
          "comment": "// The 'searchMenuClick' event is emitted when the search button is activated (via mouse click or \"Enter\" key)\n// and the search overlay is not enabled (i.e., enableSearchOverlay is false). This event allows parent components\n// or consumers of the navbar to implement custom logic for handling search interactions when not using the built-in overlay."
        }
      ],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-navbar-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Navbar',\n  argTypes: {\n    enableSearchOverlay: {\n      name: 'enable-search-overlay',\n      description: 'Whether to show search overlay or not.',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    navAriaLabel: {\n      name: 'nav-aria-label',\n      description: \"The navbar's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    showHelp: {\n      name: 'show-help',\n      description: 'Toggle the help button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    showProfile: {\n      name: 'show-profile',\n      description: 'Toggle the profile',\n      table: {\n        defaultValue: { summary: true },\n        type: { summary: 'boolean' },\n      },\n    },\n    showSearch: {\n      name: 'show-search',\n      description: 'Toggle the search button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    profileMenuOptions: {\n      name: 'profile-menu-options',\n      description: 'Set the options for profile menu',\n      table: {\n        type: { summary: 'ModusProfileMenuOptions' },\n      },\n    },\n    buttons: {\n      name: 'buttons',\n      description: 'To add icon buttons dynamically to the Navbar, create an array of ModusNavbarButton.',\n      table: {\n        type: { summary: 'ModusNavbarButton[]' },\n      },\n    },\n    searchTooltip: {\n      name: 'search-tooltip ',\n      description: 'To add the search tooltip text and ariaLabel',\n      table: {\n        type: { summary: 'ModusNavbarTooltip' },\n      },\n    },\n    helpTooltip: {\n      name: 'help-tooltip ',\n      description: 'To add the help icon tooltip text and ariaLabel',\n      table: {\n        type: { summary: 'ModusNavbarTooltip' },\n      },\n    },\n    notificationCount: {\n      name: 'notification-count',\n      description: 'To add the counter value to the notification icon',\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['searchMenuClick', 'buttonClick', 'productLogoClick', 'helpOpen', 'profileMenuSignOutClick'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n      inlineStories: true,\n    },\n    options: {\n      isToolshown: true,\n    },\n    viewMode: 'docs',\n  },\n  decorators: [withActions],\n};\n\nconst workingAvatarUrl =\n  'https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/0e738c17-7f3c-422e-8225-f8c782b08626/d9pordj-43d4aa59-54b0-46a1-a568-e36dd691cf27.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcLzBlNzM4YzE3LTdmM2MtNDIyZS04MjI1LWY4Yzc4MmIwODYyNlwvZDlwb3Jkai00M2Q0YWE1OS01NGIwLTQ2YTEtYTU2OC1lMzZkZDY5MWNmMjcucG5nIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.xvDk9KFIUAx0yAG3BPamDfRqmWUX6zwR4WVW40GjsoY';\nconst failingAvatarUrl = 'https://avatar.example.com/broken-image-link.png';\nconst defaultPrimaryLogo = 'https://modus.trimble.com/img/trimble-logo.svg';\nconst defaultSecondaryLogo = 'https://modus.trimble.com/favicon.svg';\nconst primaryAlt = 'Trimble Modus Logo';\nconst secondaryAlt = 'Trimble Modus Icon';\nconst defaultLogo = {\n  primary: {\n    url: defaultPrimaryLogo,\n    alt: primaryAlt,\n  },\n  secondary: {\n    url: defaultSecondaryLogo,\n    alt: secondaryAlt,\n  },\n};\nconst blueLogo = {\n  primary: {\n    url: 'https://modus-bootstrap.trimble.com/img/trimble-logo-rev.svg',\n    alt: 'Trimble Modus Logo',\n  },\n  secondary: {\n    url: 'https://modus-bootstrap.trimble.com/img/trimble-icon-rev.svg',\n    alt: 'Trimble Modus Icon',\n  },\n};\nconst defaultApps = [\n  {\n    description: 'The One Trimble Design System',\n    logoUrl: 'https://modus.trimble.com/favicon.svg',\n    name: 'Trimble Modus',\n    url: 'https://modus.trimble.com/',\n  },\n];\n\nconst Template = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-main-menu\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    notification-count=${notificationCount}\n    show-notifications\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${defaultLogo}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n\n    <modus-list slot=\"addMenu\">\n      <modus-list-item>Menu Item 1</modus-list-item>\n      <modus-list-item>Menu Item 2</modus-list-item>\n    </modus-list>\n\n    <div slot=\"notificationMenu\">Render your own notification menu.</div>\n    <div slot=\"profileMenu\">Render your own profile menu content.</div>\n  </modus-navbar>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Default',\n  profileMenuOptions: {\n    avatarUrl: workingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n    links: [\n      {\n        id: 'link1',\n        display: 'Link 1',\n        icon: 'moon',\n      },\n      {\n        id: 'link2',\n        display: 'Link 2',\n        icon: 'sun',\n      },\n    ],\n    tooltip: {\n      text: 'User Profile Menu',\n    },\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n\nconst FailedToLoadAvatarTemplate = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-help\n    show-main-menu\n    show-notifications\n    notification-count=${notificationCount}\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${defaultLogo}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n    <div slot=\"notifications\">Render your own notifications.</div>\n  </modus-navbar>\n`;\n\nexport const FailedAvatar = FailedToLoadAvatarTemplate.bind({});\nFailedAvatar.args = {\n  buttons: [],\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Failed Avatar',\n  profileMenuOptions: {\n    avatarUrl: failingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n\nconst BlueTemplate = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-help\n    show-main-menu\n    show-notifications\n    notification-count=${notificationCount}\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    variant=\"blue\"\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${blueLogo}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n    <div slot=\"notifications\">Render your own notifications.</div>\n  </modus-navbar>\n`;\n\nexport const BlueNavbar = BlueTemplate.bind({});\nBlueNavbar.args = {\n  buttons: [],\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Blue navbar',\n  profileMenuOptions: {\n    avatarUrl: workingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n\nconst items = [\n  { text: 'Project 1', value: '1' },\n  { text: 'Project 2', value: '2' },\n  { text: 'Project 3', value: '3' },\n];\nconst dropdownOptions = {\n  ariaLabel: 'Project dropdown',\n  items,\n};\n\nconst WithOptionalFeaturesTemplate = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-main-menu\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    notification-count=${notificationCount}\n    show-notifications\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${defaultLogo}\n    .dropdownOptions=${dropdownOptions}\n    .selectedDropdownItem=${items[1]}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n\n    <modus-list slot=\"addMenu\">\n      <modus-list-item>Menu Item 1</modus-list-item>\n      <modus-list-item>Menu Item 2</modus-list-item>\n    </modus-list>\n\n    <div slot=\"notificationMenu\">Render your own notification menu.</div>\n    <div slot=\"profileMenu\">Render your own profile menu content.</div>\n  </modus-navbar>\n`;\n\nexport const WithOptionalFeatures = WithOptionalFeaturesTemplate.bind({});\nWithOptionalFeatures.args = {\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Default',\n  profileMenuOptions: {\n    avatarUrl: workingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n    links: [\n      {\n        id: 'link1',\n        display: 'Link 1',\n        icon: 'moon',\n      },\n      {\n        id: 'link2',\n        display: 'Link 2',\n        icon: 'sun',\n      },\n    ],\n    tooltip: {\n      text: 'User Profile Menu',\n    },\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n"
    },
    "modus-navbar-apps-menu.tsx": {
      "props": [
        {
          "name": "apps",
          "comment": "// The 'apps' property holds an array of ModusNavbarApp objects which represent individual applications.\n// Each object contains details such as logo URL, name, URL, and optionally a description and category.\n// The component uses this prop to render a list of app items in the menu, where each item displays its logo, name,\n// description, and category if required, and handles clicks to open the corresponding app URL."
        },
        {
          "name": "reverse",
          "comment": "// The 'reverse' prop determines the layout direction by conditionally adding a \"reverse\" class to the component's container. When true, the component applies styles for a reversed layout."
        }
      ],
      "events": [
        {
          "name": "appOpen",
          "comment": "// The 'appOpen' event is emitted when a user clicks an app, providing the clicked app's details to parent components or services for further handling (e.g., analytics, navigation state updates)."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-navbar-button-menu.tsx": {
      "props": [
        {
          "name": "reverse",
          "comment": "// The 'reverse' prop is a boolean that, when set to true, adds the 'reverse' CSS class to the component's root div. This allows styling rules defined for the 'reverse' class to be applied, providing a way to adjust the component's appearance (e.g., reverse the layout or colors) based on the prop's value."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-navbar-main-menu.tsx": {
      "props": [
        {
          "name": "parentNavbar",
          "comment": "// The 'parentNavbar' prop holds a reference to the parent navbar element. It is used to retrieve the navbar\u2019s dimensions (via getBoundingClientRect) so that the component can compute and apply appropriate layout styles (position and available height) for the main menu container based on the navbar\u2019s position."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-navbar-notifications-menu.tsx": {
      "props": [
        {
          "name": "reverse",
          "comment": "// The 'reverse' prop allows users to conditionally apply a 'reverse' CSS styling to the notifications menu.\n// When set to true, it adds the 'reverse' class to the root div, enabling alternative styling (e.g., mirrored layout)."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-navbar-profile-menu.tsx": {
      "props": [
        {
          "name": "avatarUrl",
          "comment": "// The 'avatarUrl' prop holds the URL of the user's avatar image. When provided, the component renders an <img> element displaying the avatar; if it\u2019s absent, the component falls back to showing the user's initials."
        },
        {
          "name": "email",
          "comment": "// The \"email\" prop holds the user's email address, which is displayed in the profile menu to show the user's contact information."
        },
        {
          "name": "initials",
          "comment": "// The 'initials' prop provides fallback text (usually the user's initials) to display when no avatar image URL is supplied via the 'avatarUrl' prop."
        },
        {
          "name": "links",
          "comment": "// The 'links' prop holds an array of link objects (of type ModusNavbarProfileMenuLink) that define additional navigation options or actions in the profile menu. Each link typically includes properties such as an identifier, display text, and an optional icon. When provided, the component renders a clickable list of these links, and clicking on any link emits the 'linkClick' event with the corresponding link's id, enabling further application-specific behavior."
        },
        {
          "name": "reverse",
          "comment": "// The 'reverse' prop is a boolean flag that, when true, adds a 'reverse' CSS class to the component's container. This class is used to adjust the layout or styling (typically to \"flip\" the order or direction of menu items) without changing the underlying component structure."
        },
        {
          "name": "username",
          "comment": "// The 'username' prop holds the user's name and is displayed in the profile menu UI,\n// allowing the component to show the appropriate user identification."
        },
        {
          "name": "variant",
          "comment": "// The 'variant' prop determines the visual styling of the profile menu.\n// When 'variant' is 'default', no extra styling class is applied, but if set to another supported value (e.g., 'blue'),\n// a corresponding CSS class (like 'profile-menu-blue') is added to modify the menu's appearance accordingly."
        }
      ],
      "events": [
        {
          "name": "linkClick",
          "comment": "// The 'linkClick' event is emitted whenever a user clicks on a profile menu link. It sends the clicked link's id to parent components, allowing them to handle navigation or other actions based on the user's selection."
        },
        {
          "name": "signOutClick",
          "comment": "// The 'signOutClick' event is emitted when the user initiates the sign out action\u2014either by clicking the sign-out element or by pressing the \"Enter\" key (via keyboard navigation). Parent components can listen for this event to trigger the corresponding sign-out behavior or logic."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-navbar-search-overlay.tsx": {
      "props": [],
      "events": [
        {
          "name": "close",
          "comment": "// The 'close' event is emitted when the user clicks the close button (or presses 'Enter' on it). It signals that the search overlay should be dismissed, allowing the parent component to listen for the event and act accordingly (e.g., hide the overlay)."
        },
        {
          "name": "search",
          "comment": "// The 'search' event is emitted when the user changes the value in the search input field. It sends the updated search string to any parent or listening component, allowing external components to react to the new search query (e.g., filtering data or updating UI)."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-number-input.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop is used to provide an accessible label for the input element,\n// enhancing screen reader support by explicitly defining a descriptive label for users\n// with assistive technologies, even if a visible label is not present."
        },
        {
          "name": "currency",
          "comment": "// The 'currency' prop lets you specify a currency code (e.g., 'USD' or 'EUR') so that when a numeric value is displayed (especially on blur), it is formatted as a currency string using Intl.NumberFormat\u2014applying currency-specific formatting based on the provided currency (and locale, if available)."
        },
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop indicates whether the input should be disabled, meaning it prevents user interaction and applies a disabled styling state when true."
        },
        {
          "name": "errorText",
          "comment": "// The 'errorText' prop allows the developer to pass in an error message that will be displayed below the input field when the component is in an error state. This helps provide feedback to the user by visually indicating that there is an issue with the input value."
        },
        {
          "name": "helperText",
          "comment": "// The helperText prop provides optional guidance or contextual information that is displayed below the input field to assist the user in understanding the expected input."
        },
        {
          "name": "label",
          "comment": "// The 'label' prop provides an optional, descriptive text that is rendered above the input field as a label element,\n// helping users identify the input and improving accessibility by associating the label with the input via the generated ID."
        },
        {
          "name": "locale",
          "comment": "// The 'locale' prop specifies the locale (e.g., \"en-US\", \"fr-FR\") to be used with Intl.NumberFormat for formatting the numeric value.\n// When provided (with or without the 'currency' prop), it localizes the displayed number (or currency) format in the input when it loses focus."
        },
        {
          "name": "maxValue",
          "comment": "// The 'maxValue' prop defines the maximum permissible numeric value for the input.\n// It is used as the HTML 'max' attribute and also for accessibility purposes via 'ariaValuemax',\n// helping both browsers and assistive technologies enforce and communicate input restrictions."
        },
        {
          "name": "minValue",
          "comment": "// The 'minValue' prop specifies the minimum numeric value the input can accept. \n// It is used to set the lowest allowed value in the input's attributes (e.g., via the min attribute on the input element) and to support accessibility by reflecting the minimum acceptable value via aria properties, ensuring that user input adheres to defined constraints."
        },
        {
          "name": "placeholder",
          "comment": "// The \"placeholder\" prop provides an optional hint that's displayed in the input field when it has no value, guiding users on what to enter."
        },
        {
          "name": "readOnly",
          "comment": "// The 'readOnly' prop determines whether the input field is editable. When set to true, users can view but not modify the input value, as it directly maps to the input element's readOnly attribute."
        },
        {
          "name": "required",
          "comment": "// The 'required' prop indicates whether a value is mandatory for the input field.\n// When set to true, the component adds a visual indicator (an asterisk) next to the label\n// and sets the 'aria-required' attribute to ensure accessibility by informing assistive technologies\n// that the input must be filled out."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop controls the input's visual size by accepting either 'medium' or 'large' (defaulting to 'medium'). It is used to determine the appropriate CSS class through a lookup (classBySize map), which adjusts the styling of the input container accordingly."
        },
        {
          "name": "step",
          "comment": "// The 'step' prop defines the increment/decrement interval for the input value.\n// When the input type is 'number', this value sets the step attribute,\n// determining by how much the value increases or decreases (e.g., via arrow keys or spinner controls)."
        },
        {
          "name": "textAlign",
          "comment": "// The 'textAlign' prop allows the consumer to set the text alignment within the input field.\n// It accepts either 'left' or 'right' (default is 'left') and applies a corresponding CSS class\n// (e.g., \"text-align-left\") to control the input's text alignment visually."
        },
        {
          "name": "validText",
          "comment": "// 'validText' is an optional property that holds a message to display when the input value is valid.\n// If provided and no error message exists, the component renders this text below the input as positive feedback (using the 'sub-text valid' class)."
        }
      ],
      "events": [
        {
          "name": "valueChange",
          "comment": "// The \"valueChange\" event notifies external listeners whenever the input's value changes. \n// When the user types in the input, the component updates its internal mutable \"value\" property and emits \"valueChange\" with the new value, enabling parent components or any consumer to react to the update."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-pagination.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The \"ariaLabel\" prop provides a custom accessible label for the pagination navigation, improving screen reader usability by describing the purpose or context of the pagination controls."
        },
        {
          "name": "maxPage",
          "comment": "// The 'maxPage' prop defines the highest page number available in the pagination component. It is used to determine the total range of pages to display, whether to insert ellipsis in the pagination control, and to enable/disable the \"Next\" button when the active page reaches the maximum limit."
        },
        {
          "name": "minPage",
          "comment": "// The 'minPage' prop specifies the starting page number for the pagination. It defines the lowest (or first) page value that can be selected, influencing how the pagination range and ellipsis are calculated."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop dictates the overall scale of the pagination controls\u2014affecting both the rendered icon sizes and the applied CSS classes. Accepting 'small', 'medium', or 'large' (with 'medium' as the default), it allows the component\u2019s appearance (like icon dimensions and spacing) to be adjusted according to design needs."
        }
      ],
      "events": [
        {
          "name": "pageChange",
          "comment": "// The \"pageChange\" event is emitted every time the active page changes. It notifies parent components (or any listeners) of the updated page number, allowing them to react to pagination changes accordingly."
        }
      ],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-pagination-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Pagination',\n  argTypes: {\n    activePage: {\n      name: 'active-page',\n      description: \"The pagination's active page\",\n      table: {\n        type: { summary: 'number' },\n      },\n      type: { required: true },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The pagination's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxPage: {\n      name: 'max-page',\n      description: \"The pagination's maximum page\",\n      table: {\n        type: { summary: 'number' },\n      },\n      type: { required: true },\n    },\n    minPage: {\n      name: 'min-page',\n      description: \"The pagination's minimum page\",\n      table: {\n        type: { summary: 'number' },\n      },\n      type: { required: true },\n    },\n    prevPageButtonText: {\n      name: 'prev-page-button-text',\n      description: 'The previous page button text. If not set, an icon control will be used.',\n      table: {\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    nextPageButtonText: {\n      name: 'next-page-button-text',\n      description: 'The next page button text. If not set, an icon control will be used.',\n      table: {\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    size: {\n      options: ['small', 'medium', 'large'],\n      type: 'select',\n      description: 'The size of the pagination',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'small' | 'medium' | 'large'` },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'requiredFirst' },\n    actions: {\n      handles: ['pageChange'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nexport const Default = ({ activePage, ariaLabel, maxPage, minPage, prevPageButtonText, nextPageButtonText, size }) => html`\n  <modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n    Default\n  </modus-pagination>\n`;\nDefault.args = {\n  activePage: '4',\n  ariaLabel: '',\n  maxPage: '100',\n  minPage: '1',\n  prevPageButtonText: '',\n  nextPageButtonText: '',\n  size: 'medium',\n};\n\nexport const Large = ({ activePage, ariaLabel, maxPage, minPage, prevPageButtonText, nextPageButtonText, size }) => html`\n  <modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n    Large\n  </modus-pagination>\n`;\nLarge.args = {\n  activePage: '4',\n  ariaLabel: '',\n  maxPage: '100',\n  minPage: '1',\n  prevPageButtonText: '',\n  nextPageButtonText: '',\n  size: 'large',\n};\n\nexport const Small = ({ activePage, ariaLabel, maxPage, minPage, prevPageButtonText, nextPageButtonText, size }) => html`\n  <modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n    Small\n  </modus-pagination>\n`;\nSmall.args = {\n  activePage: '4',\n  ariaLabel: '',\n  maxPage: '100',\n  minPage: '1',\n  prevPageButtonText: '',\n  nextPageButtonText: '',\n  size: 'small',\n};\n\nexport const PrevNextTextButton = ({\n  activePage,\n  ariaLabel,\n  maxPage,\n  minPage,\n  prevPageButtonText,\n  nextPageButtonText,\n  size,\n}) => html`\n  <modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n  </modus-pagination>\n`;\nPrevNextTextButton.args = {\n  activePage: '4',\n  ariaLabel: '',\n  maxPage: '100',\n  minPage: '1',\n  prevPageButtonText: 'Prev',\n  nextPageButtonText: 'Next',\n  size: 'medium',\n};\n"
    },
    "modus-progress-bar.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an accessible label for the progress bar, allowing assistive technologies like screen readers to describe its purpose to users."
        },
        {
          "name": "backgroundColor",
          "comment": "// The 'backgroundColor' prop allows users to specify a custom background color for the progress bar container.\n// If provided, this color is applied via inline styles (through getProgressBarStyle()), replacing any default background styling."
        },
        {
          "name": "color",
          "comment": "// The 'color' prop specifies the foreground or fill color of the progress bar,\n// which determines the color of the progressing indicator. It is used in the style\n// of the inner progress element, but if not set, a default styling class is applied."
        },
        {
          "name": "mode",
          "comment": "// The 'mode' prop defines the progress bar's behavior: \n// 'determinate' mode shows a fixed percentage based on the current value (with proper aria attributes) \n// while 'indeterminate' mode displays a continuously animated indicator without specifying progress."
        },
        {
          "name": "size",
          "comment": "// The \"size\" prop determines the visual size variant of the progress bar. It accepts 'default', 'small', or 'compact', and based on its value, the component applies corresponding CSS classes for layout/styling adjustments (e.g., also controlling whether the progress text is displayed)."
        },
        {
          "name": "text",
          "comment": "// The 'text' prop holds the optional text to display on the progress bar,\n// shown only when the progress bar is in 'determinate' mode and set to 'default' size."
        },
        {
          "name": "textColor",
          "comment": "// The 'textColor' prop specifies the color of the progress bar\u2019s text. \n// When provided, it sets the text color via inline styling; if not, the component falls back to a default CSS class for text color."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-progress-bar-storybook-docs.mdx';\nimport { html } from 'lit-html';\n\nexport default {\n  title: 'Components/Progress Bar',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The progress bar's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    backgroundColor: {\n      name: 'background-color',\n      description: \"The progress bar's background-color\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    color: {\n      description: \"The progress bar's color\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxValue: {\n      name: 'max-value',\n      description: \"The progress bar's maximum value\",\n      table: {\n        defaultValue: { summary: 100 },\n        type: { summary: 'number' },\n      },\n    },\n    mode: {\n      name: 'mode',\n      options: ['determinate', 'indeterminate'],\n      type: 'select',\n      description: \"The progress bar's mode\",\n      table: {\n        defaultValue: { summary: 'determinate' },\n        type: { summary: \"'determinate' | 'indeterminate'\" },\n      },\n    },\n    minValue: {\n      name: 'min-value',\n      description: \"The progress bar's minimum value\",\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n    size: {\n      options: ['default', 'small', 'compact'],\n      type: 'select',\n      description: \"The progress bar's size\",\n      table: {\n        defaultValue: { summary: 'default' },\n        type: { summary: `'default' | 'small' | 'compact'` },\n      },\n    },\n    text: {\n      description: \"The progress bar's text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    textColor: {\n      name: 'text-color',\n      description: \"The progress bar's text color\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"The progress bar's value\",\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\nconst Template = ({ ariaLabel, backgroundColor, color, maxValue, minValue, mode, size, text, textColor, value }) => html`\n  <modus-progress-bar\n    aria-label=${ariaLabel}\n    background-color=${backgroundColor}\n    color=${color}\n    max-value=${maxValue}\n    mode=${mode}\n    min-value=${minValue}\n    size=${size}\n    text=${text}\n    text-color=${textColor}\n    value=${value}>\n  </modus-progress-bar>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: 'progress bar',\n  backgroundColor: '',\n  color: '',\n  maxValue: 100,\n  mode: 'determinate',\n  minValue: 0,\n  size: 'default',\n  text: 'Some progress!',\n  textColor: '',\n  value: 50,\n};\n\nexport const Small = Template.bind({});\nSmall.args = {\n  ariaLabel: 'progress bar',\n  backgroundColor: '',\n  color: '',\n  maxValue: 100,\n  mode: 'determinate',\n  minValue: 0,\n  size: 'small',\n  text: '',\n  textColor: '',\n  value: 50,\n};\n\nexport const Compact = Template.bind({});\nCompact.args = {\n  ariaLabel: 'progress bar',\n  backgroundColor: '',\n  color: '',\n  maxValue: 100,\n  mode: 'determinate',\n  minValue: 0,\n  size: 'compact',\n  text: '',\n  textColor: '',\n  value: 50,\n};\n\nexport const Indeterminate = Template.bind({});\nIndeterminate.args = {\n  ariaLabel: 'progress bar',\n  backgroundColor: '',\n  color: '',\n  maxValue: 100,\n  mode: 'indeterminate',\n  minValue: 0,\n  size: 'default',\n  text: 'Indeterminate progress!',\n  textColor: '',\n  value: 50,\n};\n"
    },
    "modus-radio-group.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an accessible label for the radio group container, ensuring that screen readers and other assistive technologies announce a descriptive name for the group."
        },
        {
          "name": "name",
          "comment": "// The 'name' prop defines the radio group name, ensuring that all individual radio buttons in the group share the same name attribute.\n// This grouping is essential for native form behavior, where only one radio button within the same named group can be selected at a time."
        }
      ],
      "events": [
        {
          "name": "buttonClick",
          "comment": "// The 'buttonClick' event is a custom event that the component emits whenever a radio button is clicked. It sends the new checked radio button's ID to any parent component or listener, allowing them to react (e.g., update state or trigger further actions) based on the user's selection."
        }
      ],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-radio-group-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Radio Group',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The radio group's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      description: 'If true, the radio group is disabled',\n      type: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    name: {\n      description: 'The radio button group name. Used to group individual radio elements into one group.',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    size: {\n      options: ['small', 'medium'],\n      type: 'select',\n      description: 'The size of the radio group',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['buttonClick'],\n    },\n    controls: { expanded: true },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, disabled, name, size }) => html`\n  <modus-radio-group aria-label=${ariaLabel} ?disabled=${disabled} name=${name} size=${size}></modus-radio-group>\n  ${setRadioGroup()}\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  disabled: false,\n  name: '',\n  size: 'medium',\n};\nconst setRadioGroup = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('modus-radio-group').radioButtons = [\n      {\n        id: '0',\n        label: 'Radio 1',\n      },\n      {\n        checked: true,\n        id: '1',\n        label: 'Radio 2',\n      },\n      {\n        id: '2',\n        label: 'Radio 3'\n      }\n    ];\n  `;\n\n  return tag;\n};\n"
    },
    "modus-select.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an accessible name for the select element.\n// If provided, its value is assigned to the select's aria-label attribute, ensuring that users\n// of assistive technologies receive a clear description of the control when no visible label is available."
        },
        {
          "name": "disabled",
          "comment": "The purpose of the \"disabled\" prop is to control whether the select input can be interacted with. When \"disabled\" is set to true, it prevents the user from making any selections by applying the disabled attribute to the select element and also adding a corresponding CSS class for visual styling.\n\nExample concise comment:\n\n// When set to true, this prop disables the select input, preventing user interactions and applying disabled styling."
        },
        {
          "name": "errorText",
          "comment": "// The 'errorText' prop is an optional string that, when provided, displays an error message below the select input. It also triggers error-specific styling on the component, alerting users to a validation issue."
        },
        {
          "name": "helperText",
          "comment": "// helperText: Optional guidance text that appears below the select input.\n// It provides additional context or instructions for the user and is rendered\n// when there is no errorText or validText present."
        },
        {
          "name": "label",
          "comment": "// The 'label' prop holds the text that is displayed as the input's label. When provided, it renders a visible label for the select element (using the 'htmlFor' attribute to associate it with the select)\n// and can be combined with the 'required' prop to indicate mandatory fields."
        },
        {
          "name": "options",
          "comment": "// The 'options' prop holds an array of items that will be used to populate the dropdown list. Each object in the array represents a selectable option, with its display value determined by the property specified in 'optionsDisplayProp'. When an option is selected, the component emits its valueChange event using the corresponding object from the array."
        },
        {
          "name": "optionsDisplayProp",
          "comment": "// 'optionsDisplayProp' specifies the key of each option object to use for display in the dropdown.\n// It tells the component which property of the option should be rendered as option text,\n// and is also used to check if an option matches the selected value."
        },
        {
          "name": "required",
          "comment": "// The 'required' prop indicates that the select field must have a value. When set to true, it adds a visual indicator (an asterisk) next to the label and sets the select's aria-required attribute for accessibility, signaling to users and assistive technologies that a selection is mandatory."
        },
        {
          "name": "size",
          "comment": "// The \"size\" prop controls the visual appearance of the select input by allowing a choice between 'medium' and 'large'. It determines which CSS class is applied (via the classBySize map) to adjust the component's size, defaulting to 'medium' if not specified."
        },
        {
          "name": "validText",
          "comment": "// 'validText' is an optional property used to display a positive validation message below the select input.\n// When provided (and if there's no 'errorText'), its value is rendered as a validation message to inform the user\n// that the input or selection is valid."
        },
        {
          "name": "value",
          "comment": "// The 'value' prop holds the currently selected option's value for the select component.\n// It initializes the component's internal state (internalValue) when the component connects,\n// and any changes to it are watched to update this internal state. When the user selects a new option,\n// the component emits a 'valueChange' event carrying the new value."
        }
      ],
      "events": [
        {
          "name": "valueChange",
          "comment": "// 'valueChange' is an event that gets emitted whenever a new option is selected from the dropdown. It notifies the parent component about the updated value, allowing it to sync or react to the change accordingly."
        },
        {
          "name": "inputBlur",
          "comment": "// The 'inputBlur' event is emitted whenever the select element loses focus.\n// This allows parent components to listen for blur events to trigger actions such as validation or UI updates when the user navigates away from the select field."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-sentiment-scale.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an accessible label for the sentiment scale component.\n// Its value is applied to the container's aria-label attribute, which assists screen readers \n// in describing the purpose or context of the component to users with visual impairments."
        },
        {
          "name": "type",
          "comment": "// The 'type' prop determines which sentiment icon set (e.g. thumbs or smileys) is rendered by the component.\n// By default, it uses 'smileys', but if set to 'thumbs', the component will display thumbs icons.\n// The prop value is used in methods like getSentimentScaleMap() and influences aspects such as icon size.\n\n// The prop 'type' thus allows developers to select the desired style for the sentiment scale."
        }
      ],
      "events": [
        {
          "name": "sentimentSelection",
          "comment": "// The sentimentSelection event is emitted whenever a user selects a sentiment (via click or Enter key), sending the selected sentiment value to parent components so they can update their state accordingly."
        }
      ],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-sentiment-scale-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\n//changed\nexport default {\n  title: 'Components/Sentiment Scale',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The Sentiment Scale's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    iconsType: {\n      name: 'type',\n      options: ['smileys', 'thumbs'],\n      type: 'select',\n    },\n    disabled: {\n      description: 'Whether the sentiment-scale is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      page: docs,\n    },\n    actions: {\n      handles: ['sentimentSelection'],\n    },\n    controls: {\n      expanded: true,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, iconsType, disabled }) => html`\n  <modus-sentiment-scale aria-label=${ariaLabel} type=\"${iconsType}\" ?disabled=\"${disabled}\"></modus-sentiment-scale>\n`;\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  iconsType: 'smileys',\n  disabled: false,\n};\n"
    },
    "modus-side-navigation.tsx": {
      "props": [
        {
          "name": "data",
          "comment": "// The 'data' prop accepts an array of navigation item objects that the component uses to build and render the navigation menu structure and hierarchy dynamically."
        },
        {
          "name": "mode",
          "comment": "// The \"mode\" prop determines how the side navigation interacts with the main content.\n// In \"overlay\" mode (default), the navigation panel appears on top of the content;\n// in \"push\" mode, the panel pushes the target content aside (by applying a left margin equal to maxWidth) when expanded."
        },
        {
          "name": "targetContent",
          "comment": "// The 'targetContent' prop specifies a CSS selector for the main page content element.\n// When the side navigation expands or collapses (especially in 'push' mode),\n// the component uses this selector to adjust the target element\u2019s margin (e.g., margin-left)\n// so that the main content aligns appropriately with the navigation panel."
        }
      ],
      "events": [
        {
          "name": "sideNavExpand",
          "comment": "// The 'sideNavExpand' event is emitted whenever the side navigation panel's expanded \n// state changes. It passes a boolean (true for expanded, false for collapsed) to allow \n// external consumers (parent components or event listeners) to respond accordingly, \n// such as performing additional UI updates or layout adjustments based on the panel's state."
        }
      ],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-side-navigation-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { useEffect } from '@storybook/preview-api';\n\nexport default {\n  title: 'Components/Side Navigation',\n  argTypes: {\n    collapseOnClickOutside: {\n      name: 'collapse-on-click-outside',\n      description: 'To choose whether to collapse the panel when clicked outside',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    data: {\n      description: 'Data property to create the side navigation items',\n      table: {\n        type: { summary: 'ModusSideNavigationItemInfo' },\n      },\n    },\n    maxWidth: {\n      name: 'max-width',\n      description: 'Maximum width of the side navigation panel in an expanded state',\n      table: {\n        defaultValue: { summary: '256px' },\n        type: { summary: 'string' },\n      },\n    },\n    mode: {\n      options: ['overlay', 'push'],\n      type: 'select',\n      description:\n        'Mode to make side navigation either overlay or push the content for the selector specified in `targetContent`',\n      table: {\n        defaultValue: { summary: `'overlay'` },\n        type: {\n          summary: `'overlay' | 'push'`,\n        },\n      },\n    },\n    expanded: {\n      description: 'The expanded state of side navigation panel and items',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    isHeader: {\n      name: 'is-header',\n      description: 'To enable header dropdown feature',\n      table: {\n        type: { summary: 'ModusHeaderNavigationItemInfo' },\n      },\n    },\n    targetContent: {\n      name: 'target-content',\n      description:\n        \"Specify the selector for the page's content for which paddings and margins will be set by side navigation based on the `mode`\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    actions: {\n      handles: ['sideNavExpand', 'sideNavItemClicked', 'mainMenuClick', 'sideNavItemFocus', 'sideNavItemHeaderClicked'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    viewMode: 'docs',\n  },\n  decorators: [\n    withActions,\n    (Story) => {\n      useEffect(() => {\n        const handleHelpOpen = () => {\n          const panel = document.querySelector('modus-side-navigation');\n          if (panel) {\n            const isExpanded = panel.getAttribute('expanded') === 'true';\n            panel.setAttribute('expanded', (!isExpanded).toString());\n          }\n        };\n        const blueTheme = `--modus-side-navigation-link-color:#ffffff;--modus-side-navigation-bg:#0e416c;--modus-side-navigation-item-color:#ffffff;--modus-side-navigation-item-active-bg:#217cbb;--modus-side-navigation-item-hover-bg:#0063a3;--modus-side-navigation-item-icon-color:#ffffff;--modus-side-navigation-item-chevron-color:#ffffff;--modus-side-navigation-item-icon-filter:invert(100%) sepia(0%) saturate(24%) hue-rotate(114deg) brightness(108%) contrast(108%);`;\n        const sideNav = document.querySelector('modus-side-navigation');\n        const switchTheme = () => {\n          const switchTheme = document.querySelector('#switch-theme');\n          if (switchTheme.checked) {\n            sideNav.style = blueTheme;\n          } else {\n            sideNav.style = '';\n          }\n        };\n        const switchMode = () => {\n          const switchMode = document.querySelector('#switch-mode');\n\n          if (switchMode.checked) {\n            sideNav.mode = sideNav.mode === 'push' ? 'overlay' : 'push';\n          }\n        };\n        document.addEventListener('switchClick', switchMode);\n        document.addEventListener('switchClick', switchTheme);\n        document.addEventListener('mainMenuClick', handleHelpOpen);\n\n        Array.from(document.querySelectorAll('modus-side-navigation-item')).forEach((item) => {\n          item.addEventListener('sideNavItemClicked', (e) => {\n            executeListener(e, () => {\n              const panel = document.querySelector('#panelcontent');\n              document.querySelector('#sidenav-content-title')?.remove();\n              const el = document.createElement('h3');\n              el.id = 'sidenav-content-title';\n              el.innerHTML = document.querySelector(`#${e.detail.id}`)?.label || 'Home page';\n              panel.insertBefore(el, document.querySelector('#overview'));\n            });\n          });\n        });\n\n        const initialize = () => {\n          const sidenav = document.querySelector('#dataTemplate #sideNav');\n          sidenav.data = [\n            {\n              id: 'home-menu',\n              menuIcon: 'home',\n              label: 'Home page 1',\n              children: [\n                {\n                  id: 'home-menu-2',\n                  menuIcon: 'home',\n                  label: 'Home page 2',\n                  onSideNavItemClicked: (e) => {\n                    executeListener(e, () => {\n                      if (e.detail) {\n                        const panel = document.querySelector('#panelcontent');\n                        document.querySelector('#sidenav-content-title')?.remove();\n                        const el = document.createElement('h3');\n                        el.id = 'sidenav-content-title';\n                        el.innerHTML = e.target?.label || 'Home page';\n                        panel.insertBefore(el, document.querySelector('#overview'));\n                      }\n                    });\n                  },\n                },\n                {\n                  id: 'usage-menu-2',\n                  children: [\n                    {\n                      id: 'home-menu-3',\n                      menuIcon: 'home',\n                      label: 'Home page 3',\n                      onSideNavItemClicked: (e) => {\n                        executeListener(e, () => {\n                          if (e.detail) {\n                            const panel = document.querySelector('#panelcontent');\n                            document.querySelector('#sidenav-content-title')?.remove();\n                            const el = document.createElement('h3');\n                            el.id = 'sidenav-content-title';\n                            el.innerHTML = e.target?.label || 'Home page';\n                            panel.insertBefore(el, document.querySelector('#overview'));\n                          }\n                        });\n                      },\n                    },\n                  ],\n                  menuIcon: 'flowchart',\n                  label: 'Usage page 2',\n                },\n              ],\n            },\n            {\n              id: 'usage-menu',\n              menuIcon: 'flowchart',\n              label: 'Usage page 1',\n              onSideNavItemClicked: (e) => {\n                executeListener(e, () => {\n                  if (e.detail) {\n                    const panel = document.querySelector('#panelcontent');\n                    document.querySelector('#sidenav-content-title')?.remove();\n                    const el = document.createElement('h3');\n                    el.id = 'sidenav-content-title';\n                    el.innerHTML = e.target?.label || 'Home page';\n                    panel.insertBefore(el, document.querySelector('#overview'));\n                  }\n                });\n              },\n            },\n            {\n              id: 'styles-menu',\n              menuIcon: 'bar_graph_line',\n              label: 'Styles page 1',\n              onSideNavItemClicked: (e) => {\n                executeListener(e, () => {\n                  if (e.detail) {\n                    const panel = document.querySelector('#panelcontent');\n                    document.querySelector('#sidenav-content-title')?.remove();\n                    const el = document.createElement('h3');\n                    el.id = 'sidenav-content-title';\n                    el.innerHTML = e.target?.label || 'Home page';\n                    panel.insertBefore(el, document.querySelector('#overview'));\n                  }\n                });\n              },\n            },\n            {\n              id: 'accessibility-menu',\n              menuIcon: 'screen',\n              label: 'Accessibility page 1',\n              onSideNavItemClicked: (e) => {\n                executeListener(e, () => {\n                  if (e.detail) {\n                    const panel = document.querySelector('#panelcontent');\n                    document.querySelector('#sidenav-content-title')?.remove();\n                    const el = document.createElement('h3');\n                    el.id = 'sidenav-content-title';\n                    el.innerHTML = e.target?.label || 'Home page';\n                    panel.insertBefore(el, document.querySelector('#overview'));\n                  }\n                });\n              },\n            },\n          ];\n        };\n        const sidenav = document.querySelector('#dataTemplate #sideNav');\n        if (sidenav) {\n          initialize();\n        }\n        return () => {\n          document.removeEventListener('switchClick', switchMode);\n          document.removeEventListener('switchClick', switchTheme);\n          document.removeEventListener('mainMenuClick', handleHelpOpen);\n          document.removeEventListener('mainMenuClick', handleHelpOpen);\n          Array.from(document.querySelectorAll('modus-side-navigation-item')).forEach((item) => {\n            item.removeEventListener('sideNavItemClicked', handleHelpOpen);\n          });\n        };\n      }, []);\n      return Story();\n    },\n  ],\n};\n\nconst DefaultTemplate = ({ collapseOnClickOutside, maxWidth, mode, expanded, targetContent }) => html`\n  <div id=\"defaultTemplate\">\n    <div\n      style=\"width: 100%; align-items: center; height: 56px; box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;\">\n      <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n    </div>\n\n    <div\n      id=\"container\"\n      style=\"display: flex; min-height: 500px; overflow-y: auto; position: relative; box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n      <modus-side-navigation\n        max-width=${maxWidth}\n        id=\"sideNav\"\n        collapse-on-click-outside=${collapseOnClickOutside}\n        mode=${mode}\n        expanded=${expanded}\n        target-content=${targetContent}>\n        <modus-side-navigation-item id=\"home-menu\" label=\"Home page\">\n          <modus-icon name=\"home\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n        <modus-side-navigation-item id=\"usage-menu\" label=\"Usage\">\n          <modus-icon name=\"flowchart\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n        <modus-side-navigation-item id=\"styles-menu\" label=\"Styles\">\n          <modus-icon name=\"bar_graph_line\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n        <modus-side-navigation-item id=\"accessibility-menu\" label=\"Accessibility\">\n          <modus-icon name=\"screen\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n      </modus-side-navigation>\n\n      <div id=\"panelcontent\" style=\"padding: 10px;\">\n        <div id=\"overview\">\n          <p>\n            The side navigation of an application provides context through accessible menu options and positions a consistent\n            component to connect to various pages in the application.\n          </p>\n          <p>\n            The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n            content. The component is designed to add side content to a fullscreen application. It is activated through the\n            \u201chamburger\u201d menu in the Navbar.\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\nexport const Default = DefaultTemplate.bind({});\nDefault.args = {\n  collapseOnClickOutside: true,\n  maxWidth: '300px',\n  mode: 'overlay',\n  expanded: false,\n  targetContent: '#defaultTemplate #panelcontent',\n};\n\nconst SideNavigationWithDataTemplate = ({ collapseOnClickOutside, maxWidth, mode, expanded, targetContent }) => html`\n  <div id=\"dataTemplate\">\n    <modus-switch id=\"switch-theme\" label=\"Enable blue theme\"></modus-switch>\n    <br />\n    <modus-switch id=\"switch-mode\" label=\"Enable Push Side Navigation\"></modus-switch>\n    <div\n      style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;\">\n      <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n    </div>\n\n    <div\n      id=\"container\"\n      style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n      <modus-side-navigation\n        max-width=${maxWidth}\n        id=\"sideNav\"\n        collapse-on-click-outside=${collapseOnClickOutside}\n        mode=${mode}\n        expanded=${expanded}\n        target-content=${targetContent}>\n      </modus-side-navigation>\n\n      <div id=\"panelcontent\" style=\"padding:10px; transition: all 0.25s linear 0s;\">\n        <div id=\"overview\">\n          <p>\n            The side navigation of an application provides context through accessible menu options and positions a consistent\n            component to connect to various pages in the application.\n          </p>\n          <p>\n            The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n            content. The component is designed to add side content to a fullscreen application. It is activated through the\n            \u201chamburger\u201d menu in the Navbar.\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\n\nexport const SideNavigationWithData = (args) => {\n  const { collapseOnClickOutside, maxWidth, mode, expanded, targetContent } = args;\n\n  // Decorator pattern applied here to dynamically configure the component properties\n  return SideNavigationWithDataTemplate({\n    collapseOnClickOutside,\n    maxWidth: maxWidth || '300px', // Defaulting to '300px' if not provided\n    mode: mode || 'overlay', // Default to 'overlay' mode if not provided\n    expanded: expanded !== undefined ? expanded : true, // Default to expanded if not provided\n    targetContent: targetContent || '#dataTemplate #panelcontent', // Default target content selector\n  });\n};\n\nSideNavigationWithData.args = {\n  collapseOnClickOutside: true,\n  maxWidth: '300px',\n  mode: 'overlay',\n  expanded: true,\n  targetContent: '#dataTemplate #panelcontent',\n};\n\nexport const SideNavigationWithHeader = (args) => {\n  const { isHeader, maxWidth, mode, expanded, targetContent, collapseOnClickOutside } = args;\n\n  return html`\n    <div id=\"dataTemplateWithHeader\">\n      <modus-switch id=\"switch-theme\" label=\"Enable blue theme\"></modus-switch>\n      <br />\n      <modus-switch id=\"switch-mode\" label=\"Enable Push Side Navigation\"></modus-switch>\n      <div\n        style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;\">\n        <modus-navbar id=\"navbarWithHeader\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n      </div>\n\n      <div\n        id=\"container\"\n        style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n        <modus-side-navigation\n          max-width=${maxWidth}\n          id=\"sideNavWithHeader\"\n          target-content=${targetContent}\n          collapse-on-click-outside=${collapseOnClickOutside}\n          mode=\"overlay\"\n          mode=${mode}\n          expanded=${expanded}\n          isHeader=${JSON.stringify(isHeader)}>\n        </modus-side-navigation>\n        <div id=\"panelcontent\" style=\"padding:10px; transition: all 0.25s linear 0s\">\n          <div id=\"overview\">\n            <p>\n              The side navigation of an application provides context through accessible menu options and positions a\n              consistent component to connect to various pages in the application.\n            </p>\n            <p>\n              The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s\n              primary content. The component is designed to add side content to a fullscreen application. It is activated\n              through the \u201chamburger\u201d menu in the Navbar.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    ${sideNavWithHeaderScript()}\n  `;\n};\n\nSideNavigationWithHeader.args = {\n  collapseOnClickOutside: true,\n  maxWidth: '300px',\n  mode: 'overlay',\n  expanded: true,\n  targetContent: '#dataTemplateWithHeader #panelcontent',\n};\n\nconst sideNavWithHeaderScript = () => {\n  // Check if the script is already added to prevent duplicate execution\n  if (document.querySelector('#sideNavWithHeaderScript')) return;\n\n  const script = document.createElement('script');\n  script.id = 'sideNavWithHeaderScript'; // Add an ID for tracking\n  script.innerHTML = `\n  (function () {\n    const homeIcon = 'home';\n    const usageIcon = 'flowchart';\n    const stylesIcon = 'bar_graph_line';\n    const sideNavHeader = document.querySelector('modus-side-navigation');\n\n    const selectionHandler = (e) => {\n      if (e.detail && e.detail.selected) {\n        const panel = document.querySelector('#panelcontent');\n        document.querySelector('#sidenav-content-title')?.remove();\n        const el = document.createElement('h3');\n        el.id = 'sidenav-content-title';\n        const selectedItem = e.target.data?.find((item) => item.id === e.detail.id);\n        el.innerHTML = selectedItem?.label || 'Home Page';\n        panel.insertBefore(el, document.querySelector('#overview'));\n      }\n    };\n\n    function getLabel(newItems) {\n      sideNavHeader.data = [\n        {\n          id: 'Home',\n          menuIcon: homeIcon,\n          label: 'Home',\n          isHeader: {\n            enabled: true,\n            items: [\n              {\n                id: 'Home',\n                label: 'Home',\n                icon: 'home',\n              },\n              {\n                id: 'Charts',\n                label: 'Charts',\n                icon: 'bar_graph',\n              },\n              {\n                id: 'Maps',\n                label: 'Maps',\n                icon: 'location_arrow',\n              },\n            ],\n          },\n          onSideNavItemHeaderClicked: selectionHeaderHandler,\n        },\n        {\n          id: 'usage-menu',\n          menuIcon: newItems[0].icon,\n          label: newItems[0].label,\n          onSideNavItemClicked: selectionHandler,\n        },\n        {\n          id: 'styles-menu',\n          menuIcon: newItems[1].icon,\n          label: newItems[1].label,\n          onSideNavItemClicked: selectionHandler,\n        },\n      ];\n    }\n\n    const selectionHeaderHandler = (e) => {\n      const headerLabel = e.detail.id;\n      let newItems = [];\n\n      if (headerLabel === 'Charts') {\n        newItems = [\n          { label: 'Bar graph square', icon: 'bar_graph_square' },\n          { label: 'Gantt chart', icon: 'gantt_chart' },\n        ];\n        getLabel(newItems);\n\n        const simulatedEvent = {\n          detail: { selected: true, id: 'Charts' },\n          target: { data: [{ id: 'Charts', label: 'Charts' }] },\n        };\n        selectionHandler(simulatedEvent);\n      } else if (headerLabel === 'Maps') {\n        newItems = [\n          { label: 'World', icon: 'web' },\n          { label: 'Region', icon: 'map_poi' },\n        ];\n        getLabel(newItems);\n\n        const simulatedEvent = {\n          detail: { selected: true, id: 'Maps' },\n          target: { data: [{ id: 'Maps', label: 'Maps' }] },\n        };\n        selectionHandler(simulatedEvent);\n      } else {\n        initialize();\n\n        const simulatedEvent = {\n          detail: { selected: true, id: 'Home' },\n          target: { data: [{ id: 'Home', label: 'Home' }] },\n        };\n        selectionHandler(simulatedEvent);\n      }\n    };\n\n    function initialize() {\n      sideNavHeader.data = [\n        {\n          id: 'Home',\n          menuIcon: homeIcon,\n          label: 'Home',\n          isHeader: {\n            enabled: true,\n            items: [\n              {\n                id: 'Home',\n                label: 'Home',\n                icon: 'home',\n              },\n              {\n                id: 'Charts',\n                label: 'Charts',\n                icon: 'bar_graph',\n              },\n              {\n                id: 'Maps',\n                label: 'Maps',\n                icon: 'location_arrow',\n              },\n            ],\n          },\n          onSideNavItemHeaderClicked: selectionHeaderHandler,\n        },\n        {\n          id: 'usage-menu',\n          menuIcon: usageIcon,\n          label: 'Usage page',\n          onSideNavItemClicked: selectionHandler,\n        },\n        {\n          id: 'styles-menu',\n          menuIcon: stylesIcon,\n          label: 'Styles page',\n          onSideNavItemClicked: selectionHandler,\n        },\n      ];\n    }\n    initialize();\n    sideNavHeader.addEventListener('sideNavItemHeaderClicked', selectionHeaderHandler);\n    sideNavHeader.addEventListener('sideNavItemClicked', selectionHandler);\n  })();\n\n  `;\n  return script;\n};\n"
    },
    "modus-side-navigation-item.tsx": {
      "props": [
        {
          "name": "menuIcon",
          "comment": "// The menuIcon prop sets the icon displayed for the side navigation item. It accepts either a built-in icon identifier (from the ModusIconMap) or a custom image URL, allowing for flexibility in the icon's appearance."
        },
        {
          "name": "isHeader",
          "comment": "// The 'isHeader' prop enables header-specific behavior by determining if the item should display a dropdown with navigation options. When enabled (isHeader.enabled is true), the component shows an expand icon and renders a dropdown list based on the items provided in isHeader.items, facilitating header dropdown functionality."
        }
      ],
      "events": [
        {
          "name": "sideNavItemClicked",
          "comment": "// The 'sideNavItemClicked' event is emitted whenever the side navigation item is activated (via a click or keyboard event), providing its unique id and current selected state. This allows parent components to listen and react to changes in item selection."
        },
        {
          "name": "sideNavItemHeaderClicked",
          "comment": "// Fires when a header dropdown sub-item is clicked. It emits an event containing the item's id and the current selected state, allowing parent components to react to navigation header selections."
        },
        {
          "name": "sideNavItemFocus",
          "comment": "// The 'sideNavItemFocus' event is emitted when the navigation item receives focus (e.g., during keyboard navigation).\n// This event notifies parent components or controllers that the specific side navigation item is now active,\n// which can be used to update state, UI highlights, or accessibility features across the navigation panel."
        },
        {
          "name": "_sideNavItemAdded",
          "comment": "// _sideNavItemAdded is an internal event fired when the component connects (mounts) to the DOM.\n// It notifies the parent side navigation container that a new navigation item has been added,\n// allowing the parent component to register or manage the item as needed."
        },
        {
          "name": "_sideNavItemRemoved",
          "comment": "// The '_sideNavItemRemoved' event is an internal event that notifies the parent or container component that this side navigation item has been removed from the DOM (e.g., when the component disconnects). This allows the parent to update its internal list or state regarding the active side navigation items."
        },
        {
          "name": "sideNavListItemClicked",
          "comment": "// The 'sideNavListItemClicked' event is emitted when a user clicks on an item within the header dropdown list.\n// It sends the clicked item's id to notify parent components that a specific dropdown list item was selected,\n// allowing them to update the state or perform other actions based on the selection."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-slider.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The ariaLabel prop provides an accessible label for the slider. When set, its value is assigned to the container\u2019s aria-label attribute, enabling screen readers and other assistive technologies to describe the slider more effectively."
        },
        {
          "name": "label",
          "comment": "// The 'label' prop holds optional text to be displayed as a label for the slider.\n// When provided, it renders a <label> element linked to the slider input via the input's ID,\n// improving accessibility and user interaction."
        }
      ],
      "events": [
        {
          "name": "valueChange",
          "comment": "// The 'valueChange' event is emitted whenever the slider's value changes (after the change event).\n// It updates the component's internal state with the new value and notifies external listeners\n// so they can respond to the change accordingly."
        },
        {
          "name": "valueInput",
          "comment": "// The 'valueInput' event is emitted every time the user adjusts the slider (i.e., on every input event), allowing consumers to respond immediately to intermediate changes rather than only when the user finishes interacting with the slider."
        }
      ],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-slider-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Slider',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The slider's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      description: 'Whether the slider is disabled',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    label: {\n      description: \"The slider's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxValue: {\n      name: 'max-value',\n      description: \"The slider's maximum value\",\n      table: {\n        defaultValue: { summary: 100 },\n        type: { summary: 'number' },\n      },\n    },\n    minValue: {\n      name: 'min-value',\n      description: \"The slider's minimum value\",\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n    value: {\n      description: \"The slider's value\",\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange', 'valueInput'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, disabled, label, maxValue, minValue, value }) => html`\n  <modus-slider\n    aria-label=${ariaLabel}\n    ?disabled=${disabled}\n    label=${label}\n    max-value=${maxValue}\n    min-value=${minValue}\n    value=${value}>\n  </modus-slider>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  disabled: false,\n  label: 'Label',\n  maxValue: 100,\n  minValue: 0,\n  value: 50,\n};\n"
    },
    "modus-spinner.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-spinner-storybook-docs.mdx';\n\nexport default {\n  title: 'Components/Spinner',\n  argTypes: {\n    color: {\n      description: 'The color of the spinner',\n      table: {\n        type: { summary: 'color' },\n      },\n    },\n    size: {\n      description: 'The size of the spinner',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\nexport const Default = ({ color, size }) => html` <modus-spinner color=${color} size=${size}> </modus-spinner> `;\nDefault.args = {\n  color: '#005F9E',\n  size: '2rem',\n};\n"
    },
    "modus-switch.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an accessible label for the switch, ensuring that screen readers can read a meaningful description of the control when no visible label is present."
        },
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop prevents user interaction with the switch.\n// When disabled is true, the component:\n// - Ignores click and keyboard events, so the switch state cannot be toggled.\n// - Applies visual cues (e.g., CSS classes) indicating that the switch is inactive.\n// - Sets accessibility attributes (aria-disabled on the input) to communicate the disabled state."
        },
        {
          "name": "label",
          "comment": "// The 'label' prop allows a developer to optionally pass in descriptive text that is rendered next to the switch,\n// providing context or explanation for the switch's purpose to the user. This enhances the component\u2019s accessibility\n// and usability when a textual description is needed."
        }
      ],
      "events": [
        {
          "name": "switchClick",
          "comment": "// The 'switchClick' event is emitted when the switch is clicked or toggled via keyboard (Enter or Space). It notifies parent components or event listeners of the new checked state (true/false)."
        }
      ],
      "slots": [],
      "documentation": "import { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-switch-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Switch',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The switch's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    checked: {\n      description: 'Whether the switch is checked',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the switch is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    label: {\n      description: \"The switch's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    size: {\n      options: ['small', 'medium'],\n      type: 'select',\n      description: 'The size of the button',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'small' | 'medium'` },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['switchClick'],\n    },\n    controls: { expanded: true },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nexport const Medium = ({ ariaLabel, checked, disabled, label, size }) => html`\n  <modus-switch aria-label=${ariaLabel} checked=${checked} ?disabled=${disabled} label=${label} size=${size}> </modus-switch>\n`;\nMedium.args = {\n  ariaLabel: '',\n  checked: false,\n  disabled: false,\n  label: 'Medium',\n  size: 'medium',\n};\n\nexport const Checked = ({ ariaLabel, checked, disabled, label, size }) => html`\n  <modus-switch aria-label=${ariaLabel} checked=${checked} ?disabled=${disabled} label=${label} size=${size}> </modus-switch>\n`;\nChecked.args = {\n  ariaLabel: '',\n  checked: true,\n  disabled: false,\n  label: 'Checked',\n  size: 'medium',\n};\n\nexport const Disabled = ({ ariaLabel, checked, disabled, label, size }) => html`\n  <modus-switch aria-label=${ariaLabel} checked=${checked} ?disabled=${disabled} label=${label} size=${size}> </modus-switch>\n`;\nDisabled.args = {\n  ariaLabel: '',\n  checked: false,\n  disabled: true,\n  label: 'Disabled',\n  size: 'medium',\n};\n"
    },
    "modus-table.tsx": {
      "props": [
        {
          "name": "density",
          "comment": "// The \"density\" prop allows consumers of the component to control the overall spacing/density of the table. It accepts values 'relaxed', 'comfortable', or 'compact' (defaulting to 'relaxed') and is used to apply the corresponding CSS class (via a mapping in the component) to adjust padding/margins for a looser or tighter layout."
        },
        {
          "name": "errors",
          "comment": "// The 'errors' prop is used to pass any error information (of type ModusTableErrors) into the table component. \n// It lets the table know about error states or messages (for example, data loading or validation errors) so that subcomponents can adjust their behavior or display accordingly."
        },
        {
          "name": "maxHeight",
          "comment": "// 'maxHeight' defines the maximum vertical size of the table container. \n// When set, it applies a CSS max-height to the container <div> in renderMain(), \n// causing the table to display a vertical scrollbar if its content exceeds the specified height."
        },
        {
          "name": "maxWidth",
          "comment": "// 'maxWidth' sets the maximum allowed width for the table's container. When provided,\n// it applies an inline CSS max-width to the wrapping <div>, ensuring the table doesn't\n// expand beyond this limit in larger layouts."
        },
        {
          "name": "pageSizeList",
          "comment": "// The \"pageSizeList\" prop defines an array of numeric options for the number of rows per page when pagination is enabled. \n// It allows users to customize and select the page size used in the table's pagination, with its first element typically serving as the default page size."
        },
        {
          "name": "pagination",
          "comment": "/*\nThe 'pagination' prop controls whether pagination is enabled in the table. When true, \nthe table splits the data set into pages, resets the pagination state (pageIndex and pageSize),\nand renders the pagination component. It automatically adjusts the current page index based \non the data length (unless manualPaginationOptions are provided) and updates the table's \ninternal pagination state accordingly.\n*/"
        },
        {
          "name": "rowActions",
          "comment": "// The 'rowActions' prop holds an array of action definitions that can be performed on each row. Each action is typically displayed as an icon (with a maximum of 4 visible icons, including those in an overflow menu), allowing developers to specify custom row-level operations."
        },
        {
          "name": "rowActionsConfig",
          "comment": "// The rowActionsConfig prop allows consumers of the table component to customize the row actions column\u2014specifically, to define properties such as its width and header text. It can also control whether row actions appear directly as icons or are rendered solely within an overflow menu (when menuOnly is true) for a cleaner UI when many actions are provided."
        },
        {
          "name": "manualPaginationOptions",
          "comment": "// The 'manualPaginationOptions' prop allows the table to operate in manual pagination mode. When provided with pagination details (such as the current page index, page size, and total page count), the table does not paginate data automatically. Instead, it uses these external values to control pagination, updating its internal state and options accordingly."
        },
        {
          "name": "manualSortingOptions",
          "comment": "// 'manualSortingOptions' allows external control of the table's sorting behavior.\n// When provided, the component enters manual sorting mode, meaning it defers sorting logic to the consumer.\n// The prop expects an object (with at least a 'currentSortingState' array) that defines the current sort settings.\n// A watcher listens for changes to this prop, and if the sorting criteria changes,\n// it updates the internal table state (using tableCore.setState('sorting', ...)) and enables manual sorting.\n// This way, the consumer can control, update, and persist sorting state independently of the component's built-in logic."
        },
        {
          "name": "rowSelectionOptions",
          "comment": "/**\n * Configures advanced row selection behavior.\n *\n * This prop allows the consumer to enable or disable multiple row selections,\n * sub-row selections, and to specify which rows should be pre-selected.\n * Changes to these options update the internal table core settings accordingly.\n */"
        },
        {
          "name": "sortIconStyle",
          "comment": "// The 'sortIconStyle' prop controls which style of sort icon is displayed in the table headers when sorting is enabled.\n// When set to 'alphabetical' (the default), the table will display sort icons in an A-Z style,\n// whereas 'directional' will show arrow icons (up/down) to indicate the sort order.\n// Consumers of the component can change the appearance of the sort indicator by setting this prop accordingly."
        },
        {
          "name": "toolbarOptions",
          "comment": "// The toolbarOptions prop provides configuration for displaying an optional toolbar above the table. \n// When supplied, it enables additional table operations (for example, toggling column visibility) \n// and renders a toolbar (with left/right groups defined via slots) to allow users to interact with these settings.\n// Changes to toolbarOptions update internal table behavior (like enabling/disabling column hiding) accordingly."
        },
        {
          "name": "defaultSort",
          "comment": "// The defaultSort prop allows the developer to specify an initial sorting configuration (e.g., column and sort direction).\n// When the value of defaultSort changes and no manual sorting state is provided, the component updates its internal\n// sorting state accordingly by setting it in the tableCore. This ensures that the table is rendered with the specified\n// default sort order on first load or when the defaultSort prop is updated."
        }
      ],
      "events": [
        {
          "name": "cellValueChange",
          "comment": "// The 'cellValueChange' event is emitted when a cell's value is edited. It notifies external listeners\n// (such as a parent component) that a cell's data has been updated, passing an object containing the new\n// data and context (e.g., which cell was edited). This allows consumers of the table component to react to\n// cell changes (for example, to save updates or refresh other UI elements) without directly coupling to the table's internal state."
        },
        {
          "name": "cellLinkClick",
          "comment": "// The 'cellLinkClick' event is emitted when a clickable link inside a table cell is activated.\n// It sends a ModusTableCellLink payload containing information about the clicked link,\n// allowing external handlers to perform custom actions based on the cell link interaction."
        },
        {
          "name": "columnOrderChange",
          "comment": "// The 'columnOrderChange' event is emitted whenever the column order is updated\u2014typically after a user performs a drag\u2010and\u2010drop operation to reorder columns. It passes the new column order state (an array of column IDs) to allow parent components or external handlers to react accordingly (e.g., updating state persistence or UI)."
        },
        {
          "name": "columnSizingChange",
          "comment": "// The 'columnSizingChange' event fires whenever the column widths (sizing state) are updated\u2014typically when the user resizes a column.\n// External consumers can listen to this event to receive and handle the updated sizing information, enabling them to synchronize,\n// persist, or react to changes in the table's layout based on the new column widths."
        },
        {
          "name": "columnVisibilityChange",
          "comment": "// The columnVisibilityChange event is emitted whenever the table\u2019s column visibility state is updated (for example, when a column is toggled on or off). External consumers can listen for this event to synchronize their own state or trigger related logic when the visible columns change."
        },
        {
          "name": "rowActionClick",
          "comment": "// The 'rowActionClick' event is emitted when a row action icon (such as edit, delete, etc.) is clicked.\n// It notifies parent components or external listeners with details about the selected row action, \n// allowing them to execute custom logic in response to the user's interaction with row-specific actions."
        },
        {
          "name": "rowExpanded",
          "comment": "// The 'rowExpanded' event is emitted to notify external consumers whenever the expanded state of a row changes. \n// When a row is expanded or collapsed, the component updates the table's expanded state and then emits 'rowExpanded' \n// with the new expanded state, allowing parent components to synchronize or react to these changes."
        },
        {
          "name": "rowSelectionChange",
          "comment": "// The \"rowSelectionChange\" event is emitted whenever the table's row selection state changes\u2014such as when rows are clicked or selected via shift-click.\r\n// It provides an updated list of the currently selected rows to enable external consumers (e.g., parent components) to react to the change in row selection state."
        },
        {
          "name": "sortChange",
          "comment": "// The 'sortChange' event is emitted whenever the table's sorting state is updated (for example, when a user changes the sorting criteria).\n// It sends out the new sorting state (of type ModusTableSortingState) so that parent components or external handlers can react,\n// such as updating external data or keeping the sort state in sync with other UI elements."
        },
        {
          "name": "paginationChange",
          "comment": "// The 'paginationChange' event is emitted whenever the pagination state (e.g., current page index or page size) changes,\n// allowing external consumers to be notified about and react to these pagination updates."
        }
      ],
      "slots": [
        {
          "name": "groupLeft",
          "comment": "// The 'groupLeft' slot enables consumers of the component to pass in custom toolbar elements (such as buttons, filters, or other controls) that will be rendered on the left side of the table's toolbar area."
        },
        {
          "name": "groupRight",
          "comment": "// The 'groupRight' slot allows developers to inject custom toolbar elements into the table's toolbar on the right side.\n// When using the <modus-table> component, any content placed in a tag with slot=\"groupRight\" will be rendered\n// in the designated area for right-aligned toolbar options. This is useful for adding custom buttons or controls\n// that complement the table's built-in functionality without having to modify the component's core structure."
        },
        {
          "name": "customFooter",
          "comment": "// The 'customFooter' slot allows developers to provide their own custom footer content for the table.\n// When using the <modus-table> component, any HTML or Stencil component placed in a <slot name=\"customFooter\">\n// will be rendered in the footer area of the table, providing an easy way to customize or extend the table's footer.\n// For example, you might include summary information, additional controls, or custom styling via this slot."
        }
      ],
      "documentation": "import { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-table-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\n// Helpers\n// for the data generator makeData function\nfunction range(len) {\n  const arr: number[] = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nfunction randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction randomButtonVariant() {\n  const variants = ['danger', 'primary', 'secondary', 'tertiary', 'special'];\n  return variants[randomNumber(0, 5)];\n}\n\nfunction newPerson() {\n  const namesIndex = randomNumber(0, 17);\n  const firstName = Names[namesIndex].split(' ')[0];\n  const lastName = Names[namesIndex].split(' ')[1];\n  const email: string = `${firstName}${lastName}@example.com`.toLowerCase();\n  const randomDate = new Date(randomNumber(1990, 2020), randomNumber(0, 11), randomNumber(1, 30));\n  const formattedDate = `${randomDate.getFullYear()}-${(randomDate.getMonth() + 1).toString().padStart(2, '0')}-${randomDate.getDate().toString().padStart(2, '0')}`;\n  const customCell = `<modus-button color='${randomButtonVariant()}'>Custom ${namesIndex}</modus-button>`;\n  return {\n    firstName,\n    lastName,\n    age: randomNumber(20, 80) * 30,\n    visits: randomNumber(1, 100) * 100,\n    email: { display: email, url: email },\n    progress: randomNumber(1, 100) * 100,\n    status: randomNumber(1, 100) > 66 ? 'Verified' : randomNumber(0, 100) > 33 ? 'Pending' : 'Rejected',\n    createdAt: formattedDate,\n    priority: Priorities[randomNumber(1, 100) > 66 ? 'high' : randomNumber(0, 100) > 33 ? 'medium' : 'low'],\n    custom: customCell,\n  };\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction makeData(...lens): object[] {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth];\n    return range(len).map(() => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      };\n    });\n  };\n\n  return makeDataLevel();\n}\n\nfunction initializeTable(props) {\n  const {\n    columns,\n    data,\n    pageSizeList,\n    toolbarOptions,\n    displayOptions,\n    rowSelectionOptions,\n    rowActions,\n    rowActionsConfig,\n    manualPaginationOptions,\n    manualSortingOptions,\n    defaultSort,\n    customSort,\n    errors,\n    isInlineEditing,\n  } = props;\n\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n  var modusTable = document.querySelector('modus-table');\n  modusTable.columns = ${JSON.stringify(columns)};\n  modusTable.data = ${JSON.stringify(data)};\n  modusTable.pageSizeList = ${JSON.stringify(pageSizeList)};\n  modusTable.toolbarOptions = ${JSON.stringify(toolbarOptions)};\n  modusTable.displayOptions = ${JSON.stringify(displayOptions)};\n  modusTable.rowSelectionOptions = ${JSON.stringify(rowSelectionOptions)};\n  modusTable.rowActions = ${JSON.stringify(rowActions)};\n  modusTable.rowActionsConfig= ${JSON.stringify(rowActionsConfig)};\n  modusTable.manualPaginationOptions = ${JSON.stringify(manualPaginationOptions)};\n  modusTable.manualSortingOptions = ${JSON.stringify(manualSortingOptions)};\n  modusTable.defaultSort = ${JSON.stringify(defaultSort)};\n  modusTable.customSort = ${JSON.stringify(customSort)};\n  modusTable.errors = ${JSON.stringify(errors)};\n  modusTable.isInlineEditing = ${JSON.stringify(isInlineEditing)};\n\n  var globalData = ${JSON.stringify(data)};\n\n  function sortStatusFn(rowA, rowB, _columnId) {\n    const statusA = rowA.original.status;\n    const statusB = rowB.original.status;\n    const statusOrder = modusTable.customSort;\n    return statusOrder.indexOf(statusA) - statusOrder.indexOf(statusB);\n  }\n\n  function addSortingFn(columns) {\n    return columns.map((col) => (col.accessorKey === 'status' ? { ...col, sortingFn: sortStatusFn } : col));\n  }\n\n  if(!!modusTable.manualSortingOptions){\n    let currentData = globalData;\n    const accessorKey = getAccessortKey(modusTable.columns, modusTable.manualSortingOptions.currentSortingState[0].id);\n    currentData.sort(compareValues(accessorKey, modusTable.manualSortingOptions.currentSortingState[0].desc));\n    if(!!modusTable.manualPaginationOptions){\n      modusTable.data = currentData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n        modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n    } else {\n      modusTable.data = currentData;\n    }\n  } else if(!!modusTable.manualPaginationOptions){\n    modusTable.data = globalData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n      modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n  } else if(modusTable.customSort.length > 0){\n    modusTable.columns = addSortingFn(modusTable.columns);\n  } else {\n    modusTable.data = globalData;\n  }\n\n  function compareValues(key, desc) {\n    return function innerSort(a, b) {\n      if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n        // property doesn't exist on either object\n        return 0;\n      }\n      let varA = '';\n      let varB = '';\n\n      if (typeof a[key] === 'string'){\n        varA = a[key].toUpperCase();\n      } else if (typeof a[key] === 'object'){\n        varA = a[key].display;\n      } else {\n        varA = a[key];\n      }\n      if (typeof b[key] === 'string'){\n        varB = b[key].toUpperCase();\n      } else if (typeof b[key] === 'object'){\n        varB = b[key].display;\n      } else {\n        varB = b[key];\n      }\n\n      let comparison = 0;\n      if (varA > varB) {\n        comparison = 1;\n      } else if (varA < varB) {\n        comparison = -1;\n      }\n      return (\n        desc ? (comparison * -1) : comparison\n      );\n    };\n  }\n\n  function getAccessortKey(array, id){\n    return array.find((c) => c.id === id)?.accessorKey;\n  }\n\n  modusTable.addEventListener(\n    \"paginationChange\", (ev)=> {\n      if(!!modusTable.manualPaginationOptions){\n        let currentData = ${JSON.stringify(data)};\n        modusTable.manualPaginationOptions = {\n          currentPageIndex : ev.detail.pageIndex + 1,\n          currentPageSize : ev.detail.pageSize,\n          pageCount: Math.ceil( currentData.length / ev.detail.pageSize),\n          totalRecords: currentData.length\n        }\n        if(!!modusTable.manualSortingOptions && modusTable.manualSortingOptions.currentSortingState.length > 0){\n          const accessorKey = getAccessortKey(modusTable.columns, modusTable.manualSortingOptions.currentSortingState[0].id);\n          currentData.sort(compareValues(accessorKey, modusTable.manualSortingOptions.currentSortingState[0].desc));\n        }\n        modusTable.data = currentData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n          modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n      }\n   });\n\n  modusTable.addEventListener(\n    \"sortChange\", (ev)=> {\n      if(!!modusTable.manualSortingOptions){\n        modusTable.manualSortingOptions = {\n          currentSortingState : ev.detail\n        };\n        let currentData = ${JSON.stringify(data)};\n        if(modusTable.manualSortingOptions.currentSortingState.length > 0) {\n          const accessorKey = getAccessortKey(modusTable.columns, modusTable.manualSortingOptions.currentSortingState[0].id);\n          currentData.sort(compareValues(accessorKey, modusTable.manualSortingOptions.currentSortingState[0].desc));\n        }\n        if(!!modusTable.manualPaginationOptions){\n          modusTable.data = currentData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n            modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n        } else {\n          modusTable.data = currentData;\n        }\n      }\n  });\n`;\n\n  return tag;\n}\n\nconst Names = [\n  'Mickey Mouse',\n  'Bugs Bunny',\n  'Homer Simpson',\n  'Fred Flintstone',\n  'Sponge Bob',\n  'Daffy Duck',\n  'Charlie Brown',\n  'Scooby Doo',\n  'Tom Cat',\n  'Jerry Mouse',\n  'Mighty Mouse',\n  'Wile E Coyote',\n  'Tweety Bird',\n  'Pink Panther',\n  'Road Runner',\n  'Patrick Star',\n  'Roger Rabbit',\n  'Papa Smurf',\n  'Buzz Lightyear',\n];\n\nconst Priorities = {\n  high: {\n    size: 'medium',\n    type: 'counter',\n    text: 'High',\n    color: 'success',\n  },\n  medium: {\n    size: 'medium',\n    type: 'counter',\n    text: 'Medium',\n    color: 'warning',\n  },\n  low: {\n    size: 'medium',\n    type: 'counter',\n    text: 'Low',\n    color: 'danger',\n  },\n};\n\nconst DefaultColumns = [\n  {\n    header: 'First Name',\n    accessorKey: 'firstName',\n    id: 'first-name',\n    dataType: 'text',\n    size: 150,\n    minSize: 80,\n    footer: 'Total',\n  },\n  {\n    header: 'Last Name',\n    accessorKey: 'lastName',\n    id: 'last-name',\n    dataType: 'text',\n    size: 150,\n    minSize: 80,\n  },\n  {\n    header: 'Age',\n    accessorKey: 'age',\n    id: 'age',\n    dataType: 'integer',\n    size: 80,\n    minSize: 60,\n  },\n  {\n    header: 'Visits',\n    accessorKey: 'visits',\n    id: 'visits',\n    dataType: 'integer',\n    maxSize: 80,\n    showTotal: true,\n    minSize: 80,\n  },\n  {\n    header: 'Email',\n    accessorKey: 'email',\n    id: 'email',\n    dataType: 'link',\n    size: 230,\n    minSize: 80,\n    sortingFn: 'sortForHyperlink',\n  },\n  {\n    header: 'Status',\n    accessorKey: 'status',\n    id: 'status',\n    dataType: 'text',\n  },\n  {\n    header: 'Profile Progress',\n    accessorKey: 'progress',\n    id: 'progress',\n    dataType: 'integer',\n    minSize: 100,\n  },\n  {\n    header: 'Created At',\n    accessorKey: 'createdAt',\n    id: 'createdAt',\n    dataType: 'date',\n    size: 150,\n    minSize: 150,\n  },\n];\n\nconst DefaultArgs = {\n  hover: false,\n  sort: false,\n  sortIconStyle: 'alphabetical',\n  columnResize: false,\n  columnReorder: false,\n  pagination: false,\n  showSortIconOnHover: false,\n  summaryRow: false,\n  fullWidth: false,\n  pageSizeList: [7, 10, 20],\n  toolbar: false,\n  columns: DefaultColumns,\n  data: makeData(5),\n  toolbarOptions: {},\n  displayOptions: {},\n  rowsExpandable: false,\n  maxHeight: '',\n  maxWidth: '',\n  rowActions: [],\n  rowActionsConfig: {},\n  rowSelection: false,\n  rowSelectionOptions: {},\n  wrapText: false,\n  customSort: [],\n};\n\nexport default {\n  title: 'Components/Table',\n  argTypes: {\n    columns: {\n      name: 'columns',\n      description: 'Table header columns',\n      table: {\n        type: { summary: 'ModusTableColumn[]' },\n      },\n      type: { required: true },\n    },\n    data: {\n      name: 'data',\n      description: 'Table data',\n      table: {\n        type: { summary: 'Data[]' },\n      },\n      type: { required: true },\n    },\n    hover: {\n      name: 'hover',\n      description: 'Enables hover on table rows',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    sort: {\n      name: 'sort',\n      description: 'Enables sort for table columns',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    sortIconStyle: {\n      name: 'sortIconStyle',\n      description: 'Display alphabetical or directional arrow icons when sort is enabled',\n      options: ['alphabetical', 'directional'],\n      type: 'select',\n      table: {\n        defaultValue: { summary: `'alphabetical'` },\n        type: { summary: `'alphabetical', 'directional'` },\n      },\n    },\n    showSortIconOnHover: {\n      name: 'showSortIconOnHover',\n      description: 'Enables sort for table columns and sort icon appears when you hover over a column header',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    summaryRow: {\n      name: 'summaryRow',\n      description: 'Enables a summary row as footer',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    pagination: {\n      name: 'pagination',\n      description: 'Enable pagination on table data',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    columnResize: {\n      name: 'columnResize',\n      description: 'Enables the column resizing for table',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    columnReorder: {\n      name: 'columnReorder',\n      description: 'Enables the column reordering for table',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    density: {\n      name: 'density',\n      description: 'Manage table density.',\n      options: ['relaxed', 'comfortable', 'compact'],\n      type: 'select',\n      table: {\n        defaultValue: { summary: `'relaxed'` },\n        type: { summary: `'relaxed', 'comfortable', 'compact'` },\n      },\n    },\n    fullWidth: {\n      name: 'fullWidth',\n      description: 'Manage table width.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    toolbar: {\n      name: 'toolbar',\n      description: 'Enables the toolbar.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    toolbarOptions: {\n      name: 'toolbarOptions',\n      description: 'To display toolbar options, which allows access to table operations like hiding columns.',\n      table: {\n        type: { summary: 'ModusTableToolbarOptions' },\n      },\n      type: { required: false },\n    },\n    rowsExpandable: {\n      name: 'rowsExpandable',\n      description: 'Enables expanded rows.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    rowSelection: {\n      name: 'rowSelection',\n      description: 'Enables row selection.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    rowActions: {\n      name: 'rowActions',\n      description: 'Control row actions.',\n      table: {\n        type: { summary: 'ModusTableRowAction[]' },\n      },\n      type: { required: false },\n    },\n    rowActionsConfig: {\n      name: 'rowActionsConfig',\n      description: \"The configuration for the row action's column \",\n      table: {\n        type: { summary: 'ModusTableRowActionConfig' },\n      },\n      type: { required: false },\n    },\n    maxHeight: {\n      name: 'maxHeight',\n      description: 'To display a vertical scrollbar when the height is exceeded.',\n      control: 'string',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    maxWidth: {\n      name: 'maxWidth',\n      description: 'To display a horizontal scrollbar when the width is exceeded.',\n      control: 'string',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    pageSizeList: {\n      name: 'pageSizeList',\n      description: 'To set page size options for the pagination.',\n      table: {\n        type: { summary: 'number[]' },\n      },\n      type: { required: false },\n    },\n    rowSelectionOptions: {\n      name: 'rowSelectionOptions',\n      description: 'To control multiple row selection.',\n      table: {\n        type: { summary: 'ModusTableRowSelectionOptions' },\n      },\n      type: { required: false },\n    },\n    manualPaginationOptions: {\n      name: 'manualPaginationOptions',\n      description: 'To switch to manual pagination mode.',\n      table: {\n        type: { summary: 'ModusTableManualPaginationOptions' },\n      },\n      type: { required: false },\n    },\n    manualSortingOptions: {\n      name: 'manualSortingOptions',\n      description: 'To switch to manual sorting mode.',\n      table: {\n        type: { summary: 'ModusTableManualSortingOptions' },\n      },\n      type: { required: false },\n    },\n    customSort: {\n      name: 'customSorting',\n      description:\n        'This property is for demonstration purposes only and is not available on the component. This demo illustrates how to implement custom sorting for the status column based on a given order.',\n      table: {\n        // type: { summary: 'customSort'},\n      },\n      type: { required: false },\n    },\n    defaultSort: {\n      name: 'defaultSort',\n      description: 'To set the default sorting of the table',\n      table: {\n        type: { summary: 'ModusTableColumnSort' },\n      },\n      type: { required: false },\n    },\n    wrapText: {\n      name: 'wrapText',\n      description: 'To wrap text that overflows the cell',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    errors: {\n      name: 'errors',\n      description: 'To display errors on the table',\n      table: {\n        type: { summary: 'ModusTableErrors' },\n      },\n      type: { required: false },\n    },\n  },\n\n  parameters: {\n    actions: {\n      handles: [\n        'cellValueChange',\n        'cellLinkClick',\n        'columnOrderChange',\n        'columnSizingChange',\n        'columnVisibilityChange',\n        'paginationChange',\n        'rowExpanded',\n        'rowSelectionChange',\n        'rowUpdated',\n        'sortChange',\n        'rowActionClick',\n        'cellInputValueChange',\n      ],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n      enableShortcuts: false,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  hover,\n  sort,\n  sortIconStyle,\n  columnResize,\n  columnReorder,\n  pagination,\n  showSortIconOnHover,\n  summaryRow,\n  fullWidth,\n  pageSizeList,\n  toolbar,\n  columns,\n  data,\n  errors,\n  toolbarOptions,\n  displayOptions,\n  rowsExpandable,\n  maxHeight,\n  maxWidth,\n  rowActions,\n  rowActionsConfig,\n  rowSelection,\n  rowSelectionOptions,\n  manualPaginationOptions,\n  manualSortingOptions,\n  defaultSort,\n  density,\n  wrapText,\n  customSort,\n  isInlineEditing,\n}) => html`\n  <div style=\"width: 950px\">\n    <modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort-icon-style=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      column-reorder=\"${columnReorder}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      toolbar=\"${toolbar}\"\n      rows-expandable=\"${rowsExpandable}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />\n  </div>\n  ${initializeTable({\n    columns,\n    data,\n    pageSizeList,\n    toolbarOptions,\n    displayOptions,\n    rowSelectionOptions,\n    rowActions,\n    rowActionsConfig,\n    manualPaginationOptions,\n    manualSortingOptions,\n    defaultSort,\n    customSort,\n    errors,\n    isInlineEditing,\n  })}\n`;\n\nexport const Default = Template.bind({});\nDefault.args = DefaultArgs;\n\nexport const Hover = Template.bind({});\nHover.args = { ...DefaultArgs, hover: true };\n\nexport const Borderless = Template.bind({});\nBorderless.args = {\n  ...DefaultArgs,\n  displayOptions: {\n    borderless: true,\n    cellBorderless: true,\n    cellVerticalBorderless: true,\n  },\n};\n\nexport const Sorting = Template.bind({});\nSorting.args = { ...DefaultArgs, sort: true };\n\nexport const ManualSorting = Template.bind({});\nManualSorting.args = {\n  ...DefaultArgs,\n  sort: true,\n  manualSortingOptions: {\n    currentSortingState: [\n      {\n        id: 'first-name',\n        desc: false,\n      },\n    ],\n  },\n};\n\nexport const CustomSorting = Template.bind({});\nCustomSorting.args = { ...DefaultArgs, customSort: ['Rejected', 'Verified', 'Pending'], sort: true, data: makeData(5) };\n\nexport const ValueFormatter = ({\n  hover,\n  sort,\n  sortIconStyle,\n  columnResize,\n  pagination,\n  showSortIconOnHover,\n  summaryRow,\n  fullWidth,\n  pageSizeList,\n  toolbar,\n  columnReorder,\n  toolbarOptions,\n  displayOptions,\n  maxHeight,\n  maxWidth,\n  rowSelection,\n  rowSelectionOptions,\n  density,\n  wrapText,\n}) => html`\n  <div style=\"width: 950px\">\n    <modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      column-reorder=\"${columnReorder}\"\n      toolbar=\"${toolbar}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />\n  </div>\n  ${valueFormatterTable(pageSizeList, toolbarOptions, displayOptions, rowSelectionOptions)}\n`;\nValueFormatter.args = {\n  hover: false,\n  sort: false,\n  sortIconStyle: 'alphabetical',\n  columnResize: false,\n  columnReorder: false,\n  pagination: false,\n  showSortIconOnHover: false,\n  summaryRow: false,\n  fullWidth: false,\n  pageSizeList: [7, 10, 20],\n  toolbar: false,\n  toolbarOptions: {},\n  displayOptions: {},\n  maxHeight: '',\n  maxWidth: '',\n  rowSelection: false,\n  rowSelectionOptions: {},\n  wrapText: false,\n};\nconst valueFormatterTable = (pageSizeList, toolbarOptions, displayOptions, rowSelectionOptions) => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n   document.querySelector('modus-table').columns = [{ header: 'First Name', accessorKey: 'firstName', id: 'first-name', dataType: 'text' , footer: 'Total', size: 150,minSize: 80}, { header: 'Last Name', accessorKey: 'lastName', id: 'last-name', dataType: 'text', size: 150,minSize: 80}, { header: 'Age', accessorKey: 'age', id: 'age', dataType: 'integer', showTotal: true, size: 100,minSize: 60 }, { header: 'Amount', accessorKey: 'amount', id: 'amount', dataType: 'integer',size: 150,minSize: 80, cell: (props) => { return '$' + Number(props.cell.getValue()).toFixed(2).replace(/\\\\d(?=(\\\\d{3})+\\\\.)/g, '$&,') }, }, { header: 'Status', accessorKey: 'status', id: 'status', dataType: 'text', minSize: 80}, { header: 'Profile Progress', accessorKey: 'progress', id: 'progress', dataType: 'integer',minSize: 100, cell: (props) => { return  Number(props.cell.getValue()).toFixed(2).replace(/\\\\d(?=(\\\\d{3})+\\\\.)/g, '$&,') }, }, { header: 'Created At', accessorKey: 'createdAt', id: 'createdAt', dataType: 'text', cell: (props) => { const date = new Date(props.cell.getValue()); return ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear(); }, }];\n   document.querySelector('modus-table').data = [{ \"firstName\": \"Chaim\", \"lastName\": \"Lubowitz\", \"age\": 30, \"amount\": 330160, \"progress\": 99, \"status\": \"single\", \"createdAt\": \"2002-11-19T12:48:51.739Z\" }, { \"firstName\": \"Vicky\", \"lastName\": \"Lehner\", \"age\": 2, \"amount\": 41900, \"progress\": 36, \"status\": \"single\", \"createdAt\": \"2003-10-02T12:48:51.739Z\" }, { \"firstName\": \"Nellie\", \"lastName\": \"Leuschke\", \"age\": 15, \"amount\": 883112, \"progress\": 68, \"status\": \"single\", \"createdAt\": \"2004-09-21T12:48:51.739Z\" }, { \"firstName\": \"Judy\", \"lastName\": \"Ritchie\", \"age\": 3, \"amount\": 900293, \"progress\": 10, \"status\": \"relationship\", \"createdAt\": \"2005-08-11T12:48:51.739Z\" }, { \"firstName\": \"Hertha\", \"lastName\": \"Bradtke\", \"age\": 19, \"amount\": 112116, \"progress\": 87, \"status\": \"relationship\", \"createdAt\": \"2006-07-13T12:48:51.739Z\" }];\n\n   document.querySelector('modus-table').pageSizeList = ${JSON.stringify(pageSizeList)};\n  document.querySelector('modus-table').toolbarOptions = ${JSON.stringify(toolbarOptions)};\n  document.querySelector('modus-table').displayOptions = ${JSON.stringify(displayOptions)};\n  document.querySelector('modus-table').rowSelectionOptions = ${JSON.stringify(rowSelectionOptions)};\n  `;\n  return tag;\n};\n\nexport const Hyperlink = Template.bind({});\nHyperlink.args = { ...DefaultArgs, columns: DefaultColumns, data: makeData(7) };\n\nexport const CustomCell = Template.bind({});\nCustomCell.args = {\n  ...DefaultArgs,\n  columns: [\n    ...DefaultColumns.slice(0, DefaultColumns.length - 1),\n    {\n      header: 'Custom Cell',\n      accessorKey: 'custom',\n      id: 'custom',\n      dataType: 'custom',\n    },\n  ],\n  data: makeData(7),\n};\n\nexport const Badge = Template.bind({});\nBadge.args = {\n  ...DefaultArgs,\n  columns: [\n    ...DefaultColumns.slice(0, DefaultColumns.length - 2),\n    {\n      header: 'Priority',\n      accessorKey: 'priority',\n      sortingFn: 'sortForBadge',\n      id: 'priority',\n      dataType: 'badge',\n      maxSize: 100,\n    },\n    ...DefaultColumns.slice(DefaultColumns.length - 1),\n  ],\n  data: makeData(7),\n};\n\nexport const ColumnResize = Template.bind({});\nColumnResize.args = { ...DefaultArgs, columnResize: true };\n\nexport const Pagination = Template.bind({});\nPagination.args = { ...DefaultArgs, pagination: true, data: makeData(50), pageSizeList: [5, 10, 50] };\n\nexport const ManualPagination = Template.bind({});\nManualPagination.args = {\n  ...DefaultArgs,\n  pagination: true,\n  data: makeData(50),\n  manualPaginationOptions: {\n    currentPageIndex: 1,\n    currentPageSize: 5,\n    pageCount: 10,\n    totalRecords: 50,\n  },\n  pageSizeList: [5, 10, 50],\n};\n\nexport const SummaryRow = Template.bind({});\nSummaryRow.args = { ...DefaultArgs, summaryRow: true };\n\nexport const ColumnVisibility = Template.bind({});\nColumnVisibility.args = {\n  ...DefaultArgs,\n  toolbarOptions: {\n    columnsVisibility: {\n      title: '',\n      requiredColumns: ['age', 'visits'],\n      hiddenColumns: ['progress', 'createdAt'],\n    },\n  },\n  toolbar: true,\n};\n\nexport const ColumnReorder = Template.bind({});\nColumnReorder.args = { ...DefaultArgs, columnReorder: true };\n\nexport const ExpandableRows = Template.bind({});\nExpandableRows.args = { ...DefaultArgs, rowsExpandable: true, data: makeData(7, 4, 3, 2, 1), fullWidth: true };\n\nexport const CheckboxRowSelection = Template.bind({});\nCheckboxRowSelection.args = {\n  ...DefaultArgs,\n  rowSelection: true,\n  rowSelectionOptions: {\n    multiple: true,\n    subRowSelection: true,\n    preSelectedRows: undefined,\n  },\n  data: makeData(7),\n};\n\nconst DefaultColumnsWithPriority = [\n  ...DefaultColumns,\n  {\n    header: 'Priority',\n    accessorKey: 'priority',\n    sortingFn: 'sortForBadge',\n    id: 'priority',\n    dataType: 'badge',\n    maxSize: 100,\n  },\n];\nconst EditableColumns = DefaultColumnsWithPriority.map((col) => {\n  if (col.accessorKey === 'status') {\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'select',\n      cellEditorArgs: {\n        options: [{ display: 'Verified' }, { display: 'Pending' }, { display: 'Rejected' }],\n      },\n    };\n  }\n  if (col.accessorKey === 'firstName') {\n    const nameOptions = Names.map((name) => name.split(' ')[0]);\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'autocomplete',\n      cellEditorArgs: {\n        options: nameOptions,\n      },\n    };\n  }\n  if (col.accessorKey === 'email') {\n    const emailOptions = Names.map((name) => ({\n      display: `${name.split(' ')[0]}${name.split(' ')[1]}@example.com`,\n      url: `${name.split(' ')[0]}${name.split(' ')[1]}@example.com`,\n    }));\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'autocomplete',\n      cellEditorArgs: {\n        options: emailOptions,\n      },\n    };\n  }\n  if (col.accessorKey === 'priority') {\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'select',\n      cellEditorArgs: {\n        options: [\n          { display: 'Low', type: 'counter', color: 'danger', size: 'medium' },\n          { display: 'Medium', type: 'counter', color: 'primary', size: 'medium' },\n          { display: 'High', type: 'counter', color: 'success', size: 'medium' },\n        ],\n      },\n    };\n  }\n  if (col.accessorKey === 'createdAt') {\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'date',\n      cellEditorArgs: {\n        format: 'yyyy-mm-dd',\n      },\n    };\n  } else return { ...col, cellEditable: true };\n});\nexport const InlineEditing = Template.bind({});\nInlineEditing.args = { ...DefaultArgs, columns: EditableColumns, data: makeData(7), errors: {}, isInlineEditing: true };\n\nexport const LargeDataset = Template.bind({});\n\nLargeDataset.args = {\n  ...DefaultArgs,\n  columns: EditableColumns,\n  data: makeData(10000, 1, 1),\n  pagination: true,\n  pageSizeList: [5, 10, 50],\n  sort: true,\n  hover: true,\n  rowsExpandable: true,\n  summaryRow: true,\n  columnReorder: true,\n  columnResize: true,\n  toolbar: true,\n  toolbarOptions: {\n    columnsVisibility: {\n      title: '',\n      requiredColumns: ['age', 'visits'],\n    },\n  },\n  rowSelection: true,\n  rowSelectionOptions: {\n    multiple: true,\n    subRowSelection: true,\n  },\n};\n\nexport const RowActions = Template.bind({});\nRowActions.args = {\n  ...DefaultArgs,\n  rowActionsConfig: {\n    header: 'Row Actions Column',\n    width: 160,\n    menuOnly: false,\n  },\n  rowActions: [\n    {\n      id: '1',\n      label: 'Add',\n      tooltipText: 'Add',\n      index: 0,\n    },\n\n    {\n      id: '2',\n      icon: 'calendar',\n      label: 'calendar',\n      tooltipText: 'Calendar',\n      index: 1,\n    },\n\n    {\n      id: '3',\n      icon: 'cancel_circle',\n      label: 'Cancel',\n      tooltipText: 'Cancel',\n      index: 2,\n    },\n    {\n      id: '4',\n      index: 3,\n      icon: 'add',\n      label: 'Add',\n      tooltipText: 'Add',\n    },\n    {\n      id: '5',\n      index: 4,\n      icon: 'delete',\n      label: 'Delete',\n      tooltipText: 'Delete',\n    },\n  ],\n  data: makeData(7),\n  fullWidth: true,\n};\n\nexport const WrapText = Template.bind({});\nWrapText.args = {\n  ...DefaultArgs,\n  data: [\n    {\n      ...newPerson(),\n      lastName: 'This is an example of long text',\n    },\n    ...makeData(4),\n  ],\n  wrapText: true,\n};\n"
    },
    "flex-renderer.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-table-cell-editor.tsx": {
      "props": [
        {
          "name": "args",
          "comment": "// The 'args' prop holds configuration data and settings specific to the cell editor. \n// It includes details like option lists, placeholders, formatting options, and filtering functions,\n// which allow the parent component to customize the behavior and appearance of the cell editor\n// (for example, when rendering select or autocomplete inputs)."
        },
        {
          "name": "dataType",
          "comment": "/* \nThe 'dataType' prop specifies the contextual format of the data (such as 'badge' or 'link') being edited. Depending on its value, the component adjusts how the selected option is processed and formatted in select and autocomplete editors, ensuring that the data is correctly transformed for display and further use.\n*/"
        },
        {
          "name": "value",
          "comment": "// The 'value' prop holds the current value of the cell that\u2019s being edited.\n// When the component loads, it initializes an internal state ('editedValue')\n// with this value, and then passes it to the appropriate input component.\n// As the user edits the value (in text, number, select, autocomplete, or date picker),\n// the updated value is stored in 'editedValue' and finally emitted via the valueChange\n// callback once editing is finished."
        },
        {
          "name": "type",
          "comment": "// The 'type' prop determines which kind of cell editor to render (e.g., text, select, autocomplete, date, or number).\n// It is used in the renderEditor() method to switch between different input components based on its value."
        },
        {
          "name": "valueChange",
          "comment": "// 'valueChange' is a callback function provided by the parent component.\n// It is invoked (typically on input blur) to notify the parent of the new cell value\n// so that the parent can update its state accordingly."
        },
        {
          "name": "keyDown",
          "comment": "// The 'keyDown' prop is a callback passed down from the parent component that is invoked whenever a keydown event occurs on the editor. It receives both the KeyboardEvent and the current edited value (as a string), allowing the parent to handle or intercept keyboard actions (such as Enter, Arrow keys, etc.) and update the state or perform actions based on user input."
        },
        {
          "name": "inputValueChangeHandler",
          "comment": "// The inputValueChangeHandler prop is a callback function passed from the parent that gets invoked whenever the text input\u2019s value changes. It enables external components to immediately react to and synchronize with user input updates in the text editor."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-table-cell-main.tsx": {
      "props": [
        {
          "name": "cell",
          "comment": "// The 'cell' prop represents the table cell's data and context (including its value, row, and column definitions) as provided by @tanstack/table-core. It is essential for rendering the cell\u2019s content, determining its data type, managing editing functionality, and handling error states throughout the component."
        },
        {
          "name": "context",
          "comment": "// The 'context' prop serves as the external table configuration and state container. It provides the cell with:\n// - Global error messages for validating and displaying error tooltips.\n// - Event handlers (e.g., cellLinkClick) for interactions that originate within a cell.\n// - Display preferences, such as whether to wrap text.\n// This context is used to update the cell's error state and control rendering behavior accordingly."
        },
        {
          "name": "hasRowsExpandable",
          "comment": "// 'hasRowsExpandable' is a boolean prop that indicates whether the table rows have expandable content.\n// When true, the component renders the expand icons (via ModusTableCellExpandIcons) inside the cell,\n// allowing users to expand or collapse the corresponding row to view more details."
        },
        {
          "name": "valueChange",
          "comment": "// The 'valueChange' prop is a callback function provided by the parent or consumer of this component. \n// It is invoked when the cell's value is changed (during edit mode) to notify the parent about the cell update,\n// supplying an object with details such as the row, the cell's accessor key, and the new and old values."
        }
      ],
      "events": [
        {
          "name": "cellInputValueChange",
          "comment": "// The 'cellInputValueChange' event is emitted whenever the value in a cell editor changes (before being committed).\n// It notifies parent components or handlers of the intermediate input change by sending an object containing\n// the row reference, the column's accessor key, the new value, and the old value. This allows for real-time\n// synchronization or validation of the cell's value as the user interacts with the editor."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-table-filler-column.tsx": {
      "props": [
        {
          "name": "cellBorderless",
          "comment": "// The 'cellBorderless' prop allows the user to disable borders on the filler table's cells by adding a 'cell-borderless' CSS class when set to true. This enables the table content to appear without cell borders in cases where border styling is not desired."
        },
        {
          "name": "summaryRow",
          "comment": "// The 'summaryRow' prop indicates whether the table includes a summary row. When true,\n// the component renders an additional <tfoot> element (the summary row) in the filler table,\n// and its height is dynamically set to match the corresponding summary row of the target table."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-table-columns-visibility.tsx": {
      "props": [
        {
          "name": "getAllLeafColumns",
          "comment": "// The 'getAllLeafColumns' prop is a callback function that returns the array of leaf columns (i.e., the actual table columns without nested children). It is used to initialize and update column visibility by iterating over these columns for applying changes and rendering the checklist."
        },
        {
          "name": "columnsVisibility",
          "comment": "// The 'columnsVisibility' prop defines the configuration options for column visibility,\n// including lists of required columns (which must always remain visible) and initially hidden columns,\n// and is used to set the component\u2019s initial state and control which columns can be toggled."
        },
        {
          "name": "showDropdown",
          "comment": "// The 'showDropdown' prop is a boolean flag that indicates whether the columns visibility dropdown menu is currently displayed. It is used (with the externally provided 'toggleDropdown' function) to control the open/closed state of the dropdown, determining when the UI for adjusting column visibility should be visible."
        },
        {
          "name": "menuIconContainerRef",
          "comment": "// 'menuIconContainerRef' is a reference to the DOM element that contains the menu icon.\n// It is used to programmatically set focus back to the icon (e.g., after applying changes or closing the dropdown),\n// ensuring proper keyboard focus management and accessibility after the dropdown interaction."
        },
        {
          "name": "toggleDropdown",
          "comment": "// The 'toggleDropdown' prop is a function provided by the parent component to toggle the dropdown's open/closed state. It is called with a boolean argument indicating whether the dropdown should be displayed (true) or not (false)."
        },
        {
          "name": "maxHeight",
          "comment": "// 'maxHeight' is a property that allows a custom maximum height to be set for the dropdown menu.\n// It controls the inline CSS maxHeight of the menu container in the render() method,\n// ensuring that the menu does not exceed the specified height (defaults to '60dvh' if not provided)."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-table-dropdown-menu.tsx": {
      "props": [
        {
          "name": "context",
          "comment": "// The 'context' prop holds the table\u2019s configuration and state (e.g., the table instance, toolbar options, etc.) that the dropdown menu requires to manage columns visibility and integrate with the table\u2019s overall behavior.\n  \n/* Explanation:\n   - 'context' is of type TableContext and provides necessary data for the dropdown menu.\n   - It includes properties such as the table instance (with methods like getAllLeafColumns) and toolbar options.\n   - This context allows the dropdown and its child components (like 'modus-table-columns-visibility') to access and manipulate table data and settings.\n*/"
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-table-toolbar.tsx": {
      "props": [
        {
          "name": "context",
          "comment": "// The 'context' prop holds the table's state and configuration data (like the table instance and toolbar options) that the toolbar component needs to render and manage its functionality. This allows the component to access and use settings, data, or functions defined externally, ensuring it displays or interacts with the table appropriately."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-table-row-actions-cell.tsx": {
      "props": [
        {
          "name": "row",
          "comment": "/* \nThe 'row' prop represents the data for the current table row (of type Row<unknown>) that the cell is associated with. \nIt is passed into the component to provide context for row-specific operations\u2014such as focusing its child elements or performing actions\u2014and is later forwarded to the nested <modus-table-row-actions> component for additional processing.\n*/"
        },
        {
          "name": "context",
          "comment": "// The 'context' prop supplies shared table configuration, state, and metadata that enables the row actions\n// component to access global settings, callbacks, and any other table-wide information. This lets the\n// internal <modus-table-row-actions> component behave consistently with the rest of the table.\n\n@Component({\n  tag: 'modus-table-row-actions-cell',\n})\nexport class ModusTableRowActionsCell {\n  @Element() el: HTMLElement;\n  @Prop() row: Row<unknown>;\n  // 'context' provides the cell with shared metadata and configuration from the overall table, allowing\n  // consistent behavior and appearance across various table components.\n  @Prop() context: TableContext;\n\n  private cellEl: HTMLElement;\n\n  private onCellKeyDown: (e: KeyboardEvent) => void = (e: KeyboardEvent) => this.handleCellKeydown(e);\n  connectedCallback() {\n    this.cellEl = this.el.parentElement;\n    this.cellEl.addEventListener('keydown', this.onCellKeyDown);\n  }\n\n  disconnectedCallback() {\n    if (this.cellEl) {\n      this.cellEl.removeEventListener('keydown', this.onCellKeyDown);\n    }\n  }\n  handleCellKeydown = (event: KeyboardEvent) => {\n    if (event.defaultPrevented) return;\n\n    const key = event.key?.toLowerCase();\n\n    if (key === KEYBOARD_ENTER) {\n      (this.el.firstChild?.firstChild as HTMLModusButtonElement)?.focusButton();\n      event.stopPropagation();\n    } else {\n      NavigateTableCells({\n        eventKey: event.key,\n        cellElement: this.cellEl,\n      });\n    }\n  };\n\n  render(): void {\n    return (\n      <Host>\n        <modus-table-row-actions row={this.row} context={this.context} />\n      </Host>\n    );\n  }\n}"
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-table-row-actions.tsx": {
      "props": [
        {
          "name": "row",
          "comment": "// The 'row' prop injects the current table row's data (from tanstack/table-core) into the component.\n// It's used to access and pass along the row's underlying data in action events (e.g., when a button is clicked),\n// so that any handlers or emitted events can operate on the correct row."
        },
        {
          "name": "context",
          "comment": "// The 'context' prop serves as a configuration and event handler container provided by the parent.\n// It supplies the row actions (like buttons and overflow menus), component identifiers, and event emitters\n// (such as for rowActionClick) needed by this component to correctly render and handle the table row actions."
        }
      ],
      "events": [
        {
          "name": "overflowRowActions",
          "comment": "// The 'overflowRowActions' event is triggered when the overflow (more) button is clicked.\n// It emits an object detailing the current row, the list of overflow actions,\n// the screen position for displaying the overflow menu (based on the button's position),\n// and an onClose callback to refocus the overflow button once the menu closes.\n// This event enables parent components or handlers to display a contextual menu\n// for additional row actions not directly visible in the UI."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-table-row-actions-menu.tsx": {
      "props": [
        {
          "name": "context",
          "comment": "// 'context' is a prop that provides the component with essential information and callbacks from its parent table. It includes the table's element reference, unique componentId, and event emitters (like rowActionClick) that allow this menu to subscribe to and dispatch events. Essentially, it ties the menu\u2019s behavior and state to the overall table context, ensuring coordinated event handling and proper linkage with the parent table\u2019s data."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-tabs.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The ariaLabel prop provides an accessible name for the tabs container by setting the aria-label attribute, which helps screen readers describe the purpose or context of the tab set."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop controls the overall sizing of the tabs. \n// It accepts either 'medium' or 'small', and is used to:\n//   \u2022 Apply the corresponding CSS class (via classBySize) to adjust the tab layout.\n//   \u2022 Set the appropriate size for icons (16px for 'small' and 24px for 'medium').\n// This ensures that both the tab styling and icon dimensions adapt based on the chosen size."
        }
      ],
      "events": [
        {
          "name": "tabChange",
          "comment": "// The 'tabChange' event is emitted whenever the active tab changes. It sends the id of the newly activated tab, allowing parent components to react (such as updating content) when a different tab is selected."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-text-input.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop allows developers to provide an accessible label for the input element.\n// When specified, its value is assigned to the input's aria-label attribute, which assists \n// screen readers and other assistive technologies in describing the purpose of the input,\n// especially when a visible label may not be present."
        },
        {
          "name": "autocapitalize",
          "comment": "// The 'autocapitalize' prop determines how the device (especially on touch screens) should automatically capitalize text input. It directly assigns this behavior to the underlying input's autocapitalize attribute, affecting elements like the on-screen keyboard."
        },
        {
          "name": "autocorrect",
          "comment": "// The 'autocorrect' prop controls whether the browser should automatically correct the user's input while editing.\n// It accepts a boolean or string value and, through the get inputAutocorrect accessor, converts true/false to 'on'/'off'\n// (or passes a provided string value) which is then applied to the input's 'autocorrect' attribute."
        },
        {
          "name": "autocomplete",
          "comment": "// The \"autocomplete\" prop lets developers specify the value of the native HTML autocomplete attribute.\n// When passed to this component, it sets the input element's autocomplete behavior.\n// This helps the browser determine whether and how to suggest previously-entered values (e.g., \"on\", \"off\", or a specific string)\n// thereby enhancing user experience and form data consistency."
        },
        {
          "name": "autoFocusInput",
          "comment": "// The 'autoFocusInput' prop determines whether the text input should automatically receive focus when the component is rendered.\n// By setting autoFocusInput to true, the input element will have the HTML 'autofocus' attribute applied, allowing users to start typing immediately without an extra click."
        },
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop allows you to disable the text input. When set to true, it both applies a 'disabled' styling class and sets the HTML disabled attribute, preventing users from interacting with the input field."
        },
        {
          "name": "enterkeyhint",
          "comment": "// The 'enterkeyhint' prop lets you specify the action label for the enter key on virtual keyboards (e.g., on mobile devices).\n// For example, setting it to 'search' will prompt the keyboard to display an appropriate \"Search\" key,\n// while 'send' or 'done' will adjust the key label accordingly, enhancing the user's interaction experience."
        },
        {
          "name": "errorText",
          "comment": "// errorText holds the error message string to be displayed below the text input. When set, the component renders an error label (and optionally an error icon) to inform the user about validation or input issues."
        },
        {
          "name": "helperText",
          "comment": "// The 'helperText' prop is an optional property that allows you to provide additional instructional text or context for the input.\n// When set, this text is displayed below the main label (if present), offering users further guidance about the input's purpose or expected content."
        },
        {
          "name": "includeErrorIcon",
          "comment": "// The 'includeErrorIcon' prop determines whether an error icon should be displayed next to the error message.\n// When set to true and an error text is present, the component renders the error icon alongside the error text,\n// providing a visual cue to the user that there is a validation error."
        },
        {
          "name": "includeSearchIcon",
          "comment": "// The 'includeSearchIcon' prop is a boolean that, when true, renders a search icon (IconSearch) within the input field. This visually indicates that the input may be used for search functionality."
        },
        {
          "name": "inputmode",
          "comment": "// The \"inputmode\" prop provides a hint to the browser on which type of virtual keyboard layout to display when the input is focused. For instance, setting inputmode to \"numeric\" encourages mobile devices to show a numeric keypad. This helps tailor the user experience based on the expected input format."
        },
        {
          "name": "label",
          "comment": "// The 'label' prop sets the text label that is displayed above the input element, helping users understand what information is expected. When provided, it renders a <label> element (linked to the input's id) alongside any helper or required indicators."
        },
        {
          "name": "maxLength",
          "comment": "// The 'maxLength' prop sets the maximum number of characters allowed in the input field. When provided, it limits the user's input by applying the native HTML 'maxlength' attribute on the input element."
        },
        {
          "name": "minLength",
          "comment": "// The 'minLength' prop specifies the minimum number of characters that must be entered into the input field. It's applied to the native input element, so browsers can use it for built-in form validation."
        },
        {
          "name": "pattern",
          "comment": "// The 'pattern' prop allows you to specify a regular expression that the input's value must match to be considered valid. This regular expression is applied as the input element's HTML5 \"pattern\" attribute, enabling built-in form validation against specific formatting requirements."
        },
        {
          "name": "placeholder",
          "comment": "// The 'placeholder' prop sets the hint text displayed inside the input field when no value is present, guiding users on the expected input format or content."
        },
        {
          "name": "readOnly",
          "comment": "// The 'readOnly' prop determines whether the input field's value can be modified by the user.\n// When set to true, the input becomes non-editable, and features like the clear button are disabled,\n// effectively making the field display-only."
        },
        {
          "name": "required",
          "comment": "// 'required' is a boolean prop that marks the input field as mandatory.\n// When set to true, it:\n// \u2022 Adds an asterisk in the UI next to the label to visually indicate the field is required.\n// \u2022 Sets the 'aria-required' attribute for accessibility, informing assistive technologies that the field must be filled out."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop determines the visual sizing of the text input component.\n// It accepts either 'medium' (the default) or 'large'. This value is used to apply\n// corresponding CSS class names (via the classBySize map) for proper styling and\n// also sets the icon sizes (16px for medium, 24px for large), ensuring a consistent,\n// proportional appearance throughout the component."
        },
        {
          "name": "spellcheck",
          "comment": "// The 'spellcheck' prop controls whether the browser's built-in spell checking is enabled on the input field. When true, it allows the browser to underline misspelled words and provide correction suggestions; when false, these features are disabled."
        },
        {
          "name": "textAlign",
          "comment": "// The 'textAlign' prop controls the alignment of the input's text. It accepts either 'left' or 'right'\n// (defaulting to 'left') and adds a corresponding CSS class (either \"text-align-left\" or \"text-align-right\")\n// to style the text alignment within the input field."
        },
        {
          "name": "type",
          "comment": "// The \"type\" prop determines the kind of data the input accepts by setting the HTML input's type attribute (such as \"text\", \"password\", \"email\", etc.). It also drives conditional behavior in the component\u2014for instance, enabling the password visibility toggle if the type is \"password\"."
        },
        {
          "name": "validText",
          "comment": "// The 'validText' prop is used to display a positive validation message below the text input when no error is present. It provides user feedback that the current input value is valid."
        },
        {
          "name": "name",
          "comment": "// The 'name' prop assigns a name attribute to the input element, which is essential for form submissions by identifying the field's value in the form data."
        }
      ],
      "events": [
        {
          "name": "valueChange",
          "comment": "// The 'valueChange' event is emitted whenever the input's value is updated (either via user input or programmatically cleared),\n// allowing parent components or consumers of the component to listen for and respond to value changes in real time."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-textarea-input.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an accessible name for the textarea input by assigning its value to the aria-label attribute.\n// This is particularly important for assistive technologies (like screen readers) to convey the purpose and context of the input to users."
        },
        {
          "name": "autocorrect",
          "comment": "// The 'autocorrect' prop configures whether automatic text correction is enabled for the textarea.\n// It accepts a boolean or a string: passing true forces it to \"on\", false to \"off\"; or you can manually set it to \"on\" or \"off\".\n// This value is then passed as the autocorrect attribute to the textarea element (helpful for Safari's auto correction feature)."
        },
        {
          "name": "autoFocusInput",
          "comment": "// The 'autoFocusInput' prop determines whether the textarea should automatically receive focus when the component is rendered. This is achieved by setting the 'autofocus' attribute on the <textarea>, allowing for improved user experience in scenarios where immediate text input is desired."
        },
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop determines whether the textarea should be inactive. When set to true, it prevents user interaction by setting the disabled attribute on the textarea and applying a 'disabled' CSS class to modify its appearance accordingly. This ensures users cannot edit or focus on the input when it\u2019s disabled."
        },
        {
          "name": "enterkeyhint",
          "comment": "// The 'enterkeyhint' property allows developers to specify the label or behavior shown on the enter key \n// of virtual keyboards. By setting this prop, you can suggest which action (e.g., \"done\", \"go\", \"search\") \n// should be used to provide context for the user, enhancing mobile usability. This hint is applied directly \n// to the textarea element's enterkeyhint attribute."
        },
        {
          "name": "errorText",
          "comment": "// The 'errorText' prop holds the error message for the textarea. When provided, it causes the component to display error styling and show the error text below the input, indicating that there is a validation issue."
        },
        {
          "name": "helperText",
          "comment": "// The 'helperText' prop specifies optional guidance text displayed beneath the textarea input. It helps provide additional context or instructions to the user when no error or valid text is present."
        },
        {
          "name": "label",
          "comment": "// The 'label' prop defines the text label shown above the textarea input, providing users with a descriptive title for the field. If specified, the label is rendered (along with an asterisk if the input is required), helping improve form clarity and accessibility."
        },
        {
          "name": "maxLength",
          "comment": "// The 'maxLength' prop specifies the maximum number of characters that a user can enter into the textarea. When set, it limits input to the defined character count and is applied directly to the textarea's maxlength attribute."
        },
        {
          "name": "minLength",
          "comment": "// 'minLength' sets the minimum number of characters that the textarea input must contain to be considered valid. It is applied as an attribute on the underlying <textarea> element."
        },
        {
          "name": "placeholder",
          "comment": "// The 'placeholder' prop provides a hint to the user by displaying a short, descriptive text inside the textarea when no value is entered. When the textarea is empty, the placeholder text appears as a suggestion or prompt, guiding the user on the expected input format or content."
        },
        {
          "name": "readOnly",
          "comment": "// The 'readOnly' prop makes the textarea display content that users cannot modify.\n// When set to true, the textarea becomes non-editable, and additional features like the clear button are disabled."
        },
        {
          "name": "required",
          "comment": "// Prop: required\n// When set to true, this prop indicates that the textarea input is mandatory. It marks\n// the input as required by adding an asterisk next to the label and setting the appropriate\n// aria attributes to inform assistive technologies that a value must be provided."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop allows consumers to choose between two predefined sizes ('medium' or 'large') for the textarea input. It controls the component\u2019s styling and layout, including the clear icon's size (using '24' for large and '16' for medium), ensuring consistent design across different size variants."
        },
        {
          "name": "spellcheck",
          "comment": "// The 'spellcheck' prop determines whether the browser's built-in spell checking feature should be enabled on the textarea element. When set to true, the browser will validate the text for spelling errors, and when false, it will not provide spell-checking feedback."
        },
        {
          "name": "textAlign",
          "comment": "// The 'textAlign' prop lets users control the horizontal alignment of the text inside the textarea (either 'left' or 'right'). Its value is used to add a corresponding CSS class (e.g., 'text-align-left' or 'text-align-right') onto the input, thus affecting the text positioning visually."
        },
        {
          "name": "validText",
          "comment": "// validText: (optional) Specifies a message indicating the field\u2019s valid state. When provided (and if no errorText is set), it renders below the input with valid styling to inform the user that the input content is valid."
        }
      ],
      "events": [
        {
          "name": "valueChange",
          "comment": "// The 'valueChange' event is emitted whenever the textarea's value is updated (either by user input or programmatically). This allows parent components to listen for and react to changes in the input's value in real time."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-time-picker.tsx": {
      "props": [
        {
          "name": "ampm",
          "comment": "// The \"ampm\" prop determines whether the time input should operate in 12-hour format (with AM/PM)\n// or in 24-hour format. When set to true, the component initializes its formatter with 12-hour logic and\n// adjusts the maximum input length accordingly; when false, it uses 24-hour formatting."
        },
        {
          "name": "allowedCharsRegex",
          "comment": "// The allowedCharsRegex prop lets you specify which characters are permitted while typing in the time input field.\n// It accepts either a RegExp or a string, and by default it uses a regex that allows numbers, colons, and\n// (if in 12-hour mode) letters (like 'a', 'p', 'm') and whitespace. This custom regex is used in the\n// handleInputKeyPress method to filter out any characters that don\u2019t match the allowed set, ensuring that\n// the input conforms to the expected time format."
        },
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an accessible label for the input element. When a visible label isn't supplied via the 'label' prop, 'ariaLabel' is used to set the input's 'aria-label' attribute, enhancing screen reader support and ensuring that the component remains accessible."
        },
        {
          "name": "autoFormat",
          "comment": "// 'autoFormat': When set to true, the component automatically formats the entered time string in real-time as the user types. This means that the TimeInputFormatter will apply formatting rules (e.g., adding colons or adjusting for AM/PM) to help maintain a valid, user-friendly time display during input."
        },
        {
          "name": "autoFocusInput",
          "comment": "// If true, the input field automatically receives focus when the component loads, allowing users to start typing immediately without manually clicking on it."
        },
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop determines whether the time input is interactive. When true, it sets the input's \"disabled\" attribute\n// and applies a 'disabled' CSS class to the container, preventing user editing and visually indicating that the picker is inactive."
        },
        {
          "name": "disableValidation",
          "comment": "// The 'disableValidation' prop, when set to true, prevents the component from performing its default validation logic on the time input. This means that even if the time entered is invalid, missing, or out of the min/max bounds, the component will not set any error messages or validation state."
        },
        {
          "name": "errorText",
          "comment": "// The 'errorText' prop holds custom error message text for the time input. When validation fails or an error condition is met, its value is used to display an error message below the input field and to set the appropriate ARIA attributes for accessibility."
        },
        {
          "name": "helperText",
          "comment": "// The helperText prop is an optional string that provides additional guidance or context for the input.\n// When specified, it renders as a helper text label below the main input label, helping users understand the expected input."
        },
        {
          "name": "label",
          "comment": "// The 'label' prop specifies the text label for the time input field. When provided, the component renders this label above the input element to inform users of the field's purpose and improve accessibility."
        },
        {
          "name": "min",
          "comment": "// The 'min' prop defines the minimum allowable time (in 24-hour format) for the input. It is used during validation to ensure that\n// the user-entered time is not earlier than this specified minimum value, and if it is, a corresponding error message is shown."
        },
        {
          "name": "max",
          "comment": "// The 'max' prop specifies the maximum allowed time (in 24-hour format) for the time input.\n// During validation, the component compares the entered time against 'max' and sets an error if the input exceeds this limit."
        },
        {
          "name": "placeholder",
          "comment": "/* \n   The 'placeholder' prop allows the developer to set custom placeholder text for the time input.\n   When no value is entered, this text is displayed in the input field to guide the user on the expected format or value.\n*/"
        },
        {
          "name": "readOnly",
          "comment": "// The 'readOnly' prop determines if the time input field should be non-editable.\n// When set to true, the input field becomes read-only, which means users cannot change its value.\n// This is useful for displaying time information that shouldn't be modified by the user."
        },
        {
          "name": "required",
          "comment": "// The 'required' prop indicates whether the time input is mandatory. When set to true, it renders a visual indicator (an asterisk next to the label) and triggers validation to ensure the user provides a value, displaying an error message (\"Required\") if the input is empty."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop allows the caller to set the size of the time picker component by choosing between 'medium' and 'large' (defaulting to 'medium'). \n// This prop is used to assign a corresponding CSS class from the classBySize map to style the input container appropriately."
        },
        {
          "name": "validText",
          "comment": "// The 'validText' prop allows consumers of the component to provide custom text that is displayed when the time input is in a valid state. \n// If there is no error, the component renders this text below the input field to provide users with positive feedback or additional guidance."
        },
        {
          "name": "value",
          "comment": "// The 'value' prop holds the current time value entered into the input. When updated, a watcher formats the display using the component\u2019s formatter, emits a change event (with both the raw value and formatted string), and triggers any necessary validation. This prop allows both external control over the input\u2019s value and internal binding for display updates."
        }
      ],
      "events": [
        {
          "name": "timeInputBlur",
          "comment": "// Event fired when the time input loses focus. It notifies parent components that editing is finished,\n// providing details such as the current parsed value and the final formatted input string\n// (including validation feedback) so they can respond accordingly."
        },
        {
          "name": "valueChange",
          "comment": "// The 'valueChange' event is emitted whenever the internal time value is updated (either through user input or programmatically). It sends an object containing both the new raw value and its formatted display string, allowing parent components to respond to changes in the time input."
        }
      ],
      "slots": [
        {
          "name": "timeZone",
          "comment": "// The 'timeZone' slot allows consumers of the component to insert their own time zone UI elements (such as a dropdown for selecting a time zone). This slot acts as a placeholder inside the component layout where the provided custom time zone control will be rendered."
        }
      ],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-time-picker-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Time Picker',\n  argTypes: {\n    ampm: {\n      name: 'ampm',\n      description: 'Sets 12/24 hour format for the input string.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The input's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    autoFocusInput: {\n      name: 'auto-focus-input',\n      description: 'Sets autofocus for the input',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    autoFormat: {\n      name: 'auto-format',\n      description: 'Formats the text while typing in the input field',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the text input is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disableValidation: {\n      name: 'disable-validation',\n      description: 'Disables default validation for the time input',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The input's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    helperText: {\n      name: 'helper-text',\n      description: \"The input's helper text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    label: {\n      description: \"The input's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    min: {\n      name: 'min',\n      description: 'Minimum time (in 24 hour format)',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    max: {\n      name: 'max',\n      description: 'Maximum time (in 24 hour format)',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    placeholder: {\n      description: \"The input's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the input is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the input is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the input',\n      table: {\n        defaultValue: { summary: \"'medium'\" },\n        type: { summary: \"'medium' | 'large'\" },\n      },\n    },\n    validText: {\n      name: 'valid-text',\n      description: \"The input's valid text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"The input's value\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange', 'timeInputBlur'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n      enableShortcuts: false,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ampm,\n  autoFormat,\n  ariaLabel,\n  autoFocusInput,\n  disabled,\n  disableValidation,\n  errorText,\n  helperText,\n  label,\n  min,\n  max,\n  placeholder,\n  readOnly,\n  required,\n  size,\n  validText,\n  value,\n}) => html`\n  <modus-time-picker\n    ampm=${ampm}\n    auto-format=${autoFormat}\n    aria-label=${ariaLabel}\n    auto-focus-input=${autoFocusInput}\n    disable-validation=${disableValidation}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    min=${min}\n    max=${max}\n    placeholder=${placeholder}\n    read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    valid-text=${validText}\n    value=${value}></modus-time-picker>\n`;\n\nconst defaultArgs = {\n  ampm: false,\n  autoFormat: false,\n  ariaLabel: 'Time Input',\n  autoFocusInput: true,\n  disableValidation: false,\n  disabled: false,\n  errorText: '',\n  helperText: 'hh:mm',\n  label: 'Time',\n  min: null,\n  max: null,\n  placeholder: '',\n  readOnly: false,\n  required: false,\n  size: 'medium',\n  validText: '',\n  value: '23:39',\n};\n\nexport const Default = Template.bind({});\nDefault.args = defaultArgs;\n\nexport const TimeFormat = Template.bind({});\nTimeFormat.args = {\n  ...defaultArgs,\n  ...{ ampm: 'true', helperText: 'hh:mm AM/PM', placeholder: '12:00 AM' },\n};\n\nexport const AutoFormat = Template.bind({});\nAutoFormat.args = {\n  ...defaultArgs,\n  ...{\n    ampm: true,\n    value: '',\n    helperText: 'hh:mm AM/PM',\n    autoFormat: true,\n    placeholder: '12:00 AM',\n  },\n};\n\nexport const MinAndMax = Template.bind({});\nMinAndMax.args = {\n  ...defaultArgs,\n  ...{\n    min: '14:00',\n    max: '20:00',\n    helperText: 'hh:mm (min=14:00 to max=20:00)',\n    value: '14:00',\n    placeholder: '14:00',\n    autoFormat: true,\n  },\n};\n\nconst WithTimeZoneTemplate = ({\n  ampm,\n  autoFormat,\n  ariaLabel,\n  autoFocusInput,\n  disabled,\n  disableValidation,\n  errorText,\n  helperText,\n  label,\n  min,\n  max,\n  placeholder,\n  readOnly,\n  required,\n  size,\n  validText,\n  value,\n}) => html`\n  <modus-time-picker\n    ampm=${ampm}\n    auto-format=${autoFormat}\n    aria-label=${ariaLabel}\n    auto-focus-input=${autoFocusInput}\n    disable-validation=${disableValidation}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    min=${min}\n    max=${max}\n    placeholder=${placeholder}\n    read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    valid-text=${validText}\n    value=${value}>\n    <div style=\"width: 300px;padding-left: 0.5rem;\" slot=\"timeZone\">\n      <modus-select id=\"timezone\" label=\"Time Zone\" aria-label=\"Time Zone\" options-display-prop=\"display\"></modus-select>\n    </div>\n  </modus-time-picker>\n  ${setSelects()}\n`;\n\nconst setSelects = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n  const modusSelect = document.querySelector('#timezone');\n  modusSelect.options = [\n    { display: 'Alpha Time Zone' },\n    { display: 'Australian Central Daylight Time' },\n    { display: 'Atlantic Daylight Time' },\n  ];\n  `;\n\n  return tag;\n};\nexport const WithTimeZone = WithTimeZoneTemplate.bind({});\nWithTimeZone.args = { ...defaultArgs, autoFormat: true };\n"
    },
    "modus-toast.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an optional accessible label for the toast.\n// When set, its value is applied to the outermost element via the aria-label attribute,\n// ensuring that screen readers can announce the toast correctly for better accessibility."
        },
        {
          "name": "dismissible",
          "comment": "// 'dismissible' determines whether the toast displays a close button that allows users to manually dismiss the toast.\n\nIn the component, if dismissible is true, a button with a close icon is rendered. When clicked, it triggers the dismissElement() method, which emits a dismissClick event and, depending on the retainElement property, may remove the toast from the DOM."
        },
        {
          "name": "role",
          "comment": "// The 'role' prop specifies the ARIA role for the toast element, helping assistive technologies interpret its purpose correctly (defaulting to \"status\" but overrideable as needed)."
        },
        {
          "name": "type",
          "comment": "// The 'type' prop defines the visual style variant of the toast. It controls which icon and CSS class are used,\n// allowing the toast to represent various states (e.g., 'danger', 'success', 'warning'). The default value is 'default',\n// and valid options include 'danger', 'dark', 'primary', 'secondary', 'success', and 'warning'."
        }
      ],
      "events": [
        {
          "name": "dismissClick",
          "comment": "// The dismissClick event is emitted when the toast is dismissed (either by user clicking the dismiss button or automatically after the delay). \n// It allows parent components or consumers of the toast to listen for the dismissal event and perform any necessary actions (like removing or updating state)."
        }
      ],
      "slots": [],
      "documentation": ""
    },
    "modus-divider.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-toolbar.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "// The 'ariaLabel' prop provides an accessible label for the toolbar, enhancing screen reader support.\n// When a value is supplied, it sets the 'aria-label' attribute on the Host element, allowing assistive technologies\n// to describe the toolbar's purpose to users.\n\nThe prop accepts a string value (or null) and is applied to the toolbar's root element in the render method:\n// In the render() method:\n<Host aria-label={this.ariaLabel || undefined} role=\"toolbar\">\n  {this.renderButtons()}\n</Host>\n// This ensures that if an 'ariaLabel' is provided, it will be used to describe the toolbar to users relying on assistive technologies."
        },
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop indicates whether the toolbar's buttons should be interactive.\n// When true, it passes the disabled state to each child modus-button, thereby preventing user interaction."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { html } from 'lit-html';\nimport docs from './modus-toolbar-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Toolbar',\n  component: 'modus-toolbar',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The Toolbar's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      name: 'disabled',\n      description: 'Whether the Toolbar is disabled',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: false },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['buttonClick'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, disabled }) => html`\n  <modus-toolbar .disabled=${disabled} aria-label=${ariaLabel}>\n    <modus-button>Button 1</modus-button>\n    <modus-button>Button 2</modus-button>\n    <modus-button>Button 3</modus-button>\n  </modus-toolbar>\n`;\n\nconst IconOnlyTemplate = ({ ariaLabel, disabled }) => html`\n  <modus-toolbar .disabled=${disabled} aria-label=${ariaLabel}>\n    <modus-tooltip text=\"Undo\" position=\"top\">\n      <modus-button icon-only=\"undo\"></modus-button>\n    </modus-tooltip>\n    <modus-tooltip text=\"Redo\" position=\"top\">\n      <modus-button icon-only=\"redo\"></modus-button>\n    </modus-tooltip>\n    <modus-tooltip text=\"Expand\" position=\"top\">\n      <modus-button icon-only=\"expand\"></modus-button>\n    </modus-tooltip>\n    <modus-tooltip text=\"Collapse\" position=\"top\">\n      <modus-button icon-only=\"collapse\"></modus-button>\n    </modus-tooltip>\n    <modus-divider></modus-divider>\n    <modus-tooltip text=\"Window Dock / Undock\" position=\"top\">\n      <modus-button icon-only=\"window_dock_undock\"></modus-button>\n    </modus-tooltip>\n  </modus-toolbar>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: 'Toolbar',\n  disabled: false,\n  tabIndex: 0,\n};\n\nexport const IconOnly = IconOnlyTemplate.bind({});\nIconOnly.args = {\n  ariaLabel: 'Toolbar',\n  disabled: false,\n  tabIndex: 0,\n};\n"
    },
    "modus-tooltip.tsx": {
      "props": [
        {
          "name": "ariaLabel",
          "comment": "The prop \"ariaLabel\" is used to provide an accessible label for the tooltip. It enables assistive technologies (like screen readers) to announce a custom description for the tooltip content, helping users with visual impairments understand the purpose or context of the tooltip.\n\nFor example, a concise comment could be:\n\n-------------------------------------------------\n/** \n * ariaLabel: A custom accessible label for the tooltip.\n * Use this prop to supply screen readers with a descriptive text for the tooltip,\n * enhancing accessibility for users with disabilities.\n */\n-------------------------------------------------"
        },
        {
          "name": "position",
          "comment": "// 'position' determines where the tooltip will be placed relative to its target element.\n// It accepts values defined in ModusToolTipPlacement (e.g., 'top', 'bottom', etc.). When changed,\n// the component updates or initializes the popper instance accordingly to reposition the tooltip."
        },
        {
          "name": "text",
          "comment": "// The 'text' prop holds the content to be displayed inside the tooltip. \n// It is used to determine whether the tooltip should be visible (if its length is greater than 1), \n// triggering the initialization or cleanup of the Popper.js instance accordingly."
        },
        {
          "name": "disabled",
          "comment": "// The 'disabled' prop is a boolean flag that controls whether the tooltip is active. When set to true, it prevents the tooltip from being displayed by cleaning up the Popper instance and removing event listeners. Conversely, when false, it enables the tooltip functionality by initializing the Popper and attaching the necessary event listeners."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-tooltip-storybook-docs.mdx';\nimport { html } from 'lit-html';\n\nexport default {\n  title: 'Components/Tooltip',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The tooltip's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      description: 'Hide the tooltip',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    position: {\n      options: ['bottom', 'left', 'right', 'top'],\n      type: 'select',\n      description: \"The tooltip's position relative to the item it's wrapping\",\n      table: {\n        defaultValue: { summary: `'top'` },\n        type: { summary: `'bottom' | 'left' | 'right' | 'top'` },\n      },\n    },\n    text: {\n      description: \"The tooltip's text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    layout: 'centered',\n  },\n};\n\nexport const Default = ({ ariaLabel, position, text, disabled }) => html`\n  <modus-tooltip aria-label=${ariaLabel} position=${position} text=${text} ?disabled=${disabled}>\n    <modus-button>Button</modus-button>\n  </modus-tooltip>\n`;\nDefault.args = {\n  ariaLabel: '',\n  position: 'bottom',\n  text: 'Tooltip text...',\n  disabled: false,\n};\n"
    },
    "modus-utility-panel.tsx": {
      "props": [
        {
          "name": "targetContent",
          "comment": "// The 'targetContent' prop is a CSS selector string that identifies the page element whose margins are adjusted when the panel is opened or closed, enabling a \"push content\" effect."
        }
      ],
      "events": [
        {
          "name": "panelOpened",
          "comment": "// The 'panelOpened' event is emitted when the panel is expanded/opened. External listeners can subscribe to this event to execute any logic needed right after the panel becomes visible (for example, adjusting layouts or triggering notifications)."
        },
        {
          "name": "panelClosed",
          "comment": "// The 'panelClosed' event is emitted whenever the panel is closed. This allows parent components or external listeners to be notified that the panel has been closed so they can perform any necessary updates or actions in response."
        }
      ],
      "slots": [
        {
          "name": "header",
          "comment": "// The 'header' slot allows users of the component to provide custom header content. \n// If content is provided in this slot, the component renders a header section (including a <div> with the class 'panel-header' and a horizontal rule),\n// ensuring that the header appears above the panel's body. This conditional rendering helps in creating flexible layouts where a header is optional."
        },
        {
          "name": "body",
          "comment": "// The \"body\" slot is used to pass in the main content for the utility panel.\n// Any elements placed in the \"body\" slot by the component consumer will be rendered in the panel's primary content area, between the optional header and footer sections."
        },
        {
          "name": "footer",
          "comment": "// The \"footer\" slot is intended for optional custom content at the bottom of the utility panel. When a user provides elements with slot=\"footer\" inside the component, these elements are rendered within a designated footer area (separated from the body by a horizontal rule), allowing developers to add extra controls, information, or actions at the panel's footer as needed."
        }
      ],
      "documentation": "import docs from './modus-utility-panel-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { useEffect } from '@storybook/preview-api';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Utility Panel',\n  argTypes: {\n    ariaLabel: {\n      description: 'The aria label for the panel',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    expanded: {\n      description: 'The expanded state of side navigation panel and items',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    pushContent: {\n      description: 'Specify if the side navigation should push the content to the right or overlay the content',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    targetContent: {\n      name: 'target-content',\n      description:\n        \"Specify the selector for the page's content for which paddings and margins will be set by side navigation based on the `mode`\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['helpOpen'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    viewMode: 'docs',\n  },\n  decorators: [withActions],\n};\n\nconst DefaultTemplate = ({ ariaLabel, expanded, targetContent, pushContent }) => {\n  return html`\n    <div id=\"defaultTemplate\">\n      <div\n        style=\"width: 100%; align-items: center; height: 56px; box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;\">\n        <modus-navbar\n          id=\"navbar\"\n          show-main-menu\n          .buttons=${[\n            {\n              id: 'addMenu',\n              icon: 'add',\n              tooltip: {\n                text: 'Add',\n              },\n            },\n          ]}>\n        </modus-navbar>\n      </div>\n\n      <div\n        id=\"container\"\n        style=\"display:flex; min-height:500px; overflow:hidden; position: relative; box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n        <modus-utility-panel\n          aria-label=${ariaLabel}\n          target-content=\"#panelcontent\"\n          expanded=${expanded}\n          push-content=${pushContent}\n          target-content=${targetContent}>\n          <span slot=\"header\">Utility Panel Header</span>\n          <div slot=\"body\">Content of the utility panel goes here.</div>\n          <span slot=\"footer\">Utility Panel Footer</span>\n        </modus-utility-panel>\n\n        <div id=\"panelcontent\" style=\"padding: 10px;\">\n          <div id=\"overview\">\n            <p>\n              The side navigation of an application provides context through accessible menu options and positions a\n              consistent component to connect to various pages in the application. The side navigation is a collapsible side\n              content of the site\u2019s pages. It is located alongside the page\u2019s primary content. The component is designed to\n              add side content to a fullscreen application. It is activated through the \u201chamburger\u201d menu in the Navbar.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n};\n\nexport const Default = DefaultTemplate.bind({});\n\nDefault.args = {\n  ariaLabel: 'Utility Panel',\n  expanded: false,\n  pushContent: true,\n  targetContent: '#panelcontent',\n};\n\nDefault.decorators = [\n  (Story) => {\n    useEffect(() => {\n      const handleHelpOpen = () => {\n        const panel = document.querySelector('modus-utility-panel');\n        if (panel) {\n          const isExpanded = panel.getAttribute('expanded') === 'true';\n          panel.setAttribute('expanded', (!isExpanded).toString());\n        }\n      };\n      document.addEventListener('buttonClick', handleHelpOpen);\n\n      return () => {\n        document.removeEventListener('buttonClick', handleHelpOpen);\n      };\n    }, []);\n\n    return Story();\n  },\n];\n"
    }
  },
  "v2_components": {
    "modus-wc-accordion.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IModusWcCollapseOptions } from '../modus-wc-collapse/modus-wc-collapse';\n\ninterface AccordionArgs {\n  'custom-class'?: string;\n}\n\nconst options: IModusWcCollapseOptions[] = [\n  {\n    description: 'Item one description',\n    icon: 'alert',\n    iconAriaLabel: 'Alert',\n    title: 'Item One',\n  },\n  {\n    description: 'Item two description',\n    icon: 'alert',\n    iconAriaLabel: 'Alert',\n    title: 'Item Two',\n  },\n  {\n    description: 'Item three description',\n    icon: 'alert',\n    iconAriaLabel: 'Alert',\n    title: 'Item Three',\n  },\n];\n\nconst meta: Meta<AccordionArgs> = {\n  title: 'Components/Accordion',\n  component: 'modus-wc-accordion',\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['expandedChange'],\n    },\n    layout: {\n      padded: true,\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AccordionArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<div style=\"padding: 20px;\">\n  <modus-wc-accordion custom-class=${ifDefined(args['custom-class'])}>\n    <modus-wc-collapse .options=${options[0]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n    <modus-wc-collapse .options=${options[1]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n    <modus-wc-collapse .options=${options[2]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n  </modus-wc-accordion>\n</div>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n"
    },
    "modus-wc-alert.tsx": {
      "props": [
        {
          "name": "role",
          "comment": "// The 'role' prop is used to define the ARIA role of the alert component.\n// It allows developers to customize how assistive technologies interpret the alert,\n// ensuring it conveys the appropriate semantic meaning (e.g., 'alert', 'status', etc.).\n// Although the default value is set to 'status', it can be overridden to fit the context in which the alert is used."
        }
      ],
      "events": [],
      "slots": [
        {
          "name": "content",
          "comment": "// The 'content' slot acts as a fallback for custom alert content.\n// When neither the alertTitle nor alertDescription is provided,\n// any content passed into this named slot (\"content\") will be rendered,\n// allowing the developer to supply fully custom alert markup."
        },
        {
          "name": "button",
          "comment": "// The \"button\" slot provides an insertion point for custom button content. It lets a user supply an alternate or additional button (for example, a custom dismissal or action button) inside the alert. When the component's dismissable prop is true, a default dismiss button is also rendered into the same slot, ensuring consistent placement and styling."
        }
      ],
      "documentation": ""
    },
    "modus-wc-autocomplete.tsx": {
      "props": [
        {
          "name": "items",
          "comment": "// The 'items' prop holds an array of autocomplete option objects (each with properties like label, value, selected, and visibleInMenu) that determine which items are shown in the dropdown menu and which are selected. Assigning a new array ensures the component re-renders with the updated list."
        },
        {
          "name": "minChars",
          "comment": "// The 'minChars' prop defines the minimum number of characters a user must type into the input\n// before the dropdown menu with suggestions is displayed. This ensures that the menu is only shown\n// when the input is sufficiently populated, reducing unnecessary suggestions when the input is too short."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IAutocompleteItem } from './modus-wc-autocomplete';\nimport { ModusSize } from '../types';\n\nconst items: IAutocompleteItem[] = [\n  { label: 'Apple', value: 'apple', visibleInMenu: true },\n  { label: 'Banana', value: 'banana', visibleInMenu: true },\n  { label: 'Blueberry', value: 'blueberry', visibleInMenu: true },\n  { label: 'Cherry', value: 'cherry', visibleInMenu: true },\n  { label: 'Grape', value: 'grape', visibleInMenu: true },\n  { label: 'Lemon', value: 'lemon', visibleInMenu: true },\n  { label: 'Orange', value: 'orange', visibleInMenu: true },\n  { label: 'Peach', value: 'peach', visibleInMenu: true },\n  { label: 'Pear', value: 'pear', visibleInMenu: true },\n  { label: 'Strawberry', value: 'strawberry', visibleInMenu: true },\n];\n\ninterface AutocompleteArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  'debounce-ms'?: number;\n  disabled?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  items: IAutocompleteItem[];\n  label?: string;\n  'min-chars': number;\n  'multi-select'?: boolean;\n  name?: string;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  size?: ModusSize;\n  value: string;\n}\n\nconst meta: Meta<AutocompleteArgs> = {\n  title: 'Components/Forms/Autocomplete',\n  component: 'modus-wc-autocomplete',\n  args: {\n    bordered: true,\n    'debounce-ms': 300,\n    disabled: false,\n    items: items,\n    label: 'Label',\n    'min-chars': 0,\n    'multi-select': false,\n    size: 'md',\n    value: '',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: [\n        'chipRemove',\n        'inputBlur',\n        'inputChange',\n        'inputFocus',\n        'itemSelect',\n      ],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AutocompleteArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    const handleInputChange = (e: CustomEvent<Event>) => {\n      if (!e.detail?.target) return;\n\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const input = e.detail.target as HTMLInputElement;\n        const searchText = input.value.toLowerCase();\n\n        // Create a new array, updating the values of 'selected' and 'visibleInMenu'.\n        const updatedItems = items.map((item) => ({\n          ...item,\n          selected: searchText ? item.selected : false,\n          visibleInMenu: item.label.toLowerCase().includes(searchText),\n        }));\n\n        // Ensuring that a new array is created when updating items is critical to component re-render.\n        autocomplete.items = [...updatedItems];\n        autocomplete.value = input.value;\n      }\n    };\n\n    const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const label = e.detail.label;\n        if (label) {\n          autocomplete.value = label;\n        }\n\n        // Clear the previous selection.\n        items.forEach((item) => (item.selected = false));\n\n        // Mark the user selected menu item as selected and create a new array to update items.\n        const foundItem = items.find((item) => item.value === e.detail.value);\n        if (foundItem) {\n          foundItem.selected = true;\n          autocomplete.items = [...items];\n        }\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  /* Only for Storybook */\n  div[id^=\"story--components-forms-autocomplete--default\"] {\n    height: 400px;\n  }\n</style>\n<script>\n  const handleInputChange = (e) => {\n    if (!e.detail?.target) return;\n\n    const autocomplete = (e.target as HTMLInputElement).closest(\n      'modus-wc-autocomplete'\n    );\n\n    if (autocomplete) {\n      const input = e.detail.target as HTMLInputElement;\n      const searchText = input.value.toLowerCase();\n\n      // Create a new array, updating the values of 'selected' and 'visibleInMenu'.\n      const updatedItems = items.map((item) => ({\n        ...item,\n        selected: searchText ? item.selected : false,\n        visibleInMenu: item.label.toLowerCase().includes(searchText),\n      }));\n\n      // Ensuring that a new array is created when updating items is critical to component re-render.\n      autocomplete.items = [...updatedItems];\n      autocomplete.value = input.value;\n    }\n  };\n\n  const handleItemSelect = (e) => {\n    const autocomplete = (e.target as HTMLInputElement).closest(\n      'modus-wc-autocomplete'\n    );\n\n    if (autocomplete) {\n      // Clear the previous selection.\n      items.forEach((item) => (item.selected = false));\n\n      // Mark the user selected menu item as selected and create a new array to update items.\n      const foundItem = items.find((item) => item.value === e.detail.value);\n      if (foundItem) {\n        foundItem.selected = true;\n        autocomplete.items = [...items];\n      }\n    }\n  };\n</script>\n<modus-wc-autocomplete\n  aria-label=\"Fruit autocomplete\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  .items=${args.items}\n  label=${ifDefined(args.label)}\n  min-chars=${args['min-chars']}\n  ?multi-select=${false}\n  name=${ifDefined(args.name)}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  size=${ifDefined(args.size)}\n  value=${args.value}\n  @inputChange=${handleInputChange}\n  @itemSelect=${handleItemSelect}\n></modus-wc-autocomplete>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const MultiSelect: Story = {\n  render: (args) => {\n    const handleChipRemove = (e: CustomEvent<IAutocompleteItem>) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        // Update the 'selected' value of the removed item.\n        const foundItem = items.find((item) => item.value === e.detail.value);\n        if (foundItem) {\n          foundItem.selected = false;\n          autocomplete.items = [...items];\n        }\n      }\n    };\n\n    const handleInputChange = (e: CustomEvent<Event>) => {\n      if (!e.detail?.target) return;\n\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const input = e.detail.target as HTMLInputElement;\n        const searchText = input.value.toLowerCase();\n\n        // Create a new array, updating the values of 'selected' and 'visibleInMenu'.\n        const updatedItems = items.map((item) => ({\n          ...item,\n          visibleInMenu: item.label.toLowerCase().includes(searchText),\n        }));\n\n        // Ensuring that a new array is created when updating items is critical to component re-render.\n        autocomplete.items = [...updatedItems];\n        autocomplete.value = input.value;\n      }\n    };\n\n    const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        // Reset autocomplete 'value' and update the value of 'visibleInMenu' for all items.\n        autocomplete.value = '';\n        autocomplete.items = items.map((item) => ({\n          ...item,\n          visibleInMenu: true,\n        }));\n\n        // Mark the user selected item as selected.\n        const fruit = items.find((fruit) => fruit.value === e.detail.value);\n        if (fruit) {\n          fruit.selected = true;\n        }\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  /* Only for Storybook */\n  div#story--components-forms-autocomplete--multi-select-inner {\n    height: 400px;\n  }\n</style>\n<script>\n  const handleChipRemove = (e) => {\n    const autocomplete = (e.target as HTMLInputElement).closest(\n      'modus-wc-autocomplete'\n    );\n\n    if (autocomplete) {\n      // Update the 'selected' value of the removed item.\n      const foundItem = items.find((item) => item.value === e.detail.value);\n      if (foundItem) {\n        foundItem.selected = false;\n        autocomplete.items = [...items];\n      }\n    }\n  };\n\n  const handleInputChange = (e) => {\n    if (!e.detail?.target) return;\n\n    const autocomplete = (e.target as HTMLInputElement).closest(\n      'modus-wc-autocomplete'\n    );\n\n    if (autocomplete) {\n      const input = e.detail.target as HTMLInputElement;\n      const searchText = input.value.toLowerCase();\n\n      // Create a new array, updating the values of 'selected' and 'visibleInMenu'.\n      const updatedItems = items.map((item) => ({\n        ...item,\n        selected: searchText ? item.selected : false,\n        visibleInMenu: item.label.toLowerCase().includes(searchText),\n      }));\n\n      // Ensuring that a new array is created when updating items is critical to component re-render.\n      autocomplete.items = [...updatedItems];\n      autocomplete.value = input.value;\n    }\n  };\n\n  const handleItemSelect = (e) => {\n    const autocomplete = (e.target\n    as\n    HTMLInputElement\n  ).\n    closest(\n      'modus-wc-autocomplete'\n    );\n\n    if (autocomplete) {\n      // Reset autocomplete 'value' and update the value of 'visibleInMenu' for all items.\n      autocomplete.value = '';\n      autocomplete.items = items.map((item) => ({\n        ...item,\n        visibleInMenu: true,\n      }));\n\n      // Mark the user selected item as selected.\n      const fruit = items.find((fruit) => fruit.value === e.detail.value);\n      if (fruit) {\n        fruit.selected = true;\n      }\n    }\n  };\n</script>\n<modus-wc-autocomplete\n  aria-label=\"Fruit autocomplete\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  .items=${args.items}\n  label=${ifDefined(args.label)}\n  min-chars=${args['min-chars']}\n  ?multi-select=${true}\n  name=${ifDefined(args.name)}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  size=${ifDefined(args.size)}\n  value=${args.value}\n  @chipRemove=${handleChipRemove}\n  @inputChange=${handleInputChange}\n  @itemSelect=${handleItemSelect}\n></modus-wc-autocomplete>\n    `;\n  },\n};\n"
    },
    "modus-wc-avatar.tsx": {
      "props": [
        {
          "name": "imgSrc",
          "comment": "// 'imgSrc' is a property that holds the URL or path to the image displayed in the avatar.\n// It is used in the <img> element's 'src' attribute so that the component dynamically renders the specified image."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize } from '../types';\n\ninterface AvatarArgs {\n  alt: string;\n  'custom-class'?: string;\n  'img-src': string;\n  shape: string;\n  size: DaisySize;\n}\n\nconst meta: Meta<AvatarArgs> = {\n  title: 'Components/Avatar',\n  component: 'modus-wc-avatar',\n  args: {\n    alt: 'Example avatar',\n    'img-src':\n      'https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg',\n    shape: 'circle',\n    size: 'md',\n  },\n  argTypes: {\n    shape: {\n      control: { type: 'select' },\n      options: ['circle', 'square'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AvatarArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-avatar\n        alt=\"${args.alt}\"\n        aria-label=\"Avatar\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        img-src=\"${args['img-src']}\"\n        shape=\"${args.shape}\"\n        size=\"${args.size}\"\n      ></modus-wc-avatar>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n"
    },
    "modus-wc-badge.tsx": {
      "props": [
        {
          "name": "color",
          "comment": "// The 'color' prop specifies the visual style of the badge (e.g., primary, secondary, or alert types like success, warning, danger). It dynamically determines the CSS classes via convertPropsToClasses and sets the semantic role to \"alert\" for alert colors, ensuring proper styling and accessibility."
        },
        {
          "name": "customClass",
          "comment": "// The 'customClass' prop allows the user to pass additional CSS classes that are appended to the default classes of the badge. This enables further style customizations beyond the pre-defined classes determined by the 'color', 'size', and 'variant' props."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop determines the size variant of the badge (e.g., 'sm', 'md', 'lg'). When set, it influences the CSS classes generated by convertPropsToClasses for proper spacing and sizing,\n// defaulting to 'md' if not provided."
        },
        {
          "name": "variant",
          "comment": "// The 'variant' prop controls the visual style of the badge. It accepts one of three values:\n// - 'counter': Typically used when the badge displays a numerical count.\n// - 'filled': Applies a solid background style (the default).\n// - 'text': Applies minimal styling with a text-focused appearance.\n// Its value helps determine which CSS classes are applied (via convertPropsToClasses) to style the badge accordingly."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface BadgeArgs {\n  color:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'high-contrast'\n    | 'success'\n    | 'warning'\n    | 'danger';\n  'custom-class'?: string;\n  size: ModusSize;\n  variant: 'counter' | 'filled' | 'text';\n}\n\nconst meta: Meta<BadgeArgs> = {\n  title: 'Components/Badge',\n  component: 'modus-wc-badge',\n  args: {\n    color: 'primary',\n    size: 'md',\n    variant: 'filled',\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: [\n        'primary',\n        'secondary',\n        'tertiary',\n        'high-contrast',\n        'success',\n        'warning',\n        'danger',\n      ],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['counter', 'filled', 'text'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<BadgeArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-badge\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  size=\"${args.size}\"\n  variant=\"${args.variant}\"\n>\n  Badge\n</modus-wc-badge>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const WithIcon: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<style>\n  .modus-wc-icon {\n    padding-inline-end: 4px;\n  }\n</style>\n<modus-wc-badge>\n  <modus-wc-icon decorative name=\"check\" size=\"xs\"></modus-wc-icon>\n  Item\n</modus-wc-badge>\n    `;\n  },\n};\n"
    },
    "modus-wc-breadcrumbs.tsx": {
      "props": [
        {
          "name": "items",
          "comment": "// The 'items' prop is an array of breadcrumb objects (each with a 'label' and an optional 'url') that define the navigation trail.\n// The component uses this array to render each breadcrumb, with the last item indicated as the current page."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-wc-button.tsx": {
      "props": [
        {
          "name": "color",
          "comment": "// The 'color' prop sets the button's color theme (primary, secondary, tertiary, warning, or danger). Its value is used to generate the appropriate CSS classes via convertPropsToClasses, applying the relevant color styling to the button."
        },
        {
          "name": "shape",
          "comment": "// The 'shape' prop defines the button's visual silhouette by accepting values such as 'circle', 'rectangle', or 'square'. During rendering, its value is passed to a utility (convertPropsToClasses) that assigns the appropriate CSS classes to style the button accordingly."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop determines the dimensions and styling of the button (e.g., small, medium, large).\n// Its value (of type DaisySize) is passed into a utility function to compute and apply the proper CSS classes,\n// ensuring that the button appears with consistent sizing throughout the application."
        },
        {
          "name": "type",
          "comment": "// The 'type' prop sets the native HTML button type, determining its behavior\u2014'submit' will submit a form, 'reset' will reset form inputs, and 'button' (the default) acts as a regular clickable button without form submission actions."
        },
        {
          "name": "variant",
          "comment": "// The 'variant' prop defines the visual style of the button\u2014choosing between 'borderless', 'filled', and 'outlined'\u2014to determine its appearance based on the design theme."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize } from '../types';\n\ninterface ButtonArgs {\n  color: 'primary' | 'secondary' | 'tertiary' | 'warning' | 'danger';\n  'custom-class'?: string;\n  disabled: boolean;\n  'full-width': boolean;\n  pressed: boolean;\n  shape: 'circle' | 'rectangle' | 'square';\n  size: DaisySize;\n  type: 'button' | 'submit' | 'reset';\n  variant: 'borderless' | 'filled' | 'outlined';\n}\n\nconst meta: Meta<ButtonArgs> = {\n  title: 'Components/Button',\n  component: 'modus-wc-button',\n  args: {\n    color: 'primary',\n    disabled: false,\n    'full-width': false,\n    pressed: false,\n    shape: 'rectangle',\n    size: 'md',\n    type: 'button',\n    variant: 'filled',\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'tertiary', 'warning', 'danger'],\n    },\n    shape: {\n      control: { type: 'select' },\n      options: ['circle', 'rectangle', 'square'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n    type: {\n      control: { type: 'select' },\n      options: ['button', 'submit', 'reset'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['borderless', 'filled', 'outlined'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['buttonClick'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ButtonArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-button\n  aria-label=\"Click me button\"\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?disabled=\"${args.disabled}\"\n  ?full-width=\"${args['full-width']}\"\n  ?pressed=\"${args.pressed}\"\n  shape=\"${args.shape}\"\n  size=\"${args.size}\"\n  type=\"${args.type}\"\n  variant=\"${args.variant}\"\n>\n  Click me\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const ButtonShapes: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button\n  aria-label=\"Circle button\"\n  shape=\"circle\"\n>\n  Circle\n</modus-wc-button>\n<modus-wc-button\n  aria-label=\"Square button\"\n  shape=\"square\"\n>\n  Square\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const IconOnlyButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button aria-label=\"Notification button\">\n  <modus-wc-icon decorative name=\"notifications\"></modus-wc-icon>\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const IconLeftButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button aria-label=\"Download button\">\n  <modus-wc-icon decorative name=\"download\"></modus-wc-icon>\n  Download\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const IconRightButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button aria-label=\"Details button\">\n  Details\n  <modus-wc-icon decorative name=\"launch\"></modus-wc-icon>\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const IconLeftAndRightButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button aria-label=\"Checkout button\">\n  <modus-wc-icon decorative name=\"shopping_cart\"></modus-wc-icon>\n  Checkout\n  <modus-wc-icon decorative name=\"shopping_cart\"></modus-wc-icon>\n</modus-wc-button>\n    `;\n  },\n};\n"
    },
    "modus-wc-card.tsx": {
      "props": [],
      "events": [],
      "slots": [
        {
          "name": "header",
          "comment": "// The 'header' slot is used to provide custom header content for the card.\n// For example, you can include a <figure> element that, when combined with the backgroundFigure prop,\n// makes the image cover the card's background. This slot is rendered at the top of the card layout,\n // allowing users to insert header-specific elements."
        },
        {
          "name": "title",
          "comment": "// The 'title' slot is designed for injecting custom title content into the card's header area.\n// Developers can pass any markup to this slot to define the card's title, which will be rendered\n// within the designated title container in the card body."
        },
        {
          "name": "subtitle",
          "comment": "// The \"subtitle\" slot allows users to inject additional descriptive content beneath the card title.\n// Place any subtitle or secondary text content here, which will be rendered in the dedicated subtitle area of the card."
        },
        {
          "name": "actions",
          "comment": "// The 'actions' slot is intended for adding interactive elements (such as buttons or links) that perform actions related to the card's content, and it is styled separately within the card for clear visual grouping."
        },
        {
          "name": "footer",
          "comment": "// The \"footer\" slot allows consumers of the component to insert custom content at the bottom of the card.\n// This content appears after the main card body, making it ideal for additional context, links, or actions."
        }
      ],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface CardArgs {\n  'background-figure'?: boolean;\n  bordered?: boolean;\n  'custom-class'?: string;\n  layout?: 'vertical' | 'horizontal';\n  padding?: 'normal' | 'compact';\n}\n\nconst meta: Meta<CardArgs> = {\n  title: 'Components/Card',\n  component: 'modus-wc-card',\n  args: {\n    'background-figure': false,\n    bordered: false,\n    layout: 'vertical',\n    padding: 'normal',\n  },\n  argTypes: {\n    layout: {\n      control: { type: 'select' },\n      options: ['vertical', 'horizontal'],\n    },\n    padding: {\n      control: { type: 'select' },\n      options: ['normal', 'compact'],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<CardArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  .modus-wc-card {\n    width: 400px;\n  }\n</style>\n<modus-wc-card\n  aria-label=\"Sample card\"\n  ?background-figure=${args['background-figure']}\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <span slot=\"title\">Card Title</span>\n  <span slot=\"subtitle\">Card Subtitle</span>\n  <p>This is a sample card content. You can place any content here.</p>\n  <div slot=\"actions\" class=\"modus-wc-justify-end\">\n    <modus-wc-button aria-label=\"Click me\">Click me</modus-wc-button>\n  </div>\n</modus-wc-card>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const SimpleCard: Story = {\n  ...Template,\n  // prettier-ignore\n  render: () => html`\n<modus-wc-card aria-label=\"Simple Card\">\n  Raw card content.\n</modus-wc-card>\n  `,\n};\n\nexport const SlotsLayout: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<style>\n  .slot-box {\n    background: #ccccff;\n    border: 2px solid rebeccapurple;\n    color: rebeccapurple;\n    display: flex;\n    justify-content: center;\n  }\n</style>\n<modus-wc-card\n  aria-label=\"Card with all slots\"\n  ?background-figure=${args['background-figure']}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <div slot=\"header\" class=\"slot-box\">Header Slot</div>\n  <div slot=\"title\" class=\"slot-box\">Title Slot</div>\n  <div slot=\"subtitle\" class=\"slot-box\">Subtitle Slot</div>\n  <div class=\"slot-box\">Default (Body) Slot</div>\n  <div slot=\"actions\" class=\"slot-box\">Actions Slot</div>\n  <div slot=\"footer\" class=\"slot-box\">Footer Slot</div>\n</modus-wc-card>\n  `,\n};\n\nexport const ComplexCard: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<style>\n  #complex-card > .modus-wc-card:hover {\n    box-shadow:\n      0 20px 25px -5px rgba(0, 0, 0, 0.1),\n      0 8px 10px -6px rgba(0, 0, 0, 0.1);\n  }\n</style>\n<modus-wc-card\n  aria-label=\"Complex card with images and shadow\"\n  id=\"complex-card\"\n  ?background-figure=${args['background-figure']}\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <figure slot=\"header\">\n    <img\n      src=\"https://picsum.photos/id/643/750/300\"\n      alt=\"Header Image with Shadow\"\n    />\n  </figure>\n  <span slot=\"title\">Complex Card</span>\n  <span slot=\"subtitle\">With Shadow</span>\n  <p>\n    This is a more of a traditional Card, featuring a header image, content,\n    multiple buttons, and a larger shadow that appears on hover.\n  </p>\n  <div slot=\"actions\" class=\"modus-wc-justify-end\">\n    <modus-wc-button aria-label=\"Action 1\">Action 1</modus-wc-button>\n    <modus-wc-button aria-label=\"Action 2\">Action 2</modus-wc-button>\n  </div>\n</modus-wc-card>\n  `,\n};\n\nexport const HorizontalImage: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-card\n  aria-label=\"Horizontal image card\"\n  ?background-figure=${args['background-figure']}\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=\"horizontal\"\n  padding=${ifDefined(args.padding)}\n>\n  <figure slot=\"header\">\n    <img src=\"https://picsum.photos/id/1025/200/300\" alt=\"Horizontal Image\" />\n  </figure>\n  <p>This card uses a horizontal layout.</p>\n</modus-wc-card>\n  `,\n};\n\nexport const BackgroundFigureImage: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-card\n  aria-label=\"Full image card\"\n  background-figure\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <figure slot=\"header\">\n    <img src=\"https://picsum.photos/id/1045/600/400\" alt=\"Full Image\" />\n  </figure>\n  <span slot=\"title\">Full Image Card</span>\n  <p>This card has a figure image in the background.</p>\n</modus-wc-card>\n  `,\n};\n"
    },
    "modus-wc-checkbox.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-wc-chip.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface ChipArgs {\n  active?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  'has-error'?: boolean;\n  label: string;\n  'show-remove'?: boolean;\n  size: ModusSize;\n  variant: 'filled' | 'outline';\n}\n\nconst meta: Meta<ChipArgs> = {\n  title: 'Components/Chip',\n  component: 'modus-wc-chip',\n  args: {\n    label: 'Chip',\n    'show-remove': true,\n    size: 'md',\n    variant: 'filled',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['filled', 'outline'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['chipClick', 'chipRemove'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ChipArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    return html` <modus-wc-chip\n      aria-label=\"Chip example\"\n      active=${ifDefined(args.active)}\n      disabled=${ifDefined(args.disabled)}\n      has-error=${ifDefined(args['has-error'])}\n      label=${args.label}\n      show-remove=${ifDefined(args['show-remove'])}\n      size=${args.size}\n      variant=${args.variant}\n    />`;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const AvatarChip: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  label=${args.label}\n  show-remove=${ifDefined(args['show-remove'])}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-avatar\n    img-src=\"https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg\"\n    alt=\"sonic the hedgehog\"\n  ></modus-wc-avatar>\n</modus-wc-chip>\n    `;\n  },\n};\n\nexport const CheckIconChip: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  label=${args.label}\n  show-remove=${ifDefined(args['show-remove'])}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"check\" size=\"xs\"></modus-wc-icon>\n</modus-wc-chip>\n    `;\n  },\n};\n\n// prettier-ignore\nexport const Composable: Story = {\n  render: (args) => {\n    return html`\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n  Chip\n</modus-wc-chip>\n\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  show-remove=\"true\"\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n  Chip\n</modus-wc-chip>\n\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n  Chip\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n</modus-wc-chip>\n    `;\n  },\n};\n"
    },
    "modus-wc-collapse.tsx": {
      "props": [],
      "events": [],
      "slots": [
        {
          "name": "header",
          "comment": "// The 'header' slot lets you provide custom header content for the collapse component. If you don't use the pre-configured header via the \"options\" prop, anything you place into this slot will be rendered as the header, allowing for full customizability."
        },
        {
          "name": "content",
          "comment": "// The 'content' slot allows users to insert custom HTML content that will be shown or hidden when the collapse component expands or collapses."
        }
      ],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IModusWcCollapseOptions } from './modus-wc-collapse';\n\ninterface CollapseArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  expanded?: boolean;\n  id?: string;\n  options?: IModusWcCollapseOptions;\n}\n\nconst options: IModusWcCollapseOptions = {\n  title: 'Collapse Title',\n  description: 'Collapse description',\n  icon: 'alert',\n  iconAriaLabel: 'Alert',\n};\n\nconst meta: Meta<CollapseArgs> = {\n  title: 'Components/Collapse',\n  component: 'modus-wc-collapse',\n  args: {\n    bordered: true,\n    expanded: false,\n    options,\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['expandedChange'],\n    },\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<CollapseArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=${ifDefined(args.id)}\n  .options=${ifDefined(args.options)}\n>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const WithCustomContent = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=\"123\"\n>\n  <div slot=\"header\" class=\"modus-wc-collapse-title\" id=\"123\">Custom header</div>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    `;\n  },\n};\n"
    },
    "modus-wc-date.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface DateArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  max?: string;\n  min?: string;\n  name?: string;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  size?: ModusSize;\n  value: string;\n}\n\nconst meta: Meta<DateArgs> = {\n  title: 'Components/Forms/Date',\n  component: 'modus-wc-date',\n  args: {\n    bordered: true,\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    'read-only': false,\n    required: false,\n    size: 'md',\n    value: '',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<DateArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-date\n        aria-label=\"Date input\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-date>\n    `;\n  },\n};\n"
    },
    "modus-wc-divider.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { Orientation } from '../types';\n\ninterface DividerArgs {\n  color:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'high-contrast'\n    | 'success'\n    | 'warning'\n    | 'danger';\n  content: string;\n  'custom-class'?: string;\n  orientation: Orientation;\n  position: 'center' | 'end' | 'start';\n  responsive: boolean;\n}\n\nconst meta: Meta<DividerArgs> = {\n  title: 'Components/Divider',\n  component: 'modus-wc-divider',\n  args: {\n    color: 'tertiary',\n    content: '',\n    'custom-class': '',\n    orientation: 'vertical',\n    position: 'center',\n    responsive: true,\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: [\n        'primary',\n        'secondary',\n        'tertiary',\n        'high-contrast',\n        'success',\n        'warning',\n        'danger',\n      ],\n    },\n    content: {\n      control: 'text',\n    },\n    'custom-class': {\n      control: 'text',\n    },\n    orientation: {\n      control: { type: 'select' },\n      options: ['horizontal', 'vertical'],\n    },\n    position: {\n      control: { type: 'select' },\n      options: ['start', 'center', 'end'],\n    },\n    responsive: {\n      control: { type: 'boolean' },\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<DividerArgs>;\n\nconst Template: Story = {\n  render: (args) => html`\n    <modus-wc-divider\n      aria-label=\"Divider\"\n      color=\"${args.color}\"\n      content=\"${args.content}\"\n      custom-class=\"${ifDefined(args['custom-class'])}\"\n      orientation=\"${args.orientation}\"\n      position=\"${args.position}\"\n      responsive=\"${args.responsive}\"\n      style=\"${args.orientation === 'horizontal'\n        ? 'display: flex; height: 100px'\n        : ''}\"\n    ></modus-wc-divider>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n"
    },
    "modus-wc-icon.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize } from '../types';\n\ninterface IconArgs {\n  'custom-class'?: string;\n  decorative: boolean;\n  name: string;\n  size: DaisySize;\n}\n\nconst meta: Meta<IconArgs> = {\n  title: 'Components/Icon',\n  component: 'modus-wc-icon',\n  args: {\n    'custom-class': '',\n    decorative: false,\n    name: 'alert',\n    size: 'md',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<IconArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-icon\n        aria-label=\"Alert icon\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?decorative=\"${ifDefined(args.decorative)}\"\n        name=\"${args.name}\"\n        size=\"${args.size}\"\n      >\n      </modus-wc-icon>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const CustomColor: Story = {\n  render: (args) => {\n    return html`\n      <style>\n        .red-icon {\n          color: red;\n        }\n      </style>\n      <modus-wc-icon\n        aria-label=\"Red alert icon\"\n        custom-class=\"red-icon\"\n        name=\"alert\"\n        size=\"${args.size}\"\n      >\n      </modus-wc-icon>\n    `;\n  },\n};\n"
    },
    "modus-wc-input-label.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface InputLabelArgs {\n  'for-id'?: string;\n  'custom-class'?: string;\n  'label-text'?: string;\n  required?: boolean;\n  size?: ModusSize;\n  'sub-label-text'?: string;\n}\n\nconst meta: Meta<InputLabelArgs> = {\n  title: 'Components/Forms/Input Label',\n  component: 'modus-wc-input-label',\n  args: {\n    'label-text': 'Label',\n    required: false,\n    size: 'md',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<InputLabelArgs>;\n\nconst Template: Story = {\n  render: (args) => html`\n    <modus-wc-input-label\n      for-id=${ifDefined(args['for-id'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      label-text=${ifDefined(args['label-text'])}\n      ?required=${args['required']}\n      size=${args.size}\n      sub-label-text=${ifDefined(args['sub-label-text'])}\n    ></modus-wc-input-label>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n\nexport const Required: Story = { ...Template, args: { required: true } };\n"
    },
    "modus-wc-loader.tsx": {
      "props": [
        {
          "name": "color",
          "comment": "// The 'color' prop allows users to set the loader's visual color by specifying one of the predefined color values (e.g., 'primary', 'secondary', etc.). Its value is used to generate the appropriate CSS class via convertPropsToClasses, influencing the loader's styling."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop controls the overall dimensions of the loader. It accepts a DaisySize value (such as 'sm', 'md', or 'lg') and is used to determine the appropriate CSS classes to style the loader accordingly."
        },
        {
          "name": "variant",
          "comment": "// The 'variant' prop defines the visual style of the loader animation.\n// It accepts specific values such as 'ball', 'bars', 'dots', 'infinity', 'ring', and 'spinner'\n// which correspond to different predefined loader animations/styles. This value is transformed\n// via the 'convertPropsToClasses' helper to apply the proper CSS classes, enabling customizable\n// animations based on the selected variant."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { LoaderColor, LoaderVariant } from './modus-wc-loader';\nimport { DaisySize } from '../types';\n\ninterface LoaderArgs {\n  color: LoaderColor;\n  'custom-class'?: string;\n  size: DaisySize;\n  variant: LoaderVariant;\n}\n\nconst meta: Meta<LoaderArgs> = {\n  title: 'Components/Loader',\n  component: 'modus-wc-loader',\n  args: {\n    color: 'primary',\n    'custom-class': '',\n    size: 'md',\n    variant: 'spinner',\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: [\n        'primary',\n        'secondary',\n        'accent',\n        'neutral',\n        'info',\n        'success',\n        'warning',\n        'error',\n      ],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['ball', 'bars', 'dots', 'infinity', 'ring', 'spinner'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<LoaderArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading spinner\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"${args.size}\"\n        variant=\"${args.variant}\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Ball: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading ball\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"ball\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Bars: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading bars\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"bars\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Dots: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading dots\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"dots\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\n// eslint-disable-next-line no-shadow-restricted-names\nexport const Infinity: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading infinity symbol\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"infinity\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Ring: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading ring\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"ring\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n"
    },
    "modus-wc-menu.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize, Orientation } from '../types';\n\ninterface MenuArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  orientation?: Orientation;\n  size?: ModusSize;\n}\n\nconst meta: Meta<MenuArgs> = {\n  title: 'Components/Menu',\n  component: 'modus-wc-menu',\n  args: {\n    orientation: 'vertical',\n    size: 'md',\n  },\n  argTypes: {\n    orientation: {\n      control: { type: 'select' },\n      options: ['horizontal', 'vertical'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<MenuArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-menu\n  aria-label=\"Menu\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  orientation=${ifDefined(args.orientation)}\n  size=${ifDefined(args.size)}\n>\n  <modus-wc-menu-item\n    label=\"Small\"\n    value=\"1\"\n    size=\"sm\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item label=\"Medium\" value=\"2\"></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Large\"\n    value=\"3\"\n    size=\"lg\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Bordered\"\n    value=\"3\"\n    bordered=\"true\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"With Sub-label\"\n    value=\"3\"\n    sub-label=\"Sub-label\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Selected\"\n    value=\"3\"\n    selected=\"true\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"With Start Icon\"\n    value=\"3\"\n    start-icon=\"info\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Disabled\"\n    value=\"3\"\n    disabled=\"true\"\n  ></modus-wc-menu-item>\n</modus-wc-menu>\n    `;\n  },\n};\n\nexport const CustomMenu: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<style>\n  .menu-width {\n    width: 400px;\n  }\n  .flex-row {\n    display: flex;\n    align-items: center;\n  }\n  .nested-row {\n    padding-inline-start: 3rem;\n  }\n  .justify-end {\n    margin-left: auto;\n  }\n  .green-square {\n    height: 18px;\n    width: 18px;\n    background-color: green;\n  }\n  .red-square {\n    height: 18px;\n    width: 18px;\n    background-color: red;\n  }\n</style>\n<modus-wc-menu\n  aria-label=\"Custom menu\"\n  custom-class=\"menu-width\"\n>\n  <li>\n    <div class=\"flex-row\">\n      <modus-wc-icon decorative=\"true\" name=\"expand_more\"></modus-wc-icon>\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Visible icon\" name=\"visibility_on\"></modus-wc-icon>\n      </modus-wc-button>\n      <div>Parent</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n  <li>\n    <div class=\"flex-row nested-row\">\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Visible icon\" name=\"visibility_on\"></modus-wc-icon>\n      </modus-wc-button>\n      <div class=\"green-square\"></div>\n      <div>Child</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n  <li>\n    <div class=\"flex-row nested-row\">\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Invisible icon\" name=\"visibility_off\"></modus-wc-icon>\n      </modus-wc-button>\n      <div class=\"red-square\"></div>\n      <div>Child</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n  <li>\n    <div class=\"flex-row\">\n      <modus-wc-icon decorative=\"true\" name=\"chevron_right\"></modus-wc-icon>\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Visible icon\" name=\"visibility_on\"></modus-wc-icon>\n      </modus-wc-button>\n      <div>Parent</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n</modus-wc-menu>\n    `;\n  },\n};\n"
    },
    "modus-wc-menu-item.tsx": {
      "props": [
        {
          "name": "label",
          "comment": "// The 'label' prop holds the main text content that is displayed in the menu item, defining what the item represents visually."
        },
        {
          "name": "value",
          "comment": "// The 'value' prop is a unique identifier for the menu item. When the item is selected, its value is emitted in the itemSelect event, allowing parent components to determine which item was chosen."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface MenuItemArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  label: string;\n  'start-icon'?: string;\n  selected?: boolean;\n  size?: ModusSize;\n  'sub-label'?: string;\n  value: string;\n}\n\nconst meta: Meta<MenuItemArgs> = {\n  title: 'Components/Menu Item',\n  component: 'modus-wc-menu-item',\n  args: {\n    label: 'Menu Item',\n    size: 'md',\n    value: 'menuItem',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['itemSelect'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<MenuItemArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-menu>\n  <modus-wc-menu-item\n    ?bordered=${args.bordered}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    start-icon=${ifDefined(args['start-icon'])}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    value=${args.value}\n  ></modus-wc-menu-item>\n</modus-wc-menu>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n"
    },
    "modus-wc-modal.tsx": {
      "props": [],
      "events": [],
      "slots": [
        {
          "name": "header",
          "comment": "// The 'header' slot lets developers inject custom header content (like titles or navigation elements) into the modal\u2019s header area, allowing for flexible and dynamic customization of the modal's top section."
        },
        {
          "name": "content",
          "comment": "// The 'content' slot is where you insert the main body of the modal. It allows you to provide custom HTML (text, images, forms, etc.) that will be rendered as the central content area of the modal dialog."
        },
        {
          "name": "footer",
          "comment": "// The 'footer' slot allows consumers of the modal component to inject custom action elements\u2014typically buttons or links for confirming or canceling actions\u2014into the footer area of the modal."
        }
      ],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { generateRandomId } from '../utils';\n\ninterface ModalArgs {\n  backdrop: 'default' | 'static';\n  'custom-class'?: string;\n  fullscreen: boolean;\n  'modal-id'?: string;\n  position: 'bottom' | 'center' | 'top';\n  'show-close': boolean;\n  'show-fullscreen-toggle': boolean;\n}\n\nconst meta: Meta<ModalArgs> = {\n  title: 'Components/Modal',\n  component: 'modus-wc-modal',\n  args: {\n    backdrop: 'default',\n    'custom-class': '',\n    fullscreen: false,\n    'modal-id': 'my_modal_1',\n    position: 'center',\n    'show-close': true,\n    'show-fullscreen-toggle': false,\n  },\n  argTypes: {\n    backdrop: {\n      control: { type: 'select' },\n      options: ['default', 'static'],\n    },\n    position: {\n      control: { type: 'select' },\n      options: ['bottom', 'center', 'top'],\n    },\n  },\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ModalArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    const uniqueModalId = generateRandomId(4);\n    // prettier-ignore\n    return html`\n<modus-wc-button onclick=\"${args['modal-id'] + uniqueModalId}.showModal()\">\n  Open modal\n</modus-wc-button>\n<modus-wc-modal\n  aria-label=\"Example modal\"\n  custom-class=${ifDefined(args['custom-class'])}\n  fullscreen=${args.fullscreen}\n  modal-id=${args['modal-id'] + uniqueModalId}\n  backdrop=${args.backdrop}\n  position=${args.position}\n  show-close=${args['show-close']}\n  show-fullscreen-toggle=${args['show-fullscreen-toggle']}\n>\n  <span slot=\"header\">Modal Title</span>\n  <span slot=\"content\"> This is sample modal content. </span>\n  <modus-wc-button slot=\"footer\" onclick=\"${args['modal-id'] + uniqueModalId}.close()\">\n    Close\n  </modus-wc-button>\n</modus-wc-modal>\n    `;\n  },\n};\n\nexport const CustomWidthAndHeight: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  #modal2 .modus-wc-modal-box {\n    width: 80%;\n    max-width: none;\n    height: 60%;\n    max-height: none;\n  }\n</style>\n<modus-wc-button onclick=\"modal2.showModal()\">\n  Open modal\n</modus-wc-button>\n<modus-wc-modal\n  aria-label=\"Example modal\"\n  custom-class=\"expanded-modal\"\n  modal-id=\"modal2\"\n  backdrop=${ifDefined(args.backdrop)}\n  position=${ifDefined(args.position)}\n  show-close=${ifDefined(args['show-close'])}\n>\n  <span slot=\"header\">Modal Title</span>\n  <p slot=\"content\">Sample modal content.</p>\n  <modus-wc-button slot=\"footer\" onclick=\"modal2.close()\">\n    Close\n  </modus-wc-button>\n</modus-wc-modal>\n    `;\n  },\n};\n"
    },
    "modus-wc-number-input.tsx": {
      "props": [
        {
          "name": "inputMode",
          "comment": "// The \"inputMode\" prop hints at the type of virtual keyboard that should be displayed when the input is focused,\n// improving user experience on mobile devices by suggesting an appropriate keyboard layout (e.g., \"numeric\" for numbers)."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-wc-pagination.tsx": {
      "props": [
        {
          "name": "count",
          "comment": "// The 'count' prop represents the total number of pages available. It is used to determine the maximum page number,\n// generate the set of visible page buttons, handle boundary conditions (e.g., disabling navigation at the first or last page),\n// and validate page click events by ensuring that the new page number stays within the valid range."
        },
        {
          "name": "page",
          "comment": "// The 'page' prop represents the current active page number in the pagination component.\n// It determines which page is highlighted and used to calculate the sliding window of visible page buttons.\n// Updating 'page' (either via user interaction or externally) triggers recalculation of the visible pages\n// and emits a pageChange event with the new and previous page numbers."
        },
        {
          "name": "size",
          "comment": "// The 'size' prop sets the dimensions for the pagination buttons. Its value, which defaults to 'md', is used to add size-specific CSS classes (via convertPropsToClasses) so that the component's appearance (e.g., small, medium, large) can be easily customized."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IModusWcAriaLabelValues } from './modus-wc-pagination';\n\nconst defaultLabelValues: IModusWcAriaLabelValues = {\n  firstPage: 'First page',\n  lastPage: 'Last page',\n  nextPage: 'Next page',\n  page: 'Page {0}',\n  previousPage: 'Previous page',\n};\n\ninterface PaginationArgs {\n  'arial-label-values'?: IModusWcAriaLabelValues;\n  count: number;\n  'custom-class'?: string;\n  page: number;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst meta: Meta<PaginationArgs> = {\n  title: 'Components/Pagination',\n  component: 'modus-wc-pagination',\n  args: {\n    'arial-label-values': defaultLabelValues,\n    count: 5,\n    'custom-class': '',\n    page: 1,\n    size: 'md',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['pageChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<PaginationArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-pagination\n      .ariaLabelValues=${args['arial-label-values']}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      page=${args.page}\n      size=${ifDefined(args.size)}\n    ></modus-wc-pagination>\n  `,\n};\n"
    },
    "modus-wc-progress.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-wc-radio.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface RadioArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  value: boolean;\n}\n\nconst meta: Meta<RadioArgs> = {\n  title: 'Components/Forms/Radio',\n  component: 'modus-wc-radio',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<RadioArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-radio\n        aria-label=\"Radio\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-radio>\n    `;\n  },\n};\n"
    },
    "modus-wc-select.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-wc-skeleton.tsx": {
      "props": [
        {
          "name": "height",
          "comment": "// 'height' determines the vertical size of the skeleton element by setting its inline CSS height.\n// It defaults to a CSS variable ('var(--modus-wc-line-height-md)') that can be overridden via a prop."
        },
        {
          "name": "width",
          "comment": "// The 'width' prop lets users set the CSS width of the skeleton element. It defaults to '100%' and is applied as an inline style, allowing customization of the skeleton's horizontal size when rendered."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface SkeletonArgs {\n  'custom-class'?: string;\n  height?: string;\n  shape?: 'circle' | 'rectangle';\n  width?: string;\n}\n\nconst meta: Meta<SkeletonArgs> = {\n  title: 'Components/Skeleton',\n  component: 'modus-wc-skeleton',\n  args: {\n    'custom-class': '',\n    height: '1.5rem',\n    shape: 'rectangle',\n    width: '100%',\n  },\n  argTypes: {\n    shape: {\n      control: {\n        type: 'select',\n      },\n      options: ['circle', 'rectangle'],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SkeletonArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-skeleton\n        custom-class=${ifDefined(args['custom-class'])}\n        height=${ifDefined(args.height)}\n        shape=${ifDefined(args.shape)}\n        width=${ifDefined(args.width)}\n      ></modus-wc-skeleton>\n    `;\n  },\n};\n\nexport const Circle: Story = {\n  render: () => {\n    return html`\n      <modus-wc-skeleton\n        height=\"5rem\"\n        shape=\"circle\"\n        width=\"5rem\"\n      ></modus-wc-skeleton>\n    `;\n  },\n};\n\nexport const Square: Story = {\n  render: () => {\n    return html`\n      <modus-wc-skeleton height=\"5rem\" width=\"5rem\"></modus-wc-skeleton>\n    `;\n  },\n};\n\nexport const Composed: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<style>\n  .skeleton-container {\n    width: 13rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  .skeleton-profile {\n    display: flex;\n    gap: 1rem;\n  }\n\n  .skeleton-text {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n</style>\n<div class=\"skeleton-container\">\n  <div class=\"skeleton-profile\">\n    <modus-wc-skeleton\n      height=\"4rem\"\n      shape=\"circle\"\n      width=\"4rem\"\n    ></modus-wc-skeleton>\n    <div class=\"skeleton-text\">\n      <modus-wc-skeleton width=\"5rem\"></modus-wc-skeleton>\n      <modus-wc-skeleton width=\"7rem\"></modus-wc-skeleton>\n    </div>\n  </div>\n  <modus-wc-skeleton height=\"8rem\"></modus-wc-skeleton>\n</div>\n    `;\n  },\n};\n"
    },
    "modus-wc-slider.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface SliderArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  max?: number;\n  min?: number;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  step?: number;\n  value: boolean;\n}\n\nconst meta: Meta<SliderArgs> = {\n  title: 'Components/Forms/Slider',\n  component: 'modus-wc-slider',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SliderArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-slider\n        aria-label=\"Slider\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        step=${ifDefined(args.step)}\n        .value=${args.value}\n      ></modus-wc-slider>\n    `;\n  },\n};\n"
    },
    "modus-wc-stepper.tsx": {
      "props": [
        {
          "name": "steps",
          "comment": "// The 'steps' prop is an array of objects, where each object defines a step's properties (such as color, label, content, and any custom CSS class). Each step in the array is rendered as a list item (<li>) within the stepper, with styling and content determined by the object's properties, allowing the component to dynamically display a multi-step process."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { Orientation } from '../types';\n\ninterface StepperArgs {\n  'custom-class'?: string;\n  orientation: Orientation;\n  steps?: IModusWcStepperItem[];\n}\n\ninterface IModusWcStepperItem {\n  color?:\n    | 'primary'\n    | 'secondary'\n    | 'accent'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'neutral';\n  content?: string;\n  customClass?: string;\n  label?: string;\n}\n\nconst meta: Meta<StepperArgs> = {\n  title: 'Components/Stepper',\n  component: 'modus-wc-stepper',\n  args: {\n    steps: [\n      { label: 'Scale', color: 'primary' },\n      { label: 'Belong', color: 'primary' },\n      { label: 'Grow', color: 'warning' },\n      { label: 'Innovate', content: '\ud83d\ude80' },\n    ],\n  },\n  argTypes: {\n    'custom-class': {\n      control: 'text',\n    },\n    orientation: {\n      control: { type: 'select' },\n      options: ['horizontal', 'vertical'],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<StepperArgs>;\n\nconst Template: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-stepper\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  orientation=\"${ifDefined(args.orientation)}\"\n  .steps=\"${args.steps}\"\n>\n</modus-wc-stepper>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n"
    },
    "modus-wc-table.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ITableColumn } from './modus-wc-table';\nimport { Density } from '../types';\n\nconst defaultColumns: ITableColumn[] = [\n  {\n    id: 'name',\n    header: 'Name',\n    accessor: 'name',\n    width: '200px',\n  },\n  {\n    id: 'email',\n    header: 'Email',\n    accessor: 'email',\n  },\n  {\n    id: 'status',\n    header: 'Status',\n    accessor: 'status',\n    cellRenderer: (value) => {\n      const isActive = value.toLowerCase() === 'active';\n      const badge = document.createElement('modus-wc-badge');\n      badge.color = isActive ? 'success' : 'danger';\n      const div = document.createElement('div');\n      div.textContent = value;\n      badge.appendChild(div);\n      return badge;\n    },\n  },\n];\n\nconst defaultData = [\n  { name: 'John Smith', email: 'john.smith@example.com', status: 'Active' },\n  { name: 'Jane Doe', email: 'jane.doe@example.com', status: 'Inactive' },\n  { name: 'Bob Johnson', email: 'bob.johnson@example.com', status: 'Active' },\n];\n\ninterface TableArgs {\n  columns: ITableColumn[];\n  'custom-class'?: string;\n  data: Record<string, any>[];\n  density?: Density;\n  zebra?: boolean;\n}\n\nconst meta: Meta<TableArgs> = {\n  title: 'Components/Table',\n  component: 'modus-wc-table',\n  args: {\n    columns: defaultColumns,\n    data: defaultData,\n    density: 'comfortable',\n    zebra: false,\n  },\n  argTypes: {\n    density: {\n      control: { type: 'select' },\n      options: ['comfortable', 'compact'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['rowClick'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TableArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-table\n        aria-label=\"User data\"\n        .columns=${args.columns}\n        custom-class=${ifDefined(args['custom-class'])}\n        .data=${args.data}\n        density=${ifDefined(args.density)}\n        ?zebra=${args.zebra}\n      />\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n"
    },
    "modus-wc-tabs.tsx": {
      "props": [
        {
          "name": "tabs",
          "comment": "// The 'tabs' prop is an array of objects that defines each tab\u2019s configuration. Each object can include a label, an icon, custom styling, and a disabled state. The component iterates over this array to render both the clickable tab buttons and the associated content panels, using each object's properties to control appearance, behavior, and accessibility."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-wc-text-input.tsx": {
      "props": [
        {
          "name": "inputMode",
          "comment": "// The 'inputMode' prop hints at what type of keyboard should be displayed on devices that support virtual keyboards.\n// It allows you to specify the expected type of input (e.g., 'numeric', 'email', 'tel', etc.), thus enhancing usability by potentially showing a context-appropriate keyboard."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-wc-textarea.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize } from '../types';\n\ninterface TextAreaArgs {\n  'auto-correct': 'on' | 'off';\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n  'input-aria-invalid'?: 'grammar' | 'spelling' | 'true' | 'false';\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  'max-length'?: number;\n  name?: string;\n  placeholder?: string;\n  readonly?: boolean;\n  required?: boolean;\n  rows?: number;\n  size?: DaisySize;\n  spellcheck?: boolean;\n  value: string;\n}\n\nconst meta: Meta<TextAreaArgs> = {\n  title: 'Components/Forms/Textarea',\n  component: 'modus-wc-textarea',\n  args: {\n    bordered: true,\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    readonly: false,\n    required: false,\n    size: 'md',\n    spellcheck: false,\n    value: '',\n  },\n  argTypes: {\n    'auto-correct': {\n      options: ['on', 'off'],\n    },\n    enterkeyhint: {\n      options: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],\n    },\n    'input-aria-invalid': {\n      control: {\n        type: 'select',\n      },\n      options: ['grammar', 'spelling', 'true', 'false'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    spellcheck: {\n      description:\n        'Whether the element may be checked for spelling errors. A hint for the browser, not a guarantee.',\n      table: {\n        category: 'attributes',\n        defaultValue: { summary: 'false' },\n      },\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TextAreaArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-textarea\n        aria-label=\"Textarea input\"\n        auto-correct=${ifDefined(args['auto-correct'])}\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        enterkeyhint=${ifDefined(args.enterkeyhint)}\n        ?disabled=${args.disabled}\n        input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max-length=${ifDefined(args['max-length'])}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?readonly=${args.readonly}\n        ?required=${args.required}\n        rows=${ifDefined(args.rows)}\n        size=${ifDefined(args.size)}\n        spellcheck=${ifDefined(args.spellcheck)}\n        .value=${args.value}\n      ></modus-wc-textarea>\n    `;\n  },\n};\n"
    },
    "modus-wc-theme-switcher.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IThemeConfig } from '../../providers/theme/theme.types';\n\ninterface ThemeSwitcherArgs {\n  'custom-class'?: string;\n  'initial-theme'?: Partial<IThemeConfig>;\n}\n\nconst meta: Meta<ThemeSwitcherArgs> = {\n  title: 'Components/ThemeSwitcher',\n  component: 'modus-wc-theme-switcher',\n  args: {\n    'custom-class': undefined,\n    'initial-theme': undefined,\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['themeChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ThemeSwitcherArgs>;\n\nconst Template: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-theme-provider .initialTheme=${args['initial-theme']}>\n  <modus-wc-theme-switcher\n    aria-label=\"Theme toggle\"\n    custom-class=${ifDefined(args['custom-class'])}\n  ></modus-wc-theme-switcher>\n</modus-wc-theme-provider>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n"
    },
    "modus-wc-time-input.tsx": {
      "props": [
        {
          "name": "datalistOptions",
          "comment": "// The 'datalistOptions' prop accepts an array of time strings (in \"HH:mm\" or \"HH:mm:ss\" format) that, when provided, are used to render a corresponding <datalist> element with time options. This enables users to select a time from a predefined list in the dropdown associated with the input."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-wc-toast.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": ""
    },
    "modus-wc-toggle.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": "import { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface ToggleArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  indeterminate?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  value: boolean;\n}\n\nconst meta: Meta<ToggleArgs> = {\n  title: 'Components/Forms/Toggle',\n  component: 'modus-wc-toggle',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    indeterminate: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ToggleArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-toggle\n        aria-label=\"Toggle\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-toggle>\n    `;\n  },\n};\n"
    },
    "modus-wc-tooltip.tsx": {
      "props": [
        {
          "name": "content",
          "comment": "// The 'content' prop holds the text to be displayed within the tooltip, which is set as the value of the data-tip attribute on the tooltip element. This allows for easy configuration of the tooltip's textual information."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface TooltipArgs {\n  content?: string;\n  'custom-class'?: string;\n  disabled?: boolean;\n  'force-open'?: boolean;\n  'tooltip-id'?: string;\n  position: 'auto' | 'top' | 'right' | 'bottom' | 'left';\n}\n\nconst meta: Meta<TooltipArgs> = {\n  title: 'Components/Tooltip',\n  component: 'modus-wc-tooltip',\n  args: {\n    content: 'Tooltip content',\n    position: 'auto',\n  },\n  argTypes: {\n    position: {\n      control: { type: 'select' },\n      options: ['auto', 'top', 'right', 'left', 'bottom'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TooltipArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n      <modus-wc-tooltip\n        content=${ifDefined(args.content)}\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?disabled=\"${args.disabled}\"\n        ?force-open=\"${args['force-open']}\"\n        tooltip-id=\"${ifDefined(args['tooltip-id'])}\"\n        position=${ifDefined(args.position)}\n      >\n        <modus-wc-badge>Hover</modus-wc-badge>\n      </modus-wc-tooltip>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n"
    },
    "modus-wc-typography.tsx": {
      "props": [
        {
          "name": "variant",
          "comment": "// The 'variant' prop determines the HTML tag used for rendering the typography element (e.g., 'p', 'h1', etc.), allowing you to semantically control both styling and accessibility by specifying the appropriate element type based on the content."
        }
      ],
      "events": [],
      "slots": [],
      "documentation": "import { Meta, StoryObj } from '@storybook/web-components';\nimport { html, render } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { TypographyVariant, TypographyWeight } from './modus-wc-typography';\nimport { DaisySize } from '../types';\n\n// Slot content was lost due to rendering issues when changing the \"variant\" attribute.\n// Because of this, each variant is rendered as a unique story below.\n\nconst content = 'The quick brown fox jumps over the lazy dog';\n\ninterface TypographyArgs {\n  'custom-class'?: string;\n  size?: DaisySize;\n  variant: TypographyVariant;\n  weight?: TypographyWeight;\n}\n\nconst meta: Meta<TypographyArgs> = {\n  title: 'Components/Typography',\n  component: 'modus-wc-typography',\n  args: {\n    size: 'md',\n    variant: 'p',\n    weight: 'normal',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['body', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p'],\n    },\n    weight: {\n      control: { type: 'select' },\n      options: ['light', 'normal', 'bold'],\n    },\n  },\n  decorators: [\n    (story) => {\n      // Create a stable container that won't be recreated on re-renders\n      const container = document.createElement('div');\n      const template = document.createElement('template');\n      template.innerHTML = content;\n\n      const renderStory = () => {\n        render(story(), container);\n\n        // Ensure slot content is present after render\n        const typography = container.querySelector('modus-wc-typography');\n        if (typography && !typography.textContent) {\n          typography.textContent = template.innerHTML;\n        }\n      };\n\n      renderStory();\n      return container;\n    },\n  ],\n};\n\nexport default meta;\n\ntype Story = StoryObj<TypographyArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-typography\n      custom-class=${ifDefined(args['custom-class'])}\n      size=${ifDefined(args.size)}\n      variant=${args.variant}\n      weight=${ifDefined(args.weight)}\n    ></modus-wc-typography>\n  `,\n};\n\nexport const Body: Story = {\n  args: {\n    variant: 'body',\n  },\n};\n\nexport const Heading1: Story = {\n  args: {\n    variant: 'h1',\n  },\n};\n\nexport const Heading2: Story = {\n  args: {\n    variant: 'h2',\n  },\n};\n\nexport const Heading3: Story = {\n  args: {\n    variant: 'h3',\n  },\n};\n\nexport const Heading4: Story = {\n  args: {\n    variant: 'h4',\n  },\n};\n\nexport const Heading5: Story = {\n  args: {\n    variant: 'h5',\n  },\n};\n\nexport const Heading6: Story = {\n  args: {\n    variant: 'h6',\n  },\n};\n\nexport const Paragraph: Story = {\n  args: {\n    variant: 'p',\n  },\n};\n"
    },
    "theme-provider.tsx": {
      "props": [],
      "events": [],
      "slots": [],
      "documentation": ""
    }
  },
  "component_map": {},
  "constraints": [
    {
      "type": "breaking",
      "description": "Modus 2.0 introduces breaking API changes where component methods, property names, and event handlers have been modified or removed. This requires developers to adjust their code to the new API signatures and correct any deprecated calls present in 1.0.",
      "components": []
    },
    {
      "type": "styling",
      "description": "The new version comes with a revamped styling framework and structural hierarchy. Components may have updated class names, layout structures, or theme variables that necessitate rewriting custom CSS and layout adjustments to ensure a consistent look and feel.",
      "components": []
    },
    {
      "type": "compatibility",
      "description": "Certain legacy behaviors and dependencies from Modus 1.0 might not be supported in 2.0. Verify third-party integrations, polyfills, and dependency compatibility to ensure the migrated components function properly in the updated environment.",
      "components": []
    }
  ],
  "verification_rules": [
    {
      "rule": "Audit Codebase for Legacy Components and Attributes",
      "status": "pending",
      "details": [
        "Search through all component templates (e.g., app.component.html) for legacy component tags and deprecated HTML elements.",
        "Identify outdated property names and event handlers that no longer align with the Modus 2.0 API.",
        "Document all findings to ensure complete coverage before making any changes."
      ]
    },
    {
      "rule": "Replace Legacy Component Tags with Modus 2.0 Equivalents",
      "status": "pending",
      "details": [
        "Replace outdated component tags (e.g., <modus-button> and <textarea>) with the new Modus 2.0 tags (e.g., <modus-wc-button> and <modus-wc-textarea>).",
        "Ensure that replacements follow the new API structure, including additional required attributes such as 'aria-label'.",
        "Verify that all component instances use the correct tag names as specified in the Modus 2.0 documentation."
      ]
    },
    {
      "rule": "Map and Transform Property Names and Values",
      "status": "pending",
      "details": [
        "For each updated component, review its properties and confirm that they match the new Modus 2.0 API signatures.",
        "Rename properties (e.g., change 'buttonStyle' to 'variant') and transform property values as needed.",
        "Remove any deprecated properties that are no longer supported in the new version."
      ]
    },
    {
      "rule": "Update Event Handlers and Method Signatures",
      "status": "pending",
      "details": [
        "Review all event bindings and method calls within the components.",
        "Replace or adjust legacy event handler names and parameter structures to match the updated API.",
        "Ensure all callback functions and method invocations adhere to the new naming conventions."
      ]
    },
    {
      "rule": "Apply Structural and Styling Adjustments",
      "status": "pending",
      "details": [
        "Update custom CSS classes, layout structures, and theme variables to align with the new styling framework in Modus 2.0.",
        "Modify HTML layouts to reflect the new component hierarchy and design guidelines.",
        "Ensure that the overall UI maintains a consistent look and feel after migration."
      ]
    },
    {
      "rule": "Verify Legacy Behavior and Dependency Compatibility",
      "status": "pending",
      "details": [
        "Assess the usage of any legacy behaviors, polyfills, and third-party integrations used in Modus 1.0.",
        "Ensure that any dependency calls are compatible with Modus 2.0, updating or removing features that conflict with the new version.",
        "Test compatibility manually to catch any issues before finalizing the migration."
      ]
    },
    {
      "rule": "Conduct Comprehensive Testing and Verification",
      "status": "pending",
      "details": [
        "Test each component after migration to validate that the new tags and properties function as expected.",
        "Verify the UI rendering, interactive behaviors, and accessibility features (e.g., checking for proper aria-labels in buttons).",
        "Cross-check each component against provided verification examples, such as converting <modus-button buttonStyle=\"primary\">Click</modus-button> to <modus-wc-button variant=\"primary\" aria-label=\"Click\">Click</modus-wc-button> and ensuring <textarea> becomes <modus-wc-textarea>."
      ]
    },
    {
      "rule": "Compare the Original codes tags and check if they are replaced with the new tags",
      "status": "pending",
      "details": [
        "Check the original code tags and compare them with the new tags.",
        "Ensure that the new tags are used in the codebase.",
        "Verify that the new tags are correctly implemented in the components."
      ]
    },
    {
      "rule": "Check the componetns added as slots to the components and verify the slots as well if it matches the new 2.0 structure perfectly",
      "status": "pending",
      "details": [
        "Check the 2.0 structure of the components.",
        "Verify that the slots are correctly implemented in the components.",
        "Ensure that the slots match the new 2.0 structure.",
        "Check for any discrepancies in the slot implementation."
      ]
    },
    {
      "rule": "Verify the styling and layout of the components",
      "status": "pending",
      "details": [
        "Check the styling and layout of the components.",
        "Ensure that the components are styled according to the new design guidelines.",
        "Verify that the layout structure is updated to match the new hierarchy."
      ]
    },
    {
      "rule": "Test the components for compatibility and functionality",
      "status": "pending",
      "details": [
        "Test the components for compatibility with Modus 2.0.",
        "Verify that the components function correctly in the updated environment.",
        "Check for any compatibility issues with third-party integrations or dependencies."
      ]
    }


  ],
  "migration_plan": [
    {
      "action": "Step 1: Code Audit \u2013 Identify all components and HTML tags used in Modus 1.0. Search through the codebase (e.g., in files like app.component.html and other component templates) to locate outdated component tags, property names, and event handlers that no longer align with the Modus 2.0 API.",
      "status": "pending",
      "type": "step"
    },
    {
      "action": "Step 2: Component Tag Replacement \u2013 For each identified custom component, replace the outdated Modus 1.0 tag with its Modus 2.0 equivalent. For example, if any standard HTML elements (e.g., <textarea>) or legacy component tags are employed, update them to the new tags (e.g., <modus-wc-textarea>) as specified in the Modus 2.0 documentation.",
      "status": "pending",
      "type": "step"
    },
    {
      "action": "Step 3: Property Mapping and Transformation \u2013 Review the properties used in each component. For every property present in the Modus 1.0 components, verify the corresponding property in Modus 2.0. Rename or transform property values where needed to match new API signatures. Remove deprecated properties that are no longer supported.",
      "status": "pending",
      "type": "step"
    },
    {
      "action": "Step 4: Update Event Handlers and Methods \u2013 Examine event bindings and method calls within components. Replace or adjust event handler names and signatures to fit the updated API. Ensure that callback functions and method invocations follow the new naming conventions and parameter structures outlined in the 2.0 version.",
      "status": "pending",
      "type": "step"
    },
    {
      "action": "Step 5: Apply Structural and Styling Adjustments \u2013 With the revamped styling framework in 2.0, update custom CSS classes, layout structures, and theme variables. Modify HTML layouts and component structures to reflect the new hierarchy and design guidelines provided in the documentation.",
      "status": "pending",
      "type": "step"
    },
    {
      "action": "Step 6: Legacy Behavior and Dependency Compatibility Review \u2013 Assess the use of legacy behaviors and third-party integrations. Ensure that polyfills, dependency calls, and integration points are compatible with Modus 2.0. Update or remove any features that conflict with the new version as described in the compatibility migration constraints.",
      "status": "pending",
      "type": "step"
    },
    {
      "action": "Step 7: Testing and Verification \u2013 After making code changes, carefully test each component. Validate that all replaced components, transformed properties, and updated event handlers function as expected. Verify that the UI now renders correctly using the new Modus 2.0 tags and styling, and that all interactive behaviors reflect the new API.",
      "status": "pending",
      "type": "step"
    }
  ],
  "current_file": null,
  "modified_code": {},
  "action": "complete",
  "verification_errors": [],
  "retry_count": 0,
  "human_feedback": null
}